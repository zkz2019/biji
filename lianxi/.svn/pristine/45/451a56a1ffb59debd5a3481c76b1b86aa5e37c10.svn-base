<!-- 清除指令队列 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>清除指令队列</com-title>
      <retrieval class="query_head">
        <inpbox :inptext="'请输入'">
          <el-input
            clearable 
            class="wid300 qh_inp"
            v-model="param.search"
            placeholder="输入操作账号称进行检索"
          ></el-input>
        </inpbox>
        <inpbox :inptext="''">
          <fel-button class="qh_btn" type="primary" @click="seInpust">查询</fel-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="padt0 query_main">
      <paging-table
        class="tobleList wh300"
        height="100%"
        interface="/system/clear/1/getclearorders"
        :list="list"
        :refresh="refresh"
        :param="param"
        @onEjectChange="onEjectChange"
      >
        <!-- <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span> -->
      </paging-table>
    </el-main>
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
export default {
  name: "jsgl107",
  components: {
  },
  data() {
    let $this = this;
    return {
      listBut: [],
      rolename: "",
      dialogVisible: false,
      param: { search: "" },
      topButs: [{alias:"清空指令队列",id:0}],
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "操作时间",
          prop: "cleardate"
        },
        {
          name: "id",
          prop: "clearid"
        },
        {
          name: "操作账号",
          prop: "userlogin"
        },
        {
          name: "账号名",
          prop: "username"
        }
      ],
      refresh: 0
    };
  },
  mounted() {
    this.getEject();
  },
  methods: {
//       aaa(){
// this.$ajax("/system/clear/1/getclearorders",{page:1,rows:10,search:""})
// .then(res=>{
// })
//       },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.seInpust();
    },

    success() {
      this.dialogVisible = false;
      this.rolename = "";
      this.onRefresh();
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    seInpust() {
      this.onRefresh();
    },
    // delete(rolename) {
    //   this.$confirm("确定要删除当前角色吗？", "提示", {
    //     confirmButtonText: "确定",
    //     cancelButtonText: "取消",
    //     type: "warning"
    //   })
    //     .then(() => {
    //       this.$ajax("/system/role/delete/1/deleterole", { rolename }, "1")
    //         .then(res => {
    //           this.rolename = "";
    //           this.xzsj = {};
    //           this.onRefresh();
    //           this.$message({
    //             message: "删除成功",
    //             type: "success"
    //           });
    //         })
    //         .catch(err => {
    //           this.$message({
    //             showClose: true,
    //             message: `[${err.resultCode}] `+err.resultMsg ,
    //             type: "error"
    //           });
    //         });
    //     })
    //     .catch(() => {});
    // },
    onClick(key, data) {
      if(key===0){
          this.$confirmCon("确定清空指令队列吗?",()=>{
          this.$ajax("/system/clear/2/saveclearorder")
          .then(
              this.$message({
                message: "清空成功",
                type: "success"
              })
          )
          .catch(err => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] `+err.resultMsg ,
                type: "error"
              });
            })
            }
          )
      }
    },
    onEjectChange() {
      //将用户隐藏表格的信息存到localStorage
      let arr = this.list.map(o => o.show);
      Storages.setlocalStorage("qczldl515.eject", arr);
    },
    getEject() {
      //从localStorage获取用户隐藏表格的信息
      let arr = Storages.getlocalStorage("qczldl515.eject") || [];
      let lists = [];
      this.list.forEach((value, key) => {
        let obj = Object.assign({}, value);
        obj.show = arr[key];
        lists.push(obj);
      });
      this.list = lists;
    }
  }
};
</script>