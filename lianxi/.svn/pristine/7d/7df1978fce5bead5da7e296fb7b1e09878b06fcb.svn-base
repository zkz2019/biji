<!-- 门禁运行监控 -->
<template>
  <el-container class="wgrz312">
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
      <retrieval class="query_head">
        <inpbox inptext="请输入">
          <el-input
            clearable
            class="con-search qh_inp"
            v-model="param.search"
            placeholder="输入门禁主板ID进行查询"
          ></el-input>
        </inpbox>
        <inpbox>
          <el-button class="buta qh_btn" type="primary" @click="search">查询</el-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="elmin query_main">
      <paging-table
        height="100%"
        @onSelection="(d)=>{this.rcids = d}"
        interface="/system/control/accesslog/1/listAccessLog"
        ajaxType="9"
        class="heig100"
        :param="param"
        :refresh="refresh"
        :list="list"
        @onEjectChange="onEjectChange"
      >
        <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>
        <template v-if="batchButs && batchButs.length > 0">
          <batch-but class="sli but-blue" :list="rcids" :param="batchButs" @onClick="onBatchClick"></batch-but>
        </template>
      </paging-table>
    </el-main>
    <!-- <el-dialog
      title="监控网关列表"
      width="70%"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="dialogVisible"
    >
      <el-container class="dialog-table6 query_main">
        <paging-table
          interface="/system/control/gatelog/info/3/getgatelogdevice"
          :param="grantParam"
          :refresh="grantRefresh"
          :list="grantList"
        />
      </el-container>
    </el-dialog>-->
    <el-dialog
      ref="formDialog"
      title="添加日志"
      top="10vh"
      width="60%"
      :close-on-click-modal="false"
      :before-close="closeForm"
      :visible.sync="dialogForm"
    >
      <el-container class="dialog-table6">
        <paging-table
          interface="/system/control/accesslog/save/1/listAccessMain"
          class="card-paging"
          @onSelection="onSelect"
          ajaxType="9"
          :list="cardList"
          :refresh="cardRefresh"
          :param="cardParam"
        >
          <span class="sli">
            <el-input
              class="con-search search"
              placeholder="输入门禁名称/唯一ID进行检索"
              v-model="cardParam.search"
            ></el-input>
            <fel-button type="primary" @click="inSearch">查询</fel-button>
          </span>
        </paging-table>
      </el-container>
      <div slot="footer" class="dialog-form-but">
        <el-button class="com-but-small" @click="closeForm">取消</el-button>
        <el-button class="com-but-small" type="primary" @click="submitForm">确定</el-button>
      </div>
    </el-dialog>
    <el-dialog
      title="门禁日志详细"
      width="70%"
      top="8vh"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeJournalClose"
      :visible.sync="dialogJournal"
    >
      <el-container class="dialog-table6 query_main">
        <paging-table
          noInti
          interface="/system/control/accesslog/2/listAccessLogDetails"
          :param="journalParam"
          ajaxType="9"
          :refresh="journalRefresh"
          :list="journalList"
        >
          <span class="sli">
            <span class="maR5">门禁控制器</span>
            <el-select @change="onChangeJournal" class="wid150" v-model="journalParam.amcode">
              <el-option v-for="item in Amcodes" :key="item" :label="item" :value="item"></el-option>
            </el-select>
          </span>
          <span class="sli but-blue" @click="onAutoRefresh()">{{autoRefresh?"开始自动刷新":"停止自动刷新"}}</span>
        </paging-table>
      </el-container>
    </el-dialog>
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
export default {
  props: ["toParam"],
  data() {
    let $this = this;
    return {
      autoRefresh: true,
      topButs: [],
      batchButs: [],
      cardRefresh: 0,
      cardParam: {
        search: "",
      },
      Amcodes: [],
      journalRefresh: 0,
      journalParam: {
        amcode: "",
      },
      dialogJournal: false,
      journalList: [
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "指令类型",
          prop: "altype2",
          width: "100px",
        },
        {
          name: "指令内容",
          prop: "aldcontent",
        },
        {
          name: "指令日期",
          prop: "alddate",
          width: "160px",
        },
        {
          name: "日志类型",
          prop: "altype",
          width: "80px",
        },
      ],
      dialogForm: false,
      cardList: [
        {
          type: "selection",
        },
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "门禁名称",
          prop: "amname",
        },
        {
          name: "主控板ID",
          prop: "amcode",
        },
      ],
      olremark: "",
      gateway: [],
      // grantRefresh: 0,
      // grantParam: { alid: "" },
      // grantList: [
      //   {
      //     name: "序号",
      //     type: "$index",
      //     width: "60px"
      //   },
      //   {
      //     name: "网关位置",
      //     prop: "gatewaylocation"
      //   },
      //   {
      //     name: "网关通讯ID",
      //     prop: "gatewaycode"
      //   },
      //   {
      //     name: "网关唯一ID",
      //     prop: "gatewaycode2"
      //   },
      //   {
      //     name: "网关型号",
      //     prop: "gatewaymodel"
      //   },
      //   {
      //     name: "IP地址",
      //     prop: "gatewayip"
      //   },
      //   {
      //     name: "通讯状态",
      //     prop: "gatewaystate"
      //   }
      // ],
      rcids: [],
      // dialogVisible: false,
      param: {
        search: "",
      },
      listBut: [],
      refresh: 0,
      list: [
        // {
        //   type: "selection"
        // },
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "监控数量",
          prop: "alcount",
          width: "80px",
          // template: {
          //   props: ["scope"],
          //   methods: {
          //     isNumber(num) {
          //       if (num) {
          //         return /^[0-9]*$/.test(num);
          //       }
          //       return false;
          //     },
          //     onClick() {
          //       if (this.scope.row.alcount) {
          //         $this.grantParam.alid = this.scope.row.alid;
          //         $this.grantRefresh = new Date().getTime();
          //         $this.dialogVisible = true;
          //       }
          //     }
          //   },
          //   template: `<div>
          //     <span v-if="isNumber(scope.row.olcount)"><a class="a-click" @click.stop="onClick">{{scope.row.olcount}}</a></span>
          //     <span v-else>{{scope.row.olcount}}</span>
          //   </div>`
          // }
        },
        {
          name: "门禁位置",
          prop: "amlocation",
        },
        {
          name: "主控板ID",
          prop: "amcode",
        },
        {
          name: "开始日志时间",
          prop: "alsdate",
        },
        {
          name: "结束日志时间",
          prop: "aledate",
        },
        {
          name: "监控状态",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.alstatename;
                if (value == "运行") {
                  return "puc-pg";
                } else if (value == "停止") {
                  return "puc-px";
                } else {
                  return "";
                }
              },
            },
            template: `<span :class='getClass()'>{{scope.row.alstatename}}</span>`,
          },
        },
        {
          name: "监控创建人",
          prop: "userlogin",
        },
        {
          name: "操作",
          width: "130px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              },
              row() {
                return this.scope.row;
              },
            },
            methods: {
              onClick(key, obj) {
                $this.onClick(key, Object.assign({}, this.scope.row), obj);
              },
              isShow(state, type) {
                if (state == "1" && type == "6") {
                  return false;
                } else if (state == "0" && type == "7") {
                  return false;
                } else {
                  return true;
                }
              },
            },
            template: `<div class="operat-buts">
            <template v-for="(v,i) of listBut">
             <el-button v-show="isShow(row.alstate,v.type)" :key="i" type="text" size="small" @click.stop="onClick(v.type, v)">{{v.name}}</el-button>
            </template>
            </div>`,
          },
        },
      ],
      sonmenu: 0,
    };
  },
  created() {
    this.inGetsonmenu();
  },
  mounted() {
    this.getEject();
    this.onAutoRefresh();
  },
  methods: {
    onAutoRefresh() {
      this.autoRefresh = !this.autoRefresh;
      if (this.autoRefresh) {
        clearInterval(this.times);
      } else {
        this.times = setInterval(() => {
          this.onChangeJournal();
        }, 10000);
      }
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then((res) => {
          res.result.forEach((value) => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "854") {
              this.topButs.push(value.entity);
            } else if (id == "855") {
              this.listBut.push({
                type: "7",
                name: "停止",
                alias,
              });
              // this.batchButs.push(value.entity);
            } else if (id == "857") {
              // this.batchButs.push(value.entity);
              this.listBut.push({
                type: "6",
                name: "启用",
                alias,
              });
            } else if (id == "856") {
              this.listBut.push({
                type: "3",
                name: "查看",
                alias,
              });
            }
          });
          this.sonmenu = 4;
        })
        .catch((err) => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach((key) => {
        this.param[key] = "";
      });
      this.search();
    },
    inSearch() {
      this.cardRefresh = new Date().getTime();
    },
    onChangeJournal() {
      this.journalRefresh = new Date().getTime();
    },
    beforeJournalClose() {
      this.dialogJournal = false;
    },
    onSelect(obj) {
      this.gateway = obj;
    },
    closeForm() {
      this.gateway = [];
      this.olremark = "";
      this.dialogForm = false;
    },
    submitForm() {
      if (this.gateway && this.gateway.length > 0) {
        let arr = this.gateway.map((o) => {
          return o.amcode;
        });
        this.$ajax(
          "/system/control/accesslog/save/2/saveAccessLog",
          { amcodes: arr },
          "9",
          {},
          true
        )
          .then((res) => {
            this.closeForm();
            this.search();
            this.$message({
              message: "添加成功",
              type: "success",
            });
          })
          .catch((err) => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error",
            });
          });
      } else {
        this.$message({
          message: "请先选择要添加日志的门禁",
          type: "warning",
        });
      }
    },
    // beforeClose() {
    //   this.dialogVisible = false;
    // },
    onBatchClick(key, obj) {
      if (this.rcids.length != 0) {
        if (key == "185") {
          let arr = this.rcids.map((o) => o.alid);
          this.deleteJournal(arr, obj.alias);
        }
      } else {
        this.$message({
          showClose: true,
          message: "请先选中日志",
          type: "warning",
        });
      }
    },
    onClick(key, data, obj) {
      if (key == "6") {
        this.$confirm("此操作将此启用此日志，是否继续？", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning",
        })
          .then(() => {
            this.$ajax(
              "/system/control/accesslog/update/2/startAccessLog",
              {
                alid: [data.alid],
              },
              "9",
              {},
              true
            )
              .then((res) => {
                this.$message({
                  message: "启动成功",
                  type: "success",
                });
                this.search();
              })
              .catch((err) => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error",
                });
              });
          })
          .catch((err) => {});
      } else if (key == "7") {
        this.$confirm("此操作将此停用此日志，是否继续？", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning",
        })
          .then(() => {
            this.deleteJournal([data.alid], obj.alias);
          })
          .catch((err) => {});
      } else if (key == "3") {
        this.$ajax(
          "/system/control/accesslog/3/listAmcode",
          {
            alid: data.alid,
          },
          "9"
        )
          .then((res) => {
            this.Amcodes = res.result;
            this.journalParam.alid = data.alid;
            this.journalParam.amcode = this.Amcodes[0] || "";
            this.journalRefresh = new Date().getTime();
            this.dialogJournal = true;
          })
          .catch((err) => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error",
            });
          });
      } else if (key == "854") {
        this.inSearch();
        this.dialogForm = true;
      }
    },
    deleteJournal(data, ts) {
      this.$ajax(
        "/system/control/accesslog/update/1/stopAccessLog",
        { alid: data },
        "9",
        {},
        true
      )
        .then((res) => {
          this.$message({
            message: ts + "成功",
            type: "success",
          });
          this.search();
        })
        .catch((err) => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error",
          });
        });
    },
    //搜索
    search() {
      this.refresh = new Date().getTime();
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "mjyxjk853");
    },
    getEject() {
      this.$common.getEject(this, "list", "mjyxjk853");
    },
  },
};
</script>