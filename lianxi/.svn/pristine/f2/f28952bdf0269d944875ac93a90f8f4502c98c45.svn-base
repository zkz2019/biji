<template>
  <el-popover
    class="disIB"
    @show="onShowPopover"
    @hide="onHidePopover"
    placement="bottom-start"
    trigger="click"
  >
    <fel-tree3
      :showCheckbox="showCheckbox"
      ref="tree1"
      class="query tree1"
      :interface="interfaceUrl"
      @handleNodeClick="handleNodeClick"
      @checkchange="checkchange"
    ></fel-tree3>
    <div slot="reference" class="tree-select" @mouseout="onmouseout" @mouseover="onmouseover">
      <el-tooltip :disabled="disabled" class="item" effect="dark" :content="value" placement="top">
        <el-input :suffix-icon="suffixIcon" readonly v-model="value" placeholder="请选择位置">
          <i
            @click.stop="onClear"
            v-show="isClear"
            slot="suffix"
            class="el-input__icon el-icon-circle-close el-input__clear"
          ></i>
        </el-input>
      </el-tooltip>
    </div>
  </el-popover>
</template> 

<script>
export default {
  props: {
    showCheckbox: {
      type: Boolean,
      default: true
    },
    interface: String
  },
  data() {
    return { value: "", suffixIcon: "el-icon-arrow-down", isClear: false };
  },
  computed: {
    disabled() {
      return this.byteLength(this.value) < 28;
    },
    interfaceUrl() {
      return this.interface;
    }
  },
  methods: {
    byteLength(val) {
      var count = 0;
      for (var i = 0, l = val.length; i < l; i++) {
        count += val.charCodeAt(i) <= 128 ? 1 : 2;
      }
      return count;
    },
    onmouseout() {
      if (this.isClear) {
        this.isClear = false;
      }
    },
    onmouseover() {
      if (this.value) {
        this.isClear = true;
      }
    },
    onShowPopover() {
      this.suffixIcon = "el-icon-arrow-up";
    },
    onHidePopover() {
      this.suffixIcon = "el-icon-arrow-down";
    },
    onClear() {
      this.value = "";
      if (this.$refs.tree1) {
        this.$refs.tree1.resetChecked();
      }
      this.$emit("onSelection", {});
      this.$emit("onChoice", []);
    },
    handleNodeClick(data) {
      if (!this.showCheckbox) {
        this.value = data.buildname;
        this.$emit("onSelection", data);
      }
    },
    checkchange(data, obj) {
      obj.checkedNodes.forEach((item, key) => {
        if (item.top == "0") {
          for (let i = obj.checkedNodes.length - 1; i >= 0; i--) {
            let x = obj.checkedNodes[i];
            if (x.num == item.num && x.top == "1") {
              obj.checkedNodes.splice(i, 1);
            }
          }
        }
      });
      let arr = obj.checkedNodes;
      this.value = arr.map(o => o.buildname).join(",");
      this.$emit("onChoice", arr);
    }
  }
};
</script>
