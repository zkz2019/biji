<!-- 新增预约 -->
<template>
  <el-dialog
    :title="entity.alias"
    width="50%"
    append-to-body
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <fel-form
      ref="felForm"
      @submitForm="submitForm"
      @closeForm="beforeClose"
      width="140px"
      dynamic
      :defaultData="defaultData"
      :formData="formData"
    ></fel-form>
  </el-dialog>
</template>

<script>
import { format } from "@/utils/utils.js";
import judge from "@/utils/judge.js";
import { isNull } from "util";
export default {
  props: {
    param: {
      type: Object,
      default() {
        return {};
      }
    },
    entity: Object,
    dialogVisible: Boolean
  },
  data() {
    let $this = this;
    return {
      defaultData: {
        dates: ["", ""]
      },
      formData: [
        {
          value: "dates",
          name: "预订时间段",
          type: "date",
          date: "datetimerange",
          onChange: this.onChange,
          dTime: ["00:00:00", "23:59:59"],
          options: {
            disabledDate(time) {
              return time.getTime() < new Date().getTime() - 86400000;
            }
          },
          format: "yyyy-MM-dd HH:mm:ss",
          rules: [
            {
              required: true,
              validator: (rule, value, callback) => {
                if (
                  !value ||
                  value.length == 0 ||
                  value[0] == "" ||
                  value[1] == ""
                ) {
                  callback(new Error("请选择时间段"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "teamname",
          name: "团名",
          type: "text",
          rules: [
            {
              required: true,
              message: "请填写团名",
              target: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "teamleader",
          name: "团长",
          type: "text",
          rules: [
            {
              required: true,
              message: "请填写团长姓名",
              target: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "teamleaderphone",
          name: "团长手机",
          type: "text",
          maxlength: 11,
          rules: [
            {
              required: true,
              message: "请填写团长手机",
              target: "blur"
            },
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isMobile(value)) {
                  callback(new Error("手机号码格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "teamyjcount",
          name: "团人数",
          type: "text"
        },

        {
          width: "50%",
          value: "teamdiscount",
          name: "房费折扣",
          type: "text",
          rules: [
            {
              required: true,
              message: "请填写房费折扣",
              target: "blur"
            },
            {
              validator: (rule, value, callback) => {
                let num = Number(value);
                if (isNaN(num) || num < 0 || num > 100) {
                  callback(new Error("请填写0-100数字"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ],
          buts: [
            {
              class: "but-T",
              name: "折"
            }
          ]
        },
        {
          width: "50%",
          value: "teammoney",
          name: "预缴团费",
          type: "text",
          rules: [
            {
              required: true,
              message: "请填写预缴团费",
              target: "blur"
            },
            {
              validator: (rule, value, callback) => {
                if (isNaN(Number(value))) {
                  callback(new Error("格式错误"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "roomcount",
          name: "预约期内闲置空房",
          type: "text",
          disabled: true
        },
        {
          width: "50%",
          value: "roombedcount",
          name: "预约期内闲置空床",
          type: "text",
          disabled: true
        }
      ]
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
      }
    }
  },
  methods: {
    onChange(val) {
      let s = val[0][0];
      let e = val[0][1];
      this.$ajax("/team/save/1/getteamroom", { sdate: s, edate: e }, "1")
        .then(res => {
          this.$refs["felForm"].setData(
            "roombedcount",
            res.result.roombedcount
          );
          this.$refs["felForm"].setData("roomcount", res.result.roomcount);
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    submitForm(obj) {
      let data = {
        sdate: obj.dates[0],
        edate: obj.dates[1],
        teamdiscount: obj.teamdiscount,
        teamleader: obj.teamleader,
        teamleaderphone: obj.teamleaderphone,
        teammoney: obj.teammoney,
        teamname: obj.teamname,
        teamyjcount: obj.teamyjcount
      };
      this.$ajax("/team/save/2/saveteam", data, "1")
        .then(res => {
          this.$emit("onRefresh");
          this.$message({
            showClose: true,
            message: this.entity.alias + "成功!",
            type: "success"
          });
          this.beforeClose();
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    beforeClose() {
      this.defaultData = {};
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].resetForm();
      }
      this.$emit("beforeClose");
    }
  }
};
</script>