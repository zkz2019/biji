<!-- 门禁 -->
<template>
  <el-container>
    <fel-left-tree leftTitle="建筑列表" class="msgl308">
      <div slot="left" class="left-tree">
        <fel-tree1
          :showCheckbox="false"
          class="tree1"
          :idArr="[0]"
          :refresh="refreshTree"
          ajaxType="9"
          :param="{agfatherid:''}"
          paramKey="agfatherid"
          nodeKey="agid"
          :defaultProps="{
          children: 'children',
          label: 'agname',
          isLeaf: 'isLeaf'}"
          interface="/access/v2.0/main/1/listAreaTree"
          @handleNodeClick="handleNodeClick"
        ></fel-tree1>
      </div>
      <el-container>
        <el-header class="query_headbox">
          <com-title>{{toParam.alias}}</com-title>
          <retrieval class="query_head">
            <inpbox :inpb="true">
              <el-select v-model="param.amstate" class="con-select qh_inp">
                <el-option
                  v-for="item in amstates"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </inpbox>
            <inpbox :inpb="true">
              <el-select v-model="param.amtype" class="con-select qh_inp">
                <el-option
                  v-for="item in amtypes"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </inpbox>
            <inpbox :inpb="true">
              <el-select v-model="param.ahstate" class="con-select qh_inp">
                <el-option
                  v-for="item in ahstates"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </inpbox>
            <inpbox :inpb="true">
              <el-input
                class="con-search qh_inp"
                clearable
                v-model="param.search"
                :placeholder="'输入主控板名称/ID进行检索'"
              ></el-input>
            </inpbox>

            <inpbox>
              <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
              <fel-button class="qh_btn" @click="onReset">重置</fel-button>
            </inpbox>
          </retrieval>
        </el-header>
        <el-main class="query_main">
          <paging-table
            class="tobleList"
            height="100%"
            noInit
            ref="paging-table"
            :isAll="range == 2? true:false"
            :class="{'cover-up':range == 2}"
            interface="/access/v2.0/main/3/listAccessMain"
            :list="list"
            @onSelection="onSelection"
            :refresh="refresh"
            :param="param"
            ajaxType="9"
            @onEjectChange="onEjectChange"
          >
            <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
              <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
              {{v.alias}}
            </span>
            <template v-if="quantitytypes && quantitytypes.length > 0">
              <div class="full-list" v-show="!list[0].show">
                <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
              </div>
              <batch-but
                class="sli but-blue"
                :type="range"
                :list="listArr"
                :param="quantitytypes"
                @onClick="inSavegatewayorder"
              ></batch-but>
            </template>
          </paging-table>
        </el-main>
      </el-container>
    </fel-left-tree>
    <!-- <modifyAccessControl
      @onRefresh="onRefresh"
      :param="modifyParam"
      :paramObj="modifyParamObj"
      @beforeClose="dialogModify=false"
      :dialogVisible="dialogModify"
    ></modifyAccessControl>-->
    <addAccessControl
      :dialogVisible="dialogVisibleAdd"
      :defaultData="defaultDataAdd"
      :param="paramObj"
      :isAdd="isAdd"
      @beforeClose="beforeCloseAdd"
    ></addAccessControl>
    <readHeadDetails
      :dialogVisible="dialogVisibleRead"
      :paramObj="paramObjRead"
      :param="paramRead"
      @beforeClose="beforeCloseRead"
    ></readHeadDetails>
    <configureInfo
      :param="paramConfig"
      :dialogVisible="dialogVisibleInfo"
      @beforeClose="beforeCloseInfo"
    ></configureInfo>
    <queryMj :param="paramMj" :dialogVisible="dialogVisibleMj" @beforeClose="beforeClosemj"></queryMj>
  </el-container>
</template>

<script>
import Storages from "../../../utils/Storage.js"; //缓存工具
import axios from "axios";
import readHeadDetails from "./readHeadDetails";
// import infoAccessControl from "./infoAccessControl";
import configureInfo from "./configureInfo";
import queryMj from "./queryMj";
// import modifyAccessControl from "./modifyAccessControl";
// import replaceAccessControl from "./replaceAccessControl";
import addAccessControl from "./addAccessControl";
export default {
  components: {
    // modifyAccessControl,
    // infoAccessControl,
    // replaceAccessControl,
    addAccessControl,
    configureInfo,
    queryMj,
    readHeadDetails
  },
  props: {
    toParam: Object
  },
  data() {
    let $this = this;
    return {
      isAdd: true,
      dialogVisibleMj: false,
      dialogVisibleInfo: false,
      dialogVisibleRead: false,
      dialogVisibleAdd: false,
      defaultDataAdd: {},
      // paramAdd: {},
      paramConfig: {},
      paramObjRead: {},
      paramRead: {},
      paramMj: {},
      ahstates: [],
      amtypes: [],
      amstates: [],
      // modifyParamObj: [],
      refreshTree: 0,
      topButs: [],
      // dialogGuideFile: false,
      // modifyParam: {},
      // dialogQuery: false,
      // dialogModify: false,
      range: "1",
      queryParam: {
        sendtype: "勾选范围"
        // gotype2: ""
      },
      quantitytypes: [],
      refresh: 0,
      param: {
        search: "",
        ahstate: "",
        amtype: "",
        amstate: ""
      },
      paramObj: {},
      isSelectable: true,
      list: [
        {
          type: "selection"
          // selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "位置",
          prop: "aglocation"
        },
        {
          name: "设备类型",
          prop: "amtype"
        },
        {
          name: "主控板名称",
          prop: "amname"
        },
        {
          name: "主控板ID",
          prop: "amcode"
        },
        {
          name: "IP地址",
          prop: "amip",
          template: {
            props: ["scope"],
            methods: {
              topath(path) {
                let topath = "http://" + path;
                window.open(topath);
              }
            },
            template: `
            <div>
             <el-button type="text" size="small" @click.stop="topath(scope.row.amip)">{{scope.row.amip}}</el-button>
            </div>`
          }
        },
        {
          name: "正常读头",
          prop: "zxcount",
          template: {
            props: ["scope"],
            methods: {
              onClick() {
                $this.paramObjRead = this.scope.row;
                $this.paramRead = { ahstate: 0 };
                $this.dialogVisibleRead = true;
                console.log("点击");
              }
            },
            template: `<fel-button type="text" @click="onClick">{{scope.row.zxcount}}</fel-button>`
          }
        },
        {
          name: "异常读头",
          template: {
            props: ["scope"],
            methods: {
              onClick() {
                $this.paramObjRead = this.scope.row;
                $this.paramRead = { ahstate: 1 };
                $this.dialogVisibleRead = true;
                console.log("点击");
              }
            },
            template: `<fel-button type="text" @click="onClick">{{scope.row.lxcount}}</fel-button>`
          }
        },
        {
          name: "主控板状态",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.amstate;
                if (value == "在线") {
                  return "puc-pg";
                } else if (value == "离线") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class='getClass()'>{{scope.row.amstate}}</span>`
          }
        },
        {
          name: "操作",
          width: "170px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              }
            },
            methods: {
              onClick(key) {
                console.log("key", key);
                if (key == "1") {
                  $this.onReplace(this.scope.row);
                } else if (key == "2") {
                  $this.modify(this.scope.row);
                } else if (key == "3") {
                  // $this.onInfo(this.scope.row);
                } else {
                  $this.delete(this.scope.row);
                }
              }
            },
            template: `<div class="operat-buts"> 
             <el-button :disabled="scope.row.roomstate=='未安装'&&v.name!='更换'" v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.type)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      listBut: [],
      listArr: [],
      sonmenu: 0
    };
  },
  created() {
    this.inGetsonmenu();
    this.getType();
  },
  mounted() {
    this.getEject();
  },
  methods: {
    getType() {
      this.$ajax("/access/v2.0/main/2/getAccessMainState", {}, "9")
        .then(res => {
          this.ahstates = res.result.ahstates;
          this.amstates = res.result.amstates;
          this.amtypes = res.result.amtypes;
          console.log("res", res);
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    beforeCloseInfo() {
      this.dialogVisibleInfo = false;
    },
    beforeCloseRead() {
      this.dialogVisibleRead = false;
    },
    beforeClosemj() {
      this.dialogVisibleMj = false;
    },
    // 更改
    onReplace(data) {
      this.isAdd = false;
      let oldAmcode = { oldAmcode: data.amcode, amid: data.amid };
      let obj = {};
      this.$ajax(
        "/access/v2.0/main/6/getUpdateAccessMain",
        { amid: data.amid },
        "9"
      )
        .then(res => {
          obj = res.result;
          // this.agid.agid = res.result.agid;
          // this.defaultData = res.result;
          this.defaultDataAdd = Object.assign(obj, oldAmcode);
          delete this.defaultDataAdd.amcode;
          console.log("defaultDataAdd", this.defaultDataAdd);
          this.dialogVisibleAdd = true;
          console.log("res", res);
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        if (key != "agid") {
          this.param[key] = "";
        }
      });
      this.onRefresh();
      this.isSelectable = true;
      this.range = "1";
    },
    onSelection(data) {
      this.listArr = data;
    },
    onClick(key, data) {
      if (key == 466) {
        // this.dialogGuideFile = true;
      } else if (key == 353) {
        // this.dialogQuery = true;
      } else if (key == 811) {
        this.isAdd = true;
        this.dialogVisibleAdd = true;
      } else if (key == 820) {
        this.dialogVisibleMj = true;
      }
    },
    inSavegatewayorder(id, obj) {
      console.log("id,obj", id, obj);
      if (true) {
        this.$confirm("此操作将xxx, 是否继续?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }).then(() => {
          this.queryParam.sendtype = this.range == 2 ? "区域范围" : "勾选范围";
          if (
            this.queryParam.sendtype == "勾选范围" &&
            (!this.listArr || this.listArr.length == 0)
          ) {
            this.$message({
              message: "请先选择要发指令的门锁",
              type: "warning"
            });
          } else {
            let obj = Object.assign({}, this.param, this.queryParam);
            this.$ajax(
              "",
              obj,
              "1",
              this.listArr.map(o => o.accessid),
              true
            )
              .then(res => {
                this.$message({
                  message: "指令下发成功",
                  type: "success"
                });
                this.onRefresh();
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          }
        });
      } else if (false) {
      }
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          res.result.forEach(value => {
            let obj = value.entity;
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == 812) {
              this.listBut.push({
                type: "1",
                name: "更换"
              });
            } else if (id == 813) {
              this.listBut.push({
                type: "2",
                name: "配置"
              });
            } else if (id == 819) {
              this.listBut.push({
                type: "4",
                name: "删除"
              });
              // this.quantitytypes.push(obj);
            } else if (id == 811) {
              this.topButs.push(obj);
            } else if (820) {
              this.topButs.push(obj);
            } else if (true) {
              this.quantitytypes.push({
                alias: "探测读头",
                icon: "image588",
                id: 1111,
                isnext: "0",
                value: "tc1111"
              });
            } else if (id == 820) {
              this.quantitytypes.push({
                alias: "状态查询",
                icon: "image588",
                id: 1112,
                isnext: "0",
                value: "zt1112"
              });
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    delete(arr) {
      let data = Object.assign({ sendtype: "勾选范围" }, this.param);
      console.log("data,arr", data, arr);
      this.$confirm("此操作将删除当前门锁, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.$ajax(
            "/access/v2.0/main/m/deleteAccessMain",
            { amid: arr.amid },
            "9",
            {},
            true
          )
            .then(res => {
              this.$message({
                message: "删除成功",
                type: "success"
              });
              this.onRefresh();
            })
            .catch(err => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] ` + err.resultMsg,
                type: "error"
              });
            });
        })
        .catch(err => {});
    },
    modify(data) {
      this.paramConfig = data;
      this.dialogVisibleInfo = true;
      // this.modifyParam = data;
      // this.dialogModify = true;
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    handleNodeClick(data, obj) {
      console.log("data", data, obj);
      let k = this.setkey(obj, [data.agid]);
      // this.paramObj = data;
      this.param.agid = data.agid;
      this.onRefresh();
    },
    setkey(obj, arr) {
      console.log("obj,arr", obj, arr);
      if (obj && obj.parent && !Array.isArray(obj.parent.data)) {
        arr.push(obj.parent.data.agid);
        this.setkey(obj.parent, arr);
      } else {
        arr.reverse();
        this.paramObj.buildidArr = arr;
        return;
      }
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    beforeCloseAdd() {
      this.dialogVisibleAdd = false;
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "mj584");
    },
    getEject() {
      this.$common.getEject(this, "list", "mj584");
    }
  }
};
</script>
