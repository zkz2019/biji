<!--  房间调整 -->
<template>
  <el-container :key="key1">
    <fel-left-tree class="checkIn">
      <div slot="left" class="left-tree">
        <adminLeft
          :checkedroom="checkedroom"
          @checkp="checkp"
          url="/lock/operate/authchange/1/getroomperson"
        />
      </div>
      <el-container class="checkIn_right" v-loading="loading">
        <el-header v-if="allBtnShow" class="checkIn_right_top query_head">
          目标房间:
          <el-cascader
            class="wid300"
            clearable
            placeholder="请选择目标房间位置"
            @change="changePsition"
            filterable
            v-model="outroomid"
            :options="positions"
            :props="{value:'agid',label:'agname',disabled:'isroom',children: 'children',lazy: true,
            leaf: 'isLeaf',
            lazyLoad: this.lazyLoad,}"
          ></el-cascader>
          <span v-if="states.length>=1">
            选择替换人员:
            <el-select
              v-model="outpersoncode"
              clearable
              @change="onChange"
              class="con-select qh_inp"
            >
              <el-option
                v-for="item in states"
                :key="item.personcode"
                :label="item.personname"
                :value="item.personcode"
              ></el-option>
            </el-select>
          </span>
        </el-header>
        <el-main class="checkIn_right_center">
          <div class="checkIn_right_table">
            <form-table width="140px" :column="1" :param="defaultData" :list="tableData"></form-table>
            <div class="table-img">
              <img :src="personnel.personimage" />
            </div>
          </div>
        </el-main>
        <el-footer v-if="allBtnShow" class="checkIn_right_bottom">
          <fel-button class="qh_btn com-but-small" type="primary" @click="Determine">确定调整</fel-button>
        </el-footer>
      </el-container>
    </fel-left-tree>
  </el-container>
</template>

<script>
import { mapGetters } from "vuex";
import roomPosition from "./roomPosition";
import adminLeft from "./admin-left";
import inpbox from "./../../common/inpbox";
export default {
  props: {
    checkedroom: Object,
    btnRight: {
      type: Array,
      default: () => {
        return [];
      },
    },
  },
  components: {
    inpbox,
    adminLeft,
    roomPosition,
  },
  data() {
    return {
      key1: 0,
      positions: [
        // { agid: "", agname: "按位置显示", isroom: 0, children: [] },
        // { agid: "f", agname: "按分组显示", isroom: 0, children: [] }
      ],
      personnel: {},
      outroomid: [],
      outpersoncode: "",
      defaultData: { dates: [] },

      tableData: [
        {
          name: "人员信息",
          text: "内容",
        },
        {
          name: "姓名",
          value: "personname",
        },
        {
          name: this.getNumber(), //"编号",
          value: "personcode",
        },
        {
          name: "组织",
          value: "personlocation",
        },
        {
          name: "电话",
          value: "personmobile",
        },
        {
          noShow: false,
          name: "卡号",
          // value: "cardcode",
          render(obj, add) {
            return add("div", {}, [
              add("span", {}, obj.cardcode),
              add(
                "span",
                {
                  class: {
                    tabel_span: true,
                  },
                },
                obj.cardissend
              ),
            ]);
          },
        },

        {
          noShow: false,
          name: "密码",
          render(obj, add) {
            return add("div", {}, [
              add(
                "span",
                {},
                obj.passcount && obj.passcount != "0"
                  ? obj.passcount == "未授权"
                    ? obj.passcount
                    : "已授权"
                  : ""
              ),
              add(
                "span",
                {
                  class: {
                    tabel_span: true,
                  },
                },
                obj.passissend
              ),
            ]);
          },
        },

        {
          noShow: false,
          name: "指纹",
          render(obj, add) {
            return add("div", {}, [
              add(
                "span",
                {},
                obj.fingercount && obj.fingercount != "0"
                  ? obj.fingercount == "未授权"
                    ? obj.fingercount
                    : `已授权(${obj.fingercount})`
                  : ""
              ),
              add(
                "span",
                {
                  class: {
                    tabel_span: true,
                  },
                },
                obj.fingerissend
              ),
            ]);
          },
        },

        {
          noShow: false,
          name: "蓝牙钥匙",
          funct(obj) {
            return obj.appcount && obj.appcount != "0"
              ? obj.appcount == "未授权"
                ? obj.appcount
                : "已授权"
              : "";
          },
          // value: "appcount"
        },

        {
          noShow: false,
          name: "开门二维码",
          render(obj, add) {
            return add("div", {}, [
              add(
                "span",
                {},
                obj.issweep && obj.issweep != "0"
                  ? obj.issweep == "未授权"
                    ? obj.issweep
                    : `已授权`
                  : ""
              ),
            ]);
          },
        },

        {
          noShow: false,
          name: "身份证",
          render(obj, add) {
            return add("div", {}, [
              add("span", {}, obj.idcardcode),
              add(
                "span",
                {
                  class: {
                    tabel_span: true,
                  },
                },
                obj.idcardissend
              ),
            ]);
          },
        },
        {
          name: "入住开始结束日期",
          render(obj, add) {
            return add("fel-date", {
              class: "checkIn_right_center_dates",
              props: {
                value: obj.dates,
                disabled: true,
                pEnd: obj.pEnd,
                pickerShow: false,
              },
              on: {
                input: function (event) {
                  obj.dates = event;
                },
              },
            });
          },
        },
        // {
        //   name: "头像",
        //   render(obj, add) {
        //     if (obj.personimage && obj.personimage != "") {
        //       return add(
        //         "div",
        //         {
        //           class: "fjcz_headIcon"
        //         },
        //         [
        //           add("fel-img", {
        //             class: "fel-img",
        //             props: {
        //               urlObtain: "/lock/operate/authchange/7/downpersonimage",
        //               value: obj.personimage,
        //               imgValue:
        //                 obj.personsex == 0
        //                   ? require("./../../../assets/image/n2.png")
        //                   : require("./../../../assets/image/n1.png")
        //             },
        //             on: {
        //               input: function(event) {}
        //             }
        //           })
        //         ]
        //       );
        //     }
        //   }
        // }
      ],
      options: [],
      value: [],
      list: [],
      loading: false,
      param: {},
      states: [],
    };
  },
  computed: {
    allBtnShow() {
      return true;
    },
  },
  mounted() {
    if (this.checkedroom.iscardlock == 0) {
      //判断房间是否支持指纹/密码/卡号,若不支持则隐藏
      this.tableData[5].noShow = true;
    } else {
      this.tableData[5].noShow = false;
    }
    if (this.checkedroom.ispasslock == 0) {
      this.tableData[6].noShow = true;
    } else {
      this.tableData[6].noShow = false;
    }
    if (this.checkedroom.isfingerlock == 0) {
      this.tableData[7].noShow = true;
    } else {
      this.tableData[7].noShow = false;
    }
  },
  created() {
    this.inPosition();
    // this.getGroupTree();
  },
  methods: {
    ...mapGetters(["getNumber", "getIsClassify"]),
    // getGroupTree() {
    //   this.$ajax("/arearoom/public/6/listAreaRoomAllTree", {}, "9").then(
    //     res => {
    //       let arrs = res.result;
    //       let onMap = arr => {
    //         arr.forEach(item => {
    //           item.agid = item.arid;
    //           item.agname = item.arname;
    //           if (item.children) {
    //             onMap(item.children);
    //           } else {
    //             item.isroom = item.artype == "1";
    //           }
    //         });
    //       };
    //       onMap(arrs);
    //       this.positions[1].children = arrs;
    //       console.log("res", this.positions);
    //     }
    //   );
    // },

    lazyLoad(node, resolve) {
      if (node && node.data) {
        if (node.data.agid == "f") {
          this.inlistAreaRoomTree("0", node, resolve);
        } else if (node.data.arid) {
          this.inlistAreaRoomTree(node.data.arid, node, resolve);
        } else {
          resolve();
        }
      }
      console.log("lazyLoad", node, resolve);
    },
    inlistAreaRoomTree(areafatherid, node, resolve) {
      this.$ajax(
        "/arearoom/public/2/listAreaRoomTree",
        {
          areafatherid: areafatherid,
        },
        "9"
      )
        .then((res) => {
          let list = res.result;
          this.setClassifyData(list);
          return resolve(list);
        })
        .catch((err) => {
          if (node) {
            node.loaded = false;
            node.loading = false;
          }
        });
    },

    setClassifyData(arr) {
      arr.forEach((obj) => {
        obj.agid = obj.arid;
        obj.agname = obj.arname;
        if (obj.artype == 2) {
          obj.isLeaf = true;
          obj.isroom = false;
        } else {
          obj.isLeaf = true;
          obj.isroom = true;
          if (obj.isnext == 1) {
            obj.isLeaf = false;
            obj.isroom = false;
          }
        }
      });
    },
    inPosition() {
      this.positions = [];
      this.$ajax(
        "/lock/operate/authchange/5/getchangebuildtree",
        { roomid: this.checkedroom.roomid },
        "1",
        {},
        "",
        60000
      )
        .then((res) => {
          let arrs = res.result;
          this.setFJObjData(arrs);
          if (this.getIsClassify()) {
            this.positions.push({
              agid: "w",
              agname: "按位置显示",
              isroom: 0,
              children: arrs,
            });
          } else {
            this.positions = arrs;
          }
          if (this.getIsClassify()) {
            this.positions.push({
              agid: "f",
              agname: "按分组显示",
              isLeaf: false,
              isroom: false,
            });
          }
          console.log("this.positions", this.positions);
        })
        .catch((err) => {});
    },

    setFJObjData(arr) {
      arr.forEach((obj) => {
        if (obj.children) {
          obj.isLeaf = false;
          this.setFJObjData(obj.children);
        } else {
          obj.isLeaf = true;
          obj.isroom = !obj.isroom;
        }
      });
    },
    checkp(data) {
      this.personnel = data;
      this.loading = true;
      this.$ajax(
        "/lock/operate/authchange/2/getroompersoninfo",
        { personcode: data.personcode, roomid: this.checkedroom.roomid },
        "1"
      )
        .then((res) => {
          let obj = {
            dates: [res.result.personcomedate, res.result.personedate],
            pEnd: res.result.personedate || "长期",
            personlocation: res.result.personlocation,
            personname: res.result.personname,
            personcode: res.result.personcode,
            personmobile: res.result.personmobile,
            cardcode: res.result.cardcode,
            fingercount: res.result.fingercount,
            appcount: res.result.appcount,
            passcount: res.result.passcount,
            cardissend: res.result.cardissend,
            fingerissend: res.result.fingerissend,
            passissend: res.result.passissend,
            ishaveidcard: res.result.ishaveidcard,
            idcardcode: res.result.idcardcode,
            idcardissend: res.result.idcardissend,
            issweep: res.result.issweep,
          };
          this.defaultData = obj;
          this.loading = false;
        })
        .catch((err) => {
          this.loading = false;
          this.$message({
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error",
          });
        });
    },
    onChange(data, obj) {},
    changePsition(data) {
      console.log("data", data);
      if (this.outroomid && this.outroomid.length > 0) {
        this.$ajax(
          "/lock/operate/auth/1/getroomperson",
          {
            roomid: this.outroomid[this.outroomid.length - 1],
          },
          "1"
        )
          .then((res) => {
            this.outpersoncode = "";
            this.states = res.result;
          })
          .catch((err) => {
            console.log(err);
            this.$message({
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error",
            });
          });
      }
    },
    onChoiceWZ(data) {},
    Determine() {
      //提交事件
      let outpersoncode = this.outpersoncode;
      let inroomid = this.checkedroom.roomid;
      if (!this.personnel.personcode) {
        this.$message({
          message: "请选择左侧人员",
          type: "error",
        });
        return;
      } else if (!this.outroomid || this.outroomid.length == 0) {
        this.$message({
          message: "请选择要换入的房间",
          type: "error",
        });
        return;
      }
      let outroomid = this.outroomid[this.outroomid.length - 1];
      this.$ajax(
        "/lock/operate/authchange/4/saveauthchange",
        {
          outroomid: inroomid,
          outpersoncode: outpersoncode,
          inroomid: outroomid,
          personcode: this.personnel.personcode,
        },
        "1",
        {},
        true
      )
        .then((res) => {
          this.$emit("refresh");
          this.personnel = {};
          this.outroomid = [];
          this.defaultData = { dates: [] };
          this.outpersoncode = "";
          this.states = [];
          this.$message({
            message: "调整成功!",
            type: "success",
          });
          this.key1++;
        })
        .catch((err) => {
          console.log(err);
          this.$message({
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error",
          });
        });
    },
  },
};
</script>