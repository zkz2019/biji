<!-- 建筑管理 -->
<template>
  <el-container>
    <fel-left-tree class="building">
      <div slot="left" class="left-tree">
        <fel-tree1
          :showCheckbox="false"
          class="tree1"
          :idArr="[0]"
          :refresh="refreshTree"
          interface="/system/build/1/getbuild"
          @handleNodeClick="handleNodeClick"
        ></fel-tree1>
      </div>
      <el-container>
        <el-header class="elheader query_headbox">
          <comTitle>
            <div
              class="titlebox"
            >{{fatheragid.buildlocation||'建筑列表'}}-{{fatheragid.buildname || '建筑'}}{{fatheragid.buildcode && fatheragid.buildcode != "0" ? ("(区域编号"+fatheragid.buildcode+")") : "" }}</div>
          </comTitle>
          <retrieval class="query_head" v-if="fatheragid.buildtype==1||fatheragid.buildtype==3">
            <!-- <div class="heads rights"> -->
            <inpbox :inpb="true">
              <el-select
                class="inputs qh_inp wid200"
                v-model="param.searchtype"
                value-key="value"
                size="small"
              >
                <el-option label="显示全部" value="0"></el-option>
                <el-option :disabled="fatheragid.buildtype==3" label="仅园区类型" value="1"></el-option>
                <el-option :disabled="fatheragid.buildtype==3" label="仅楼栋类型" value="2"></el-option>
                <el-option :disabled="fatheragid.buildtype==1" label="除门禁" value="3"></el-option>
                <el-option :disabled="fatheragid.buildtype==1" label="仅门禁" value="4"></el-option>
              </el-select>
            </inpbox>
            <inpbox>
              <el-button class="buta qh_btn" size="small" type="primary" @click="onRefresh">查询</el-button>
              <fel-button class="qh_btn" @click="onReset">重置</fel-button>
            </inpbox>
            <!-- </div> -->
          </retrieval>
        </el-header>
        <el-main class="padt0 query_main">
          <paging-table
            class="tobleList wh100"
            height="100%"
            noInit
            interface="/system/build/2/getnextbuild"
            @onSelection="onSelection"
            :list="list"
            :refresh="refresh"
            :param="param"
            :paramObj="fatheragid"
            @onEjectChange="onEjectChange"
          >
            <template v-if="fatheragid.ismanager == 1 && isAdjus">
              <span key="adjus" class="sli but-blue" @click="onClick(40)">
                <i class="ficon-adjus40"></i>
                {{effectTitle}}
              </span>
            </template>
            <template
              v-if="fatheragid.ismanager == 1 && (fatheragid.buildtype==0||fatheragid.buildtype==1)"
            >
              <span
                v-for="(v,k) of istopButs1"
                :key="'c1'+k"
                class="sli but-blue"
                @click="onClick(v.id, v)"
              >
                <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
                {{v.alias}}
              </span>
            </template>
            <template v-if="fatheragid.ismanager == 1">
              <span
                v-for="(v,k) of isTopButs2"
                :key="'c2'+k"
                class="sli but-blue"
                @click="onClick(v.id, v)"
              >
                <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
                {{v.alias}}
              </span>
            </template>
            <template v-if="fatheragid.ismanager == 1">
              <template v-for="(v,k) of topButs">
                <template v-if="v.id == '197'">
                  <span
                    :key="k"
                    v-if="fatheragid.buildtype!=3"
                    class="sli but-blue"
                    @click="onClick(v.id, v)"
                  >
                    <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
                    {{v.alias}}
                  </span>
                </template>
                <span :key="k" v-else class="sli but-blue" @click="onClick(v.id, v)">
                  <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
                  {{v.alias}}
                </span>
              </template>
            </template>
            <template v-if="batchButs && batchButs.length > 0">
              <batch-but
                class="sli but-blue"
                :list="listArrs"
                :param="batchButs"
                @onClick="onBatchClick"
              ></batch-but>
            </template>
          </paging-table>
        </el-main>
      </el-container>
      <admin
        :title="setTitle"
        :dialogVisible="dialogAdmin"
        @beforeClose="dialogAdmin=false"
        :botButs="glybuts"
        :param="adminData"
      ></admin>
      <modify
        :param="modifyData"
        @onRefresh="onRefreshs"
        :dialogVisible="dialogModify"
        @beforeClose="dialogModify=false"
      ></modify>
      <copy
        @onRefresh="onRefreshs"
        :dialogVisible="dialogCopy"
        @beforeClose="dialogCopy=false"
        :param="fatheragid"
      ></copy>
      <add
        @onRefresh="onRefreshs"
        :param="fatheragid"
        :dialogVisible="dialogAdd"
        @beforeClose="dialogAdd=false"
      ></add>
      <!-- 本层效果预览 -->
      <dialogEffect
        :dialogVisible="effectVisible"
        @beforeClose="effectVisible=false"
        @onRefresh="onRefreshEffect"
        :title="effectTitle"
        :fatheragid="fatheragid"
      />
      <layout
        @success="onSuccess"
        :param="fatheragid"
        :dialogVisible="dialogLayout"
        @beforeClose="dialogLayout=false"
      ></layout>
      <!-- 批量添加建筑 -->
      <batch
        @onRefresh="onRefreshs"
        :dialogVisible="dialogBatch"
        @beforeClose="dialogBatch=false"
        :fatheragid="fatheragid"
        :buildid="batchBuildid"
      ></batch>
    </fel-left-tree>
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
import dialogEffect from "@/components/dialog/dialog-effect";
import admin from "./admin";
import add from "./add";
import copy from "./copy";
import modify from "./modify";
import layout from "./layout";
import batch from "./batch";
export default {
  name: "jzgl27",
  components: {
    admin,
    add,
    copy,
    modify,
    dialogEffect,
    layout,
    batch
  },
  data() {
    let $this = this;
    return {
      effectTitle: "",
      batchBuildid: 0,
      isTopButs2: [],
      istopButs1: [],
      isAdjus: false,
      batchButs: [],
      modifyData: [],
      adminData: [],
      dialogBatch: false,
      dialogLayout: false,
      effectVisible: false,
      dialogModify: false,
      dialogCopy: false,
      dialogAdmin: false,
      dialogAdd: false,
      refreshTree: 0,
      fatheragid: {},
      param: {
        searchtype: "0"
      },
      roomShow: true,
      listBut: [[], []],
      list: [
        {
          type: "selection",
          selectable(row) {
            return row.ismanager == 1;
          }
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "下级建筑类型",
          prop: "buildtypename"
        },
        {
          name: "下级建筑编号",
          prop: "buildcode"
        },
        {
          name: "下级建筑名称",
          prop: "buildname"
        },
        {
          name: "下级区域类型",
          prop: "agtypename"
        },
        {
          show: false,
          noClose: false,
          name: "房间总数",
          prop: "roomcount"
        },
        {
          show: true,
          noClose: true,
          name: "最大入住人数/绑卡数",
          minWidth: "80px",
          prop: "roommaxperson"
          // formatter(a, b, c, d) {
          //   if (a.agtypename == "宿舍区域") {
          //     return (b.property = a.roommaxperson);
          //   } else {
          //     return (b.property = a.roommaxcard);
          //   }
          // }
        },
        {
          name: "建立账户",
          prop: "userlogin"
        },
        {
          name: "建立时间",
          prop: "agdate"
        },
        {
          name: "操作",
          width: "160px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                if ($this.fatheragid.buildtype == 3) {
                  return [$this.listBut[0]];
                } else {
                  return $this.listBut;
                }
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, Object.assign({}, this.scope.row));
              }
            },
            template: `<div v-if="scope.row.ismanager == 1" class="operat-buts">
            <template v-for="(val,key) of listBut">
              <span class="buts-div1" v-if="val && val.length > 0" :key="key">
              <el-button v-for="(v,i) of val" :key="i" type="text" size="small" @click.stop="onClick(v.type||v.id)">{{v.name||v.alias}}</el-button>
              </span>
            </template>
            </div>`
          }
        }
      ],
      refresh: 0,
      glybuts: [],
      topButs: [],
      listArrs: [],
      sonmenu: 0
    };
  },
  created() {
    this.inGetsonmenu();
  },
  mounted() {
    this.getEject();
  },
  computed: {
    setTitle() {
      let srt = "";
      if (this.adminData.length == 1) {
        srt = this.adminData[0].buildlocation;
        if (!srt) {
          srt = "";
          if (this.fatheragid.buildlocation) {
            srt = this.fatheragid.buildlocation + "-";
          }
          srt += this.fatheragid.buildname || "建筑";
          if (
            this.adminData[0].buildname &&
            this.adminData[0].buildname != "--"
          ) {
            srt += "-" + this.adminData[0].buildname;
          }
        }
      } else {
        srt = "批量添加管理员";
      }
      return srt;
    }
  },
  methods: {
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.onRefresh();
    },
    onRefreshEffect(key) {
      if (key == 1) {
        this.onRefreshTree();
      }
      this.onRefresh();
    },
    onSuccess() {},
    onSelection(data) {
      this.listArrs = data;
    },
    onLayout() {
      this.dialogLayout = true;
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: "27" }, "1")
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "28") {
              this.topButs.push(value.entity);
            } else if (id == "197") {
              this.topButs.push(value.entity);
            } else if (id == "39") {
              this.isTopButs2.push(value.entity);
            } else if (id == "40") {
              this.isAdjus = true;
            } else if (id == "30") {
              this.batchButs.push(value.entity);
              this.listBut[0].push({
                type: "l2",
                name: "修改"
              });
            } else if (id == "32") {
              this.batchButs.push(value.entity);
              this.listBut[0].push({
                type: "l4",
                name: "删除"
              });
            } else if (id == "470") {
              this.listBut[0].push({
                type: "l9",
                name: "管理员"
              });
              this.batchButs.push(value.entity);
              this.glybuts = value.childs.map(o => o.entity);
            } else if (id == "33") {
              this.glybuts.push({
                type: "g4",
                name: alias
              });
            } else if (id == "258") {
              this.listBut[1].push({
                type: "l5",
                name: "上移"
              });
            } else if (id == "259") {
              this.listBut[1].push({
                type: "l6",
                name: "下移"
              });
            } else if (id == "494") {
              this.istopButs1.push(value.entity);
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onRefreshs() {
      this.onRefresh();
      this.onRefreshTree();
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onRefreshTree() {
      this.refreshTree = new Date().getTime();
    },
    // getshow() {
    //   if (this.fatheragid&&this.fatheragid.buildtype > 2) {
    //     return true;
    //   } else if (this.fatheragid&&this.fatheragid.buildtype <= 2) {
    //     return false;
    //   } else{
    //     return false;
    //   }
    // },
    handleNodeClick(data) {
      // this.getshow()
      this.batchBuildid = data.buildid;
      if (data.buildtype != this.fatheragid.buildtype) {
        this.param.searchtype = "0";
      }
      this.fatheragid = data;
      if (data.buildtype > 2) {
        this.list[6].show = true;
        this.list[6].noClose = true;
        this.list[7].show = false;
        this.list[7].noClose = false;
      } else if (data.buildtype <= 2) {
        this.list[6].show = false;
        this.list[6].noClose = false;
        this.list[7].show = true;
        this.list[7].noClose = true;
      }
      this.effectTitle = {
        "0": "园区布局调整",
        "1": "楼栋布局调整",
        "2": "楼层布局调整",
        "3": "房间布局调整"
      }[data.buildtype];
      this.onRefresh();
    },
    inDelbuilds(data) {
      this.$confirm("此操作将批量删除选中建筑及其下级建筑, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.$ajax("/system/build/delete/2/delbuilds", {}, "1", data, true)
            .then(res => {
              this.onRefreshTree();
              this.onRefresh();
              this.$message({
                message: "删除成功",
                type: "success"
              });
            })
            .catch(err => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] ` + err.resultMsg,
                type: "error"
              });
            });
        })
        .catch(err => {});
    },
    inUpdatebuildposition(type, data) {
      this.$ajax(
        "/system/build/update/1/updatebuildposition",
        {
          movetype: type
        },
        "1",
        data
      )
        .then(res => {
          this.onRefreshTree();
          this.onRefresh();
          this.$message({
            message: res.result || "移动成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    //本层效果预览
    Resultspreview() {
      this.effectVisible = true;
    },
    onBatchClick(key) {
      if (this.listArrs.length != 0) {
        if (key == "30") {
          this.modifyData = this.listArrs;
          this.dialogModify = true;
        } else if (key == "32") {
          this.inDelbuilds(this.listArrs);
        } else if (key == "470") {
          this.adminData = this.listArrs;
          this.dialogAdmin = true;
        }
      } else {
        this.$message({
          showClose: true,
          message: "请先选中区域或建筑",
          type: "warning"
        });
      }
    },
    onClick(key, data) {
      if (key == "g0") {
        let le = this.listArrs.length;
        if (le == 0) {
          this.$message({
            showClose: true,
            message: "请先选中区域或建筑",
            type: "warning"
          });
        } else {
          this.adminData = this.listArrs;
          this.dialogAdmin = true;
        }
      } else if (key == "28" || key == "197") {
        if (this.fatheragid && this.fatheragid.buildname) {
          if (key == "28") {
            this.dialogAdd = true;
          } else {
            if (this.fatheragid.buildtype == 3) {
              this.$message({
                showClose: true,
                message: "当前选择为楼层，请重新选中左侧建筑",
                type: "warning"
              });
            } else if (this.fatheragid.buildtype == 4) {
              this.$message({
                showClose: true,
                message: "当前选择为房间，请重新选中左侧建筑",
                type: "warning"
              });
            } else {
              this.dialogCopy = true;
            }
          }
        } else {
          this.$message({
            showClose: true,
            message: "请先选中左侧区域",
            type: "warning"
          });
        }
      } else if (key == "l2") {
        this.modifyData = [data];
        this.dialogModify = true;
      } else if (key == "l5") {
        this.$confirm("此操作将此建筑或房间上移一位, 是否继续?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.inUpdatebuildposition("1", data);
          })
          .catch(() => {});
      } else if (key == "l6") {
        this.$confirm("此操作将此建筑或房间下移一位, 是否继续?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.inUpdatebuildposition("2", data);
          })
          .catch(() => {});
      } else if (key == "l4") {
        this.inDelbuilds([data]);
      } else if (key == "4") {
        if (this.listArrs.length == 0) {
          this.$message({
            showClose: true,
            message: "请选中要删除的建筑或房间",
            type: "warning"
          });
          return;
        }
        this.inDelbuilds(this.listArrs);
      } else if (key == "l9") {
        this.adminData = [data];
        this.dialogAdmin = true;
      } else if (key == 39) {
        this.onLayout();
      } else if (key == 40) {
        this.Resultspreview();
      } else if (key == 494) {
        this.dialogBatch = true;
      }
    },
     onEjectChange() {
      this.$common.onEjectChange(this.list, "jzgl27");
    },
    getEject() {
      this.$common.getEject(this, "list", "jzgl27");
    }
  }
};
</script>
