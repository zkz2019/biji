<!-- 指纹详情 -->
<template>
  <el-container>
    <el-header class="elheader query_headbox">
      <com-title>{{ toParam.alias }}</com-title>
      <retrieval class="query_head">
        <!-- <inpbox :inpb="true">
          <el-select v-model="param.personstate" class="wid200 qh_inp">
            <el-option
              v-for="item in states"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            ></el-option>
          </el-select>
        </inpbox>-->
        <inpbox :inptext="'选择组织'">
          <el-cascader
            ref="cascader"
            class="wid250 box_top_cas"
            size="mini"
            v-model="param.pgid"
            :options="zzoptions"
            :props="{ checkStrictly: true, value: 'pgid', label: 'pgname' }"
            clearable
          ></el-cascader>
        </inpbox>
        <inpbox :inptext="'请输入'">
          <el-input
            class="wid300 qh_inp"
            clearable
            type="text"
            :placeholder="'请输入' + getNumber() + '|姓名|手机号搜索'"
            v-model="param.search"
          ></el-input>
        </inpbox>
        <inpbox :inptext="''">
          <el-button @click="onQuerySearch" class="qh_btn" type="primary">查询</el-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="elmainbox query_main">
      <paging-table
        height="100%"
        ref="paging-table"
        :isAll="range == 2 ? true : false"
        :class="{ 'cover-up': range == 2 }"
        @sort-change="sortChange"
        @onEjectChange="onEjectChange"
        interface="/auth/bluetooehkeycenter/bluetooehkey/1/getbluetoothkey"
        :param="param"
        @onSelection="
          d => {
            this.listArrs = d
          }
        "
        class="heig100"
        :list="list"
        :refresh="refresh"
      >
        <span v-for="(v, k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-' + v.icon"></i>
          {{ v.alias }}
        </span>
        <template v-if="batchButs && batchButs.length > 0">
          <!-- <span class="sli">
            <el-select class="wid150" v-model="range">
              <el-option
                v-for="item in ranges"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </span>-->
          <!-- <div class="full-list" v-show="!list[0].show">
            <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
          </div>-->
          <!-- <div class="cover-up" v-show="range == 2">
            <el-checkbox disabled v-model="range" true-label="2" false-label="1"></el-checkbox>
          </div>-->
          <!-- <batch-but
            class="sli but-blue"
            :type="range"
            :list="listArrs"
            :param="batchButs"
            @onClick="onBatchClick"
          ></batch-but>-->
        </template>
      </paging-table>
    </el-main>
    <el-dialog
      title="蓝牙钥匙授权列表"
      width="80%"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="dialogVisible"
    >
      <el-container class="dialog-table6 wh100">
        <paging-table
          ref="grant-paging-table"
          :isAll="grantRange == 2 ? true : false"
          :class="{ 'cover-up': grantRange == 2 }"
          @onSelection="
            d => {
              this.roids = d
            }
          "
          interface="/auth/bluetooehkeycenter/bluetooehkey/deletebluetoothkeys/1/getbluetoothkeyauth"
          :param="{ personcode: grantParam.personcode }"
          :refresh="grantRefresh"
          :list="grantList"
        >
          <template v-if="grantButs && grantButs.length > 0">
            <div class="full-list" v-show="!grantList[0].show">
              <el-checkbox
                v-model="grantRange"
                @change="onGrantChange"
                true-label="2"
                false-label="1"
              >跨页全选</el-checkbox>
            </div>
            <batch-but
              class="sli but-blue"
              :type="grantRange"
              :list="roids"
              :param="grantButs"
              @onClick="onGrantBatchClick"
            ></batch-but>
          </template>
        </paging-table>
      </el-container>
    </el-dialog>
    <!-- <detailsDialog
      :buss="buttomsDialog"
      :param="detailsParam"
      @beforeClosecg="beforeClosecg"
      :dialogVisible="dialogDetails"
      @beforeClose="dialogDetails = false"
    /> -->
    <!-- <detailsModify
      @confirm="confirmModify"
      :param="grantParam"
      :paramObj="paramObj"
      :dialogVisible="cardModify"
      @beforeClose="cardModify = false"
    /> -->
    <!-- <detailsAdd :dialogVisible="dialogAdd" @beforeClose="dialogAdd = false" /> -->
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
import { mapGetters } from "vuex";
// import detailsDialog from "./detailsDialog";
import detailsModify from "./detailsModify";
// import detailsAdd from "./detailsAdd";
export default {
  components: {
    // detailsAdd,
    detailsModify,
    // detailsDialog
  },
  props: {
    toParam: null
  },
  created() {
    this.$ajax("/auth/bluetooehkeycenter/bluetooehkey/2/getgrouptree", {}, "1")
      .then(res => {
        this.zzoptions = res.result;
      })
      .catch(err => {
        console.log("err", err);
      });
    this.inGetsonmenu();
  },
  data() {
    let $this = this;
    return {
      zzoptions: [],
      paramObj: [],
      buttomsDialog: [],
      batchButs: [],
      grantButs: [],
      listGrantBut: [],
      dialogAdd: false,
      roids: [],
      cardModify: false,
      grantRefresh: 0,
      listArrs: [],
      detailsParam: {},
      dialogDetails: false,
      grantParam: {},
      FileimportVisible: false,
      param: {
        search: "",
        sequence: "",
        sortby: "",
        pgid: ""
      },
      refresh: 0,
      dialogVisible: false,
      isGranSelectable: true,
      grantList: [
        {
          type: "selection",
          selectable: this.onGranSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "授权下发时间",
          prop: "rosdate"
        },
        {
          name: "授权开始时间",
          prop: "empsdate"
        },
        {
          name: "授权结束时间",
          prop: "empedate"
        },
        {
          name: "开门时间段",
          prop: "opentime"
        },
        {
          name: "可开门次数",
          prop: "rousecount"
        },
        {
          name: "已开门次数",
          prop: "rocount"
        },
        {
          name: "剩余次数",
          prop: "count"
        },
        {
          name: "房间位置",
          prop: "roomlocation"
        },
        {
          name: "房间名称",
          prop: "roomname"
        },

        {
          name: "授权账号",
          prop: "userlogin"
        },
        {
          name: "操作",
          width: "100px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listGrantBut;
              }
            },
            methods: {
              onClick(key, obj) {
                $this.onClick(key, Object.assign({}, this.scope.row), obj);
              }
            },
            template: `<div>
             <el-button v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.type, v)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      listBut: [],
      isSelectable: true,
      list: [
        {
          type: "selection",
          selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },

        {
          name: this.getNumber(),
          prop: "personcode",
          sortable: "custom"
        },
        {
          name: "归属组织",
          prop: "personlocation",
          sortable: "custom"
        },
        {
          name: "已授权门锁",
          prop: "empowercount",
          sortable: "custom",
          template: {
            props: ["scope"],
            methods: {
              isNumber(num) {
                if (num) {
                  return /^[0-9]*$/.test(num);
                }
                return false;
              },
              onClick() {
                console.log("this.scope.row", this.scope.row);
                if (this.scope.row.personcode) {
                  $this.grantParam = this.scope.row;
                  $this.grantRefresh = new Date().getTime();
                  $this.dialogVisible = true;
                }
              }
            },
            template: `<div>
              <span v-if="isNumber(scope.row.empowercount)"><a class="a-click" @click.stop="onClick">{{scope.row.empowercount}}</a></span>
              <span v-else>{{scope.row.empowercount}}</span>
            </div>`
          }
        },
        {
          name: "手机",
          prop: "personmobile",
          sortable: "custom"
        },
        {
          name: "姓名",
          prop: "personname",
          sortable: "custom"
        }
        // {
        //   name: "操作",
        //   width: "140px",
        //   template: {
        //     props: ["scope"],
        //     computed: {
        //       listBut() {
        //         return $this.listBut;
        //       },
        //       row() {
        //         if (this.scope.row.personstate == "正常") {
        //           let a = JSON.parse(JSON.stringify(this.scope.row));
        //           a.personstate = "启用";
        //           return a;
        //         }
        //         return this.scope.row;
        //       }
        //     },
        //     methods: {
        //       onClick(key, obj) {
        //         $this.onClick(key, Object.assign({}, this.scope.row), obj);
        //       },
        //       getState(str, state) {
        //         if (str == "删除") {
        //           return true;
        //         } else if (state == "未录入") {
        //           return false;
        //         } else if (state == "正常" && str == "同步") {
        //           return true;
        //         } else if (state == str) {
        //           return false;
        //         } else {
        //           return true;
        //         }
        //       }
        //     },
        //     template: `<div class="operat-buts">
        //      <el-button v-for="(v,i) of listBut" v-if='getState(v.name,row.personstate)' :key="i" type="text" size="small" @click.stop="onClick(v.type, v)">{{v.name}}</el-button>
        //     </div>`
        //   }
        // }
      ],
      range: "1",
      grantRange: "1",
      ranges: [
        {
          value: "1",
          label: "勾选范围"
        },
        {
          value: "2",
          label: "全部列表"
        }
      ],
      choiceType: "",
      choiceTypes: [],
      state: "",
      topButs: [],
      sonmenu: 0
    };
  },
  mounted() {
    this.getEject();
  },
  methods: {
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            if (id == "772") {
              this.grantButs.push(value.entity);
              this.listGrantBut.push({
                type: "1",
                name: "删除"
              });
            } else if (id == "773") {
              this.grantButs.push(value.entity);
              this.listGrantBut.push({
                type: "2",
                name: "修改"
              });
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          console.log("err", err);
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    sortChange(obj) {
      if (obj.order) {
        if (obj.order == "descending") {
          this.param.sequence = "2";
        } else if (obj.order == "ascending") {
          this.param.sequence = "1";
        }
        let sortby = obj.prop;
        this.param.sortby = sortby;
      } else {
        this.param.sequence = "";
        this.param.sortby = "";
      }
      this.onQuerySearch();
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "lyysgl769");
    },
    getEject() {
      this.$common.getEject(this, "list", "lyysgl769");
    },
    onGranSelectable() {
      return this.isGranSelectable;
    },
    onSelectable() {
      return this.isSelectable;
    },
    onGrantChange(val) {
      if (val == 2) {
        this.$refs["grant-paging-table"].clearSelection();
        this.$refs["grant-paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isGranSelectable = false;
        }, 100);
      } else {
        this.$refs["grant-paging-table"].clearSelection();
        this.isGranSelectable = true;
      }
    },
    // onChange(val) {
    //   if (val == 2) {
    //     this.$refs["paging-table"].clearSelection();
    //     this.$refs["paging-table"].toggleAllSelection();
    //     setTimeout(() => {
    //       this.isSelectable = false;
    //     }, 100);
    //   } else {
    //     this.$refs["paging-table"].clearSelection();
    //     this.isSelectable = true;
    //   }
    // },
    //重置事件
    onReset() {
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.onQuerySearch();
      this.isSelectable = true;
      this.isGranSelectable = true;
      this.range = "1";
      this.grantRange = "1";
    },
    ...mapGetters(["getNumber"]),
    beforeClosecg() {
      this.onQuerySearch();
    },
    //修改蓝牙授权列表
    confirmModify(data, obj) {
      data.actiontype = this.range == "1" ? "勾选范围" : "全选范围";
      data.personcode = this.grantParam.personcode;
      let url =
        "/auth/bluetooehkeycenter/bluetooehkey/deletebluetoothkeys/3/updateauths";
      const paramObj = obj.isAll ? this.roids.map(o => o.roid) : [obj.roid];
      this.$ajax(url, data, "1", paramObj, true)
        .then(() => {
          this.grantRefresh = new Date().getTime();
          this.cardModify = false;
          this.$message({
            message: "修改成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    //修改蓝牙授权列表
    onCardModify(arr) {},
    onQuerySearch() {
      this.refresh = new Date().getTime();
    },
    onGrantBatchClick(key) {
      if (this.grantRange == 1 && this.roids.length == 0) {
        this.$message({
          showClose: true,
          message: "请先选中授权",
          type: "warning"
        });
      } else {
        if (key == 772) {
          this.$confirmCon("确定删除全部指纹授权吗？", () => {
            this.onDelete(null, null, true);
          });
        } else if (key == 773) {
          this.paramObj = { isAll: true };
          this.cardModify = true;
        }
      }
    },
    onBatchClick(key, obj) {
      if (this.range == 2) {
      } else if (this.listArrs.length != 0) {
      } else {
      }
    },
    onDelete(data, obj, isAll = false) {
      const actiontype = this.range == "1" ? "勾选范围" : "全选范围";
      const personcode = this.grantParam.personcode;
      const param = { actiontype, personcode };
      const paramObj = isAll ? this.roids.map(o => o.roid) : [data.roid];
      this.$ajax(
        "/auth/bluetooehkeycenter/bluetooehkey/deletebluetoothkeys/2/deleteauths",
        param,
        "1",
        paramObj,
        true
      )
        .then(res => {
          this.grantRefresh = new Date().getTime();
          this.$message({
            message: "删除成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    onClick(key, data, obj) {
      if (key == "1") {
        this.$confirmCon("确定删除当前指纹授权吗？", () => {
          this.onDelete(data, obj);
        });
      } else if (key == "2") {
        this.paramObj = data;
        this.cardModify = true;
      }
    },
    beforeClose() {
      this.dialogVisible = false;
    }
  }
};
</script>
