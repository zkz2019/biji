<!-- 房间管理导入导出  -->
<template>
  <el-dialog
    title="导入导出"
    :visible.sync="dialogVisible"
    width="50%"
    :before-close="handleClose"
    :close-on-click-modal="false"
    append-to-body
    class="el-dialogs AFile"
  >
    <div>
      <div v-if="exportButs.length >= 1">
        <h3 class="htitle">
          导出
          <el-button
            v-for="(v,k) of topBtn"
            class="htitle_history"
            type="text"
            @click="onClickHistoryE(v,k)"
          >{{v.name||"导出历史"}}</el-button>
        </h3>
        <div class="content">
          <el-button
            v-for="(v,k) of exportButs"
            :key="'e'+k"
            type="primary"
            @click.stop="onClickExport(v, k)"
          >{{v.name}}</el-button>
        </div>
      </div>
      <div v-if="importButs.length > 0">
        <div>
          <h3 class="htitle">
            导入
            <el-button
              v-for="(v,k) of bottomBtn"
              class="htitle_history maR10"
              type="text"
              @click="onClickHistoryI(v,k)"
            >{{v.name||"导入历史"}}</el-button>
          </h3>
          <div class="IbtnBox">
            <uploadBox ref="uploadBox" @changeType="changeType" @onDetails="onDetails"></uploadBox>
            <div class="but">
              <div class="but_left">
                <el-button
                  v-for="(v,k) of exImportButs"
                  :key="k"
                  type="text"
                  @click="onClickExport(v, k)"
                >{{v.name}}</el-button>
              </div>
              <div class="but_right">
                <el-button v-for="(v,k) of importButs" :key="k" @click="onUpload(v,k)">{{v.name}}</el-button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <importHistory
      :dialogVisible="iHvisible"
      @beforeClose="()=>{iHvisible=false}"
      v-bind="$attrs"
      :historyObj="historyObj"
      :uploadid="uploadId"
    ></importHistory>
    <importDetails
      :dialogDetailed="dialogDetailed"
      :uploadid="uploadtotal.uploadid"
      :listObj="{type:uploadtotal.uploadtype}"
      :historyObj="historyObj"
      @beforeDetailed="beforeDetailed"
    ></importDetails>
  </el-dialog>
</template>

<script>
import uploadBox from "./uploadBox";
import importDetails from "./import-details";
import importHistory from "./import-history";
import Storages from "@/utils/Storage.js";
import { getuploadrate, inExport } from "./index.js";
export default {
  componentName: "zguideFile",
  props: {
    dialogVisible: Boolean,
    title: String,
    importButs: {
      type: Array,
      default() {
        return [];
      }
    },
    exImportButs: {
      type: Array,
      default() {
        return [];
      }
    },
    exportButs: {
      type: Array,
      default() {
        return [];
      }
    },
    topBtn: {
      type: Array,
      default() {
        return [];
      }
    },
    bottomBtn: {
      type: Array,
      default() {
        return [];
      }
    }
  },
  components: { importHistory, importDetails, uploadBox },
  data() {
    return {
      historyObj: {},
      dialogDetailed: false,
      progressShow: false,
      textShow: false,
      iHvisible: false,
      type: 0,
      urls: "",
      uploadtotal: {},
      format: "xxx"
    };
  },
  watch: {
    dialogVisible(val) {
      console.log("kjkj", this.$refs);
      this.onInit();
      if (val) {
        if (this.uploadId) {
          getuploadrate(this.uploadId, this, false, this.urls);
        }
      } else {
        this.progressShow = false;
        this.textShow = false;
      }
    },
    type(val) {
      console.log("type", val);
      if (val == 1) {
        this.urls = "/system/user/uploadauth/6/getuploadrate";
      } else if (val == 2) {
        this.urls = "/system/user/uploadtype/6/getuploadrate";
      }
    }
  },
  computed: {
    topTitle() {
      if (this.importButs.length + this.exportButs.length > 1) {
        return "导入与导出";
      } else if (this.importButs.length != 0) {
        return this.importButs[0].name;
      } else if (this.exportButs.length != 0) {
        return this.exportButs[0].name;
      } else {
        return "导入与导出";
      }
    },
    uploadId() {
      return Storages.getStorage("Auploadid");
    }
  },
  mounted() {
    // this.$on("inExport", item => {
    //   console.log("kk", item);
    // });
    // this.$on("onDetails", () => {
    //   this.onDetails;
    // });
  },
  methods: {
    onInit() {
      console.log("this.$refs", this.$refs);
      if (this.$refs.uploadBox) {
        this.$refs.uploadBox.clearFiles();
        this.$refs.uploadBox.onRemove();
      } else {
        setTimeout(() => {
          this.onInit();
        }, 1000);
      }
    },
    changeType(key) {
      this.type = key;
    },
    beforeDetailed() {
      this.dialogDetailed = false;
    },
    onDetails() {
      this.dialogDetailed = true;
      // this.$emit("onDetails");
    },

    onUpload(v, k) {
      // let obj = this.importButs[k];
      this.$refs.uploadBox.onUpload(v, k);
    },
    onClickTemp() {
      let obj = this.importButs[this.type];
      let t = this.title || "";
      inExport(obj.tempUrl, t + obj.name + "模板", this, {}, {});
    },
    onClickHistoryI(obj) {
      this.historyObj = obj;
      this.iHvisible = true;
    },
    onClickHistoryE(obj) {},
    onClickExport(obj, key) {
      if (this.exportButs.length > 1) {
        if (obj.url) {
          let t = this.title || "";
          inExport(
            obj.url,
            obj.fileName || t + obj.name,
            this,
            obj.data,
            obj.obj
          );
        }
      } else {
        let t = this.title || "";
        inExport(
          obj.url,
          obj.fileName || t + obj.name,
          this,
          obj.data,
          obj.obj
        );
      }
    },
    handleClose() {
      this.$emit("handleClose");
    }
  }
};
</script> 

<style lang="scss">
.AFile {
  .el-upload-dragger {
    width: 100%;
    min-height: 80px;
    .text {
      padding-top: 10px;
    }
  }
  .el-dialog {
    min-width: 640px;
    overflow: hidden;
  }
  .min_h {
    min-height: 130px;
  }

  .IbtnBox {
    width: 100%;
    display: flex;
    .content {
      position: relative;
      flex: 1;
    }

    .but {
      width: 260px;
      margin: 15px 30px;
      .el-button {
        margin: 0;
        height: 32px;
        margin-bottom: 10px;
        line-height: 0;
      }
      .but_left {
        float: left;
        width: 50%;
      }
    }
    // .disIB {
    //   height: 100px;
    // }
    // .errorText {
    //   position: absolute;
    //   bottom: 50px;
    // }
    // .progress_box {
    //   position: absolute;
    //   bottom: 0px;
    //   padding-top: 5px;
    //   max-width: 375px;
    //   .progress_title {
    //     float: left;
    //   }
    //   .progress {
    //     // float:left;
    //     min-width: 220px;
    //     margin-right: 10px;
    //   }
    //   .progress_box_btn {
    //     padding: 2px;
    //     font-size: 14px;
    //   }
    // }
  }
  @media screen and (max-width: 1450px) {
    // .content {
    //   width: 100%;
    //   display: flex;
    // .disIB {
    //   flex: 1;
    //   .el-upload {
    //     width: 100%;
    //     .el-upload-dragger {
    //       width: 100%;
    //     }
    //   }
    // }
    // .but {
    //   margin: 0 30px;
    //   width: 260px;
    // }
    // }
  }
}
</style>
