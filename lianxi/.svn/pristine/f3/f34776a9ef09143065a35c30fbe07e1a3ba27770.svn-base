<!-- 弹出窗口 辅导员-->
<template>
  <fel-admin
    ref="admin"
    :title="title"
    :dialogVisible="dialogVisible"
    :botButs="botButs"
    :param="paramObj"
    leftInterfaceUrl="/system/group/saveinstructor/2/getpersons"
    interfaceUrl="/system/group/saveinstructor/4/getallinstructor"
    :leftList="fuList"
    :list="list"
    :placeholder="'姓名/'+getNumber()+'/手机号码'"
    @beforeClose="beforeClose"
    @onSelectLeft="onSelect"
    @onSelection="onSelection"
    @onClick="onClick"
  ></fel-admin>
</template>

<script>
import { mapGetters } from "vuex";
export default {
  props: {
    title: String,
    dialogVisible: Boolean,
    botButs: Array,
    param: Object | Array
  },
  data() {
    return {
      aggregation: [],
      rowpersonnel: {},
      fuList: [
        {
          prop: "personname",
          tooltip: true,
          name: "姓名"
        },
        {
          prop: "personmobile",
          tooltip: true,
          name: "电话"
        }
      ],
      list: [
        {
          type: "selection"
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },
        {
          name: "使用者姓名",
          prop: "personname"
        },
        {
          name: "组织",
          prop: "personlocation"
        },
        {
          name: "电话",
          prop: "personmobile"
          // formatter(a, b, c) {
          //   if (a.userlogin == "admin" && c == "admin") {
          //     return "--";
          //   }
          //   return c;
          // }
        },
        {
          name: "授权账号",
          prop: "userlogin"
        },
        {
          name: "授权日期",
          prop: "sicdate"
        }
      ]
    };
  },
  computed: {
    paramObj() {
      return { pgid: this.param.pgid };
    }
  },
  methods: {
    ...mapGetters(["getNumber"]),
    beforeClose() {
      this.$emit("beforeClose");
    },
    onSelect(data) {
      this.rowpersonnel = data;
    },
    onSelection(data) {
      this.aggregation = data;
    },
    onClick(val) {
      if (val == 610) {
        //添加负责人
        if (!this.rowpersonnel.personcode || !this.rowpersonnel.personname) {
          this.$message({
            message: "请先选中左侧人员",
            type: "warning"
          });
          return;
        }
        this.savefatheruser();
      } else if (val == 611) {
        //8是后台传过来的删除辅导员id
        //删除负责人
        if (this.aggregation.length == 0) {
          this.$message({
            message: "请先选中辅导员",
            type: "warning"
          });
          return;
        }
        this.$confirm("是否删除选中的辅导员?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.delareamanager();
          })
          .catch(err => {});
      } else if (val == 612) {
        this.$emit("GuideFileShow");
      }
    },
    //添加辅导员接口
    savefatheruser() {
      this.$ajax(
        "/system/group/saveinstructor/3/saveinstructor",
        {
          pgid: this.param.pgid
        },
        "1",
        [this.rowpersonnel.personcode],
        true,
        60000
      )
        .then(res => {
          this.$refs.admin.refreshData();
          this.rowpersonnel = {};
          this.$message({
            message: "成功添加辅导员",
            type: "success"
          });
        })
        .catch(err => {
          if (err.resultMsg == "只有最后一级组织能添加辅导员！") {
            this.$message({
              showClose: true,
              message: err.resultMsg,
              type: "warning"
            });
          } else {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          }
        });
    },
    //删除辅导员接口
    delareamanager() {
      this.$ajax(
        `/system/group/deleteinstructor/1/deleteinstructor`,
        {},
        "1",
        this.aggregation.map(o => o.siid),
        true,
        60000
      )
        .then(res => {
          this.aggregation = [];
          this.$refs.admin.refreshData();
          this.$message({
            message: "成功删除已选中的辅导员",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    }
  }
};
</script>
