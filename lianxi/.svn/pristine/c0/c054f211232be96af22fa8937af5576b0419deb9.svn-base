<!--服务器  -->
<template>
  <el-container>
    <el-container>
      <el-header class="query_headbox">
        <com-title>{{toParam.alias}}</com-title>
      </el-header>
      <el-main class="query_main">
        <el-tabs v-model="activeName">
          <el-tab-pane label="服务器列表" name="first"></el-tab-pane>
          <el-tab-pane label="磁盘列表" name="second"></el-tab-pane>
        </el-tabs>
        <paging-table
          v-show="activeName=='first'"
          class="tobleList"
          height="100%"
          interface="/system/device/orderserver/1/getserver"
          @onSelect="onSelect"
          :list="list"
          :refresh="refresh"
          :param="param"
          @onEjectChange="onEjectChange(true)"
        />
        <paging-table
          v-show="activeName=='second'"
          class="tobleList"
          height="100%"
          interface="/system/device/orderserver/3/getdisc"
          @onSelect="onSelect"
          :list="list1"
          :refresh="refresh"
          :param="param"
          @onEjectChange="onEjectChange()"
        />
      </el-main>
    </el-container>
    <el-dialog
      title="事件查询"
      width="70%"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="dialogVisible"
    >
      <el-container class="dialog-table6 wh100">
        <paging-table
          :interface="sjUrl"
          :param="grantParam"
          :refresh="grantRefresh"
          :list="grantList"
        />
      </el-container>
    </el-dialog>
    <el-dialog
      title="磁盘增长图"
      width="70%"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeCloseStatistics"
      :visible.sync="dialogStatistics"
    >
      <statistics :refresh="refreshStatis" :param="statisParam"></statistics>
    </el-dialog>
  </el-container>
</template>

<script>
import Storages from "../../../utils/Storage.js"; //缓存工具
import statistics from "./statistics";
export default {
  components: {
    statistics
  },
  props: {
    toParam: Object
  },
  data() {
    let $this = this;
    return {
      sjUrl: "",
      activeName: "first",
      grantParam: {},
      statisParam: {},
      dialogStatistics: false,
      grantRefresh: 0,
      refreshStatis: 0,
      grantList: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "服务器名称",
          prop: "servername"
        },
        {
          name: "事件类型",
          prop: "slcontent"
        },
        {
          name: "时间点",
          prop: "sldate"
        }
      ],
      dialogVisible: false,
      refresh: 0,
      param: {},
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "服务器名称",
          minWidth: "100px",
          prop: "servername"
        },
        {
          name: "IP地址",
          prop: "serverip"
        },
        {
          name: "端口",
          prop: "serverport"
        },
        {
          name: "域名",
          prop: "serverdomain"
        },
        {
          name: "CPU占用率",
          prop: "servercpu",
          minWidth: "100px"
        },
        {
          name: "分配内存",
          prop: "servermaxmemory"
        },
        {
          name: "内存占用率",
          minWidth: "100px",
          prop: "servermemory"
        },
        {
          name: "最近通讯时间",
          minWidth: "120px",
          prop: "serverdate"
        },
        {
          name: "状态",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.serverstate;
                if (value == "正常") {
                  return "puc-pg";
                } else if (value == "失败") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class='getClass()'>{{scope.row.serverstate}}</span>`
          }
        },
        {
          name: "操作系统",
          prop: "serveros"
        },
        {
          name: "操作",
          width: "80px",
          template: {
            props: ["scope"],
            methods: {
              onClick(key) {
                $this.grantParam = {
                  serverid: this.scope.row.serverid
                };
                $this.sjUrl = "/system/device/orderserver/2/getserverinfo";
                $this.grantRefresh = new Date().getTime();
                $this.dialogVisible = true;
              }
            },
            template: `<div class="operat-buts"> 
             <fel-button type="text" size="small" @click.stop="onClick">事件</fel-button>
            </div>`
          }
        }
      ],
      list1: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "服务器名称",
          prop: "cpname"
        },
        {
          name: "磁盘类型",
          prop: "cptype"
        },
        {
          name: "磁盘总量",
          prop: "cptotal"
        },
        {
          name: "已使用量",
          prop: "cpuse"
        },
        {
          name: "剩余量",
          prop: "cpsurplus"
        },
        {
          name: "最后更新时间",
          prop: "cpdate"
        },
        // {
        //   name: "磁盘ID",
        //   prop: "discid"
        // },
        {
          name: "操作",
          width: "80px",
          template: {
            props: ["scope"],
            methods: {
              onClick(key) {
                $this.statisParam = this.scope.row;
                $this.refreshStatis = new Date().getTime();
                $this.dialogStatistics = true;
              }
            },
            template: `<div class="operat-buts"> 
             <fel-button type="text" size="small" @click.stop="onClick">详情</fel-button>
            </div>`
          }
        }
      ],
      selectObj: {},
      sonmenu: 0
    };
  },
  created() {
    this.inGetsonmenu();
  },
  mounted() {
    this.getEject();
  },
  watch: {
    activeName() {
      this.refresh = new Date().getTime();
    }
  },
  methods: {
    beforeCloseStatistics() {
      this.dialogStatistics = false;
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onSelect(obj) {
      this.selectObj = obj;
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    inquireclick() {
      if (this.selectObj && this.selectObj.serverid) {
        this.grantParam = {
          serverid: this.selectObj.serverid
        };
        this.grantRefresh = new Date().getTime();
        this.dialogVisible = true;
      } else {
        this.$message({
          showClose: true,
          message: "请先选中服务器",
          type: "warning"
        });
      }
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onEjectChange(bool = false) {
      //将用户隐藏表格的信息存到localStorage
      if (bool) {
        this.$common.onEjectChange(this.list, "zlfwqgl306-A");
      } else {
        this.$common.onEjectChange(this.list1, "zlfwqgl306-B");
      }
    },
    getEject() {
      this.$common.getEject(this, "list", "zlfwqgl306-A");
      this.$common.getEject(this, "list1", "zlfwqgl306-B");
    }
  }
};
</script>

<style lang='scss' scoped>
.header {
  text-align: left;
}
.elmainbox {
  padding: 0 15px;
  height: 100%;
}
.rightbox {
  display: inline-block;
  text-align: right;
  width: 65%;
}
.leftbox {
  display: inline-block;
  text-align: left;
  width: 35%;
}
.elheader {
  line-height: 60px;
}
</style>
