<template>
  <el-dialog
    title="快捷修改"
    top="20vh"
    width="60%"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    append-to-body
    :visible.sync="dialogVisible"
  >
    <fel-form
      class="quick-ruleForm"
      ref="felForm"
      :selects="selects"
      @submitForm="submitForm"
      @closeForm="beforeClose"
      width="150px"
      dynamic
      :defaultData="defaultData"
      :formData="formData"
    ></fel-form>
  </el-dialog>
</template>

<script>
import judge from "@/utils/judge.js";
import { mapGetters } from "vuex";
export default {
  components: {},
  props: {
    param: Object,
    dialogVisible: Boolean
  },
  data() {
    let $this = this;
    return {
      oldData: {},
      selects: {
        //   persontype:[],
        pgid: [],
        personTypes2: [
          {
            value: "1",
            label: "高职"
          },
          {
            value: "2",
            label: "大专"
          },
          {
            value: "3",
            label: "本科"
          },
          {
            value: "4",
            label: "研究生"
          },
          {
            value: "5",
            label: "博士生"
          }
        ]
      },
      defaultData: {},
      formData: [
        {
          width: "50%",
          value: "personcode",
          name: this.getNumber(),
          type: "text",
          disabled: true,
          rules: [
            {
              required: true,
              validator: (rule, value, callback) => {
                let name = $this.getNumber();
                if (!value && value !== 0) {
                  callback(new Error("请输入" + name));
                } else if (!judge.isAlphaNumeric(value)) {
                  callback(new Error(name + "格式错误，只能是字母或数字"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "personname",
          name: "姓名",
          type: "text",
          rules: [
            {
              required: true,
              message: "请输入姓名",
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "personsex",
          name: "性别",
          type: "select",
          select: [
            {
              value: "1",
              label: "男"
            },
            {
              value: "0",
              label: "女"
            }
          ]
        },
        {
          width: "50%",
          value: "personcard",
          name: "身份证号",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isCardID(value)) {
                  callback(new Error("身份证号格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "personcomedate",
          name: "登记日期",
          type: "date",
          date: "date",
          format: "yyyy-MM-dd"
        },
        {
          width: "50%",
          value: "personmobile",
          name: "手机号",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isMobile(value)) {
                  callback(new Error("手机号码格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "persontype2",
          name: "学历",
          type: "select",
          select: "personTypes2"
        },
        {
          width: "50%",
          value: "personemail",
          name: "邮箱",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isEmail(value)) {
                  callback(new Error("邮箱码格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "99%",
          value: "pgid",
          name: "归属组织",
          type: "cascader",
          options: "pgid",
          change: true,
          filterable: true,
          props: {
            label: "pgname",
            value: "pgid",
            children: "children"
          },
          rules: [
            {
              required: true,
              message: "请选择归属组织",
              trigger: "change"
            }
          ]
        }
      ]
    };
  },
  created() {
    this.$ajax("/quick/update/3/getpersontree", {}, "1")
      .then(res => {
        this.selects.pgid = res.result;
      })
      .catch(err => {});
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.$ajax(
          "/quick/update/b/getupdateperson",
          { personcode: this.param.personcode },
          "1"
        )
          .then(res => {
            let data = res.result;
            let obj = {
              personcard: data.personcard,
              personcode: data.personcode,
              personcomedate: data.personcomedate,
              personemail: data.personemail,
              personmobile: data.personmobile,
              personname: data.personname,
              personsex: data.personsex,
              persontype2: data.persontype2 == "0" ? "" : data.persontype2,
              pgid: data.pgid
            };
            this.defaultData = obj;
          })
          .catch(err => {
            console.log("err", err);
          });
      }
    }
  },
  methods: {
    ...mapGetters(["getNumber"]),
    persontypeChange() {},
    onInput(val) {},
    submitForm(data) {
      let date = data.personcomedate.substr(0, 10);
      let obj = {
        personcard: data.personcard,
        personcode: data.personcode,
        personcomedate: date,
        personemail: data.personemail,
        personmobile: data.personmobile,
        personname: data.personname,
        personsex: data.personsex,
        persontype2: data.persontype2 == "0" ? "" : data.persontype2,
        pgid: data.pgid
      };
      this.$ajax("/quick/update/c/updateperson", obj, "1")
        .then(res => {
          this.$message({
            type: "success",
            message: "修改成功!"
          });
          this.beforeClose();
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    beforeClose() {
        this.defaultData={};
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].resetForm();
      }
      this.$emit("beforeClose");
    }
  }
};
</script>