<!-- 批量授权 -->
<template>
  <el-container
    class="rightBatchAdd"
    v-loading="reqLoading"
    :element-loading-text="`请求中,预计还需${count}秒...`"
    element-loading-spinner="el-icon-loading"
    element-loading-background="rgba(0, 0, 0, 0.8)"
  >
    <batchList v-if="addBut" :toParam="toParam" :topButs="listButs" @onClick="onClick"></batchList>
    <el-container v-else>
      <el-header class="query_headbox">
        <com-title>
          添加批量授权
          <fel-button slot="right" size="mini" @click="onReturn('0')" type="primary">返回</fel-button>
        </com-title>
      </el-header>
      <el-container class="query_main batch">
        <adjust class="batch-authori">
          <adjust-div class="b-left">
            <div class="tsTop">步骤1：选择待授权卡片</div>
            <div class="b-left_box">
              <div class="box_top">
                <el-select
                  size="mini"
                  class="box_top_sel"
                  @change="onChange"
                  v-model="cardParam.type"
                  placeholder="请选择"
                >
                  <!-- 选择人员显示input框,待授权卡片列表显示fel-tabel,查询弹出表格;选择组织显示组织树,待授权卡片列表显示paging-tabel,查询填充待授权卡片列表 -->
                  <el-option
                    v-for="item in options"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value"
                  ></el-option>
                </el-select>
                <template v-if="showzz">
                  <el-cascader
                    ref="cascader"
                    class="box_top_cas"
                    size="mini"
                    v-model="zzValue"
                    :options="zzoptions"
                    :props="{ checkStrictly: true ,value:'pgid',label:'pgname' }"
                    @change="zzOnchange"
                    clearable
                  ></el-cascader>
                </template>
                <template v-else>
                  <pub-select
                    ref="felSelect"
                    class="box_top_cas"
                    @onChange="onRyChange"
                    @onShow="onShow"
                    @noNext="noNext"
                    :options="ryoptions"
                    :loadText="loadText"
                    :show="rySelectShow"
                    :next="next"
                  >
                    <el-input
                      ref="selInput"
                      class="fel-select_input"
                      size="mini"
                      :placeholder="'输入卡号|姓名|'+getNumber()+'搜索'"
                      v-model="ryvalue"
                      @blur="onRyBlur"
                      @focus="onRyFocus"
                      @input="onRyInput"
                      @clear="onRyClear"
                      clearable
                    ></el-input>
                  </pub-select>
                  <!-- <el-input
                    class="box_top_cas"
                    size="mini"
                    @input="cardInput"
                    clearable
                    v-model="cardParam.search"
                    :placeholder="'输入卡号|姓名|'+getNumber()+'搜索'"
                  >
                    <i slot="prefix" class="el-input__icon el-icon-search"></i>
                  </el-input>
                  <div v-if="cardShow" class="b-left_box_top_card-query">
                    <paging-table
                      noInit
                      interface="/auth/cardcenter/lotauth/7/getcard2"
                      class="card-paging wh100"
                      @onSelect="onSelect"
                      layout="total, prev, next"
                      :refresh="cardRefresh"
                      :param="cardParam"
                      :list="cardList"
                      :paramObj = "paramObj"
                    >
                      <span class="sli but-blue" @click="onDelete('2')">隐藏</span>
                    </paging-table>
                  </div>-->
                </template>
                <el-button
                  class="box_top_btn"
                  size="mini"
                  @click.stop="onReturn(['1',cardParam.type])"
                  type="primary"
                >查询</el-button>
              </div>
              <div class="b-left_box_bottom">
                <template v-if="listShow">
                  <fel-table
                    class="tobleList b-left_box_bottom_table"
                    :loading="loading"
                    @onSelection="onTableSelection"
                    :queryData="queryData"
                    :list="list"
                    @selection-change="select"
                  >
                    <span type="text" class="b-left_box_bottom_title">待授权卡片列表</span>
                    <span class="sli but-blue" @click="onDelete('0')">移除</span>
                    <span class="sli but-blue" @click="onDelete('1')">清空</span>
                  </fel-table>
                </template>
                <template v-else>
                  <paging-table
                    ref="pagingStay"
                    class="tobleList wh100"
                    interface="/auth/cardcenter/lotauth/7/getcard2"
                    layout=" prev, pager, next"
                    noInit
                    @onSelection="onSelection"
                    :list="list"
                    :refresh="stayRefresh"
                    :param="cardParam"
                    :paramObj="paramObj"
                    :noRefresh="noRefresh"
                  >
                    <span class="b-left_box_bottom_title">待授权卡片列表</span>
                  </paging-table>
                </template>
              </div>
            </div>
          </adjust-div>
          <adjust-div class="b-centre" noadjust>
            <div class="tsTop">步骤2：选择位置</div>
            <div class="b-center_box">
              <div class="box_top">
                <el-button
                  class="box_top_rightBtn"
                  @click="onReturn(['2',cardParam.type])"
                  type="primary"
                >确认选择</el-button>
                <!-- 确认选择,如果选择人员则传递列表全部人员及选中建筑;如果选中组织则传递组织id及选中建筑,获得卡片列表填入批量生成授权列表 -->
              </div>
              <div class="b-center_box_bottom">
                <fel-tree1
                  class="tree1"
                  ref="tree1"
                  interface="/auth/cardcenter/lotauth/2/getbuildtree"
                  @checkchange="checkchange"
                  :idArr="[0]"
                ></fel-tree1>
              </div>
            </div>
          </adjust-div>
          <adjust-div class="b-right" dragLeft>
            <div class="tsTop">步骤3：批量生成授权 (一次最多下发500个授权)</div>
            <fel-table
              class="tobleList"
              @onSelection="generateSelection"
              :queryData="generateData"
              :list="generateList"
              @onRefresh="onRefresh"
            >
              <el-select size="mini" class="checkAdmin" v-model="isRight" collapse-tags multiple placeholder="请选择">
                <el-option
                  v-for="item in isoptions"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                ></el-option>
                  <!-- <el-checkbox class="checkAdmin" v-model="radio" size="mini" label="1">管理权限</el-checkbox>
                  <el-checkbox class="checkAdmin" v-model="radio1" size="mini" label="1">app权限</el-checkbox>
                  <el-checkbox class="checkAdmin" v-model="radio2" size="mini" label="1">app录入指纹权限</el-checkbox> -->
              </el-select>
              <span
                v-for="(v,k) of topButs"
                :key="k"
                class="sli but-blue"
                @click="onClick(v.id, v)"
              >
                <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
                {{v.alias}}
              </span>
            </fel-table>
          </adjust-div>
        </adjust>
      </el-container>
    </el-container>
    <batchEdit
      :defaultData="defaultData"
      @confirm="confirm"
      :dialogVisible="dialogEdit"
      @beforeClose="dialogEdit=false"
    ></batchEdit>
  </el-container>
</template>

<script>
import pubSelect from "./../common/pub-select";
import { mapGetters } from "vuex";
import batchEdit from "./batchEdit";
import batchList from "./batchList";
import { arrReduceRightObj } from "@/utils/utils";
export default {
  components: {
    batchEdit,
    batchList,
    pubSelect
  },
  props: {
    toParam: null,
    toRoute: null
  },
  created() {
    this.inGetsonmenu();
    this.$ajax("/auth/cardcenter/lotauth/6/getgrouptree", {}, "1").then(res => {
      this.zzoptions = res.result;
    });
    this.toRoutes();
  },
  activated() {
    this.toRoutes();
  },
  deactivated() {
    this.toNum = 0;
  },
  beforeDestroy() {
    this.toNum = 0;
  },
  data() {
    let $this = this;
    return {
      toNum: 0,
      copyRoutes: {},
      reqLoading: false,
      times: null,
      count: 120,
      stayRefresh: 0,
      refresh: 0,
      cardRefresh: 0,
      zzValue: "",
      isRight: "",
      radio: "",
      radio1: "",
      radio2: "",
      listShow: true,
      showzz: false,
      loading: false,
      addBut: true,
      dialogEdit: false,
      cardShow: false,
      noRefresh: true,
      rySelectShow: false,
      next: true,
      loadText: "",
      ryvalue: "",
      cardParam: { type: "1", pgids: "", search: "" }, //pgids: "",
      defaultData: {},
      paramObj: [],
      options: [
        { value: "1", label: "人员" },
        { value: "2", label: "组织" }
      ],
      isoptions: [
        { value: "1", label: "下发管理权限" },
        { value: "2", label: "下发app权限" },
        { value: "3", label: "下发app录入指纹权限" }
      ],
      zzoptions: [],
      ryoptions: [],
      listButs: [],
      cardbuild: { build: [], pgids: [], card: [], type: "" },
      cardbuild2: {},
      queryData: [],
      queryDataDel: [],
      generateData: [],
      tableData: [],
      editData: [],
      cardList: [
        {
          name: "卡号",
          prop: "cardcode"
        },
        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        }
      ],
      generateList: [
        {
          type: "selection"
        },
        {
          name: "序号",
          type: "index",
          width: "60px"
        },
        {
          name: "卡号",
          prop: "cardcode"
        },
        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },
        {
          name: "位置",
          prop: "roomlocation"
        },
        {
          name: "操作",
          width: "100px",
          template: {
            props: ["scope"],
            methods: {
              onClick(type) {
                if (type == "01") {
                  $this.dialogEdit = true;
                  $this.editData = this.scope.row;
                  $this.defaultData = Object.assign(
                    {
                      sdate: "",
                      edate: "",
                      openstime: "00:00",
                      openetime: "23:59",
                      usecount: ""
                    },
                    this.scope.row
                  );
                } else {
                  let ind = $this.generateData.indexOf(this.scope.row);
                  $this.generateData.splice(ind, 1);
                }
              }
            },
            computed: {
              name() {
                if ($this.cardParam.type == "1") {
                  return "人员";
                } else {
                  return "组织";
                }
              }
            },
            template: `<div class="operat-buts"> <el-button type="text" size="small"  @click.stop="onClick('01')">修改</el-button>
                    <el-button type="text" size="small"  @click.stop="onClick('02')">删除</el-button></div>`
          }
        }
      ],

      list: [
        {
          show: false,
          type: "selection"
        },
        {
          name: "卡号",
          prop: "cardcode"
        },
        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        }
      ],
      topButs: [
        {
          id: 0,
          alias: "清空",
          icon: ""
        },
        {
          id: 2,
          alias: "批量修改",
          icon: "piliangcaozuo"
        }
      ],
      sonmenu: 0
    };
  },
  watch: {
    dialogEdit(val) {
      if (val == false) {
        this.defaultData = {};
      }
    },
    addBut(val) {
      if (!val) {
        this.onReset();
      }
    }
  },
  methods: {
    toRoutes() {
      if (
        this.toRoute &&
        this.toRoute.in &&
        this.copyRoutes.keys != this.toRoute.keys
      ) {
        this.addBut = false;
        setTimeout(() => {
          this.copyRoutes = JSON.parse(JSON.stringify(this.toRoute));
          if (this.toRoute && this.toRoute.in && this.toRoute.in == "renyuan") {
            this.ryvalue = this.toRoute.personcode;
            this.onReturn(["1", 1, false]);
          }
        }, 0);
      } else {
        this.toNum++;
        if (this.toNum < 5) {
          setTimeout(() => {
            this.toRoutes();
          }, 200);
        }
      }
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          if (res.result) {
            res.result.forEach(value => {
              let id = value.entity.id;
              let alias = value.entity.alias;
              if (id == "397") {
                this.topButs.push(value.entity);
              } else if (id == "446") {
                this.listButs.push(value.entity);
              }
            });
          }
          this.sonmenu = 4;
        })
        .catch(() => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onReset() {
      this.cardParam = { type: "1", pgids: "", search: "" };
      this.zzValue = "";
      this.ryvalue = "";
      this.radio = "";
      this.radio1 = "";
      this.radio2 = "";
      this.queryData = [];
      this.queryDataDel = [];
      this.generateData = [];
      this.tableData = [];
      this.editData = [];
      this.cardbuild2 = {};
      this.paramObj = [];
      this.listShow = true;
      this.showzz = false;
      this.noRefresh = true;
    },
    zzOnchange(val) {
      //选中组织
      // this.cardParam.pgids = val[val.length - 1]; // `[${val[val.length-1]}]`
      this.paramObj = [val[val.length - 1]];
      this.$refs.cascader.toggleDropDownVisible(false);
    },
    onChange(val) {
      //选择人员或组织
      if (val == "2") {
        this.showzz = true;
        this.listShow = false;
        this.cardParam.search = "";
        this.list[0].show = true;
        this.cardShow = false;
        this.noRefresh = true;
      } else {
        this.paramObj = [];
        this.listShow = true;
        this.showzz = false;
        // this.cardParam.pgids = "";
        this.zzValue = "";
        this.list[0].show = false;
      }
    },
    onRyChange(data) {
      let next = true;
      // this.next = true;
      this.queryData.forEach(item => {
        if (item.cardcode == data.cardcode) {
          next = false;
        }
      });
      if (next) {
        this.queryData.push(data);
        this.rySelectShow = false;
      }
    },
    onRyBlur() {},
    onRyInput(val) {
      this.loadText = "点击查询进行检索";
      this.rySelectShow = true;
    },
    onRyFocus(val) {
      this.next = false;
      this.loadText = "点击查询进行检索";
      this.rySelectShow = true;
    },
    onRyClear() {
      this.value = "";
      this.ryoptions = [];
      this.rySelectShow = false;
    },
    onShow(val) {
      this.rySelectShow = val;
    },
    noNext() {
      this.next = true;
    },
    onReturn([str, type, bool = true]) {
      //返回,查询,及确认选择事件
      if (str == "0") {
        this.addBut = true;
      } else if (str == "1") {
        if (type == "1") {
          // this.next=true;
          if (this.ryvalue) {
            this.rySelectShow = true;
            this.loadText = "加载中...";
            this.$ajax(
              "/auth/cardcenter/lotauth/7/getcard2",
              { type: 1, search: this.ryvalue, page: 1, rows: 20 },
              "1",
              this.paramObj
            ).then(res => {
              this.ryoptions = res.result.data;
              // this.rySelectShow = true;
              if (this.ryoptions.length == 0) {
                this.loadText = "无数据";
                return;
              }
              if (!bool) {
                console.log("bool进入");
                this.ryoptions.forEach(item => {
                  if (item.personcode == this.ryvalue) {
                    this.onRyChange(item);
                  }
                });
              }
            });
          } else {
            this.rySelectShow = true;
            this.loadText = "请输入内容进行查询";
            return;
          }
          // if(this.cardParam.search!=""){
          //   this.cardShow = true;
          //   setTimeout(() => {
          //     this.cardRefresh = new Date().getTime();
          //   }, 10);
          // }else{
          //   this.$message({
          //   message: "请先输入查询人员!",
          //   type: "warning"
          // });
          // }
        } else {
          if (this.paramObj.length > 0) {
            this.noRefresh = false;
            this.stayRefresh = new Date().getTime();
          } else {
            this.$message({
              message: "请先选择查询组织!",
              type: "warning"
            });
          }
        }
      } else {
        clearInterval(this.times);
        if (bool) {
          if (this.cardbuild.build.length == 0) {
            this.$message({
              message: "请先选择建筑",
              type: "warning"
            });
            return;
          }
          if (type == "1") {
            this.cardbuild.card = [...this.queryData];
            this.cardbuild.type = type;
          } else {
            this.cardbuild.pgids = [...this.paramObj];
            this.cardbuild.type = type;
          }
          if (
            this.cardbuild.card.length == 0 &&
            this.cardbuild.pgids.length == 0
          ) {
            this.$message({
              message: "请先选择人员或组织",
              type: "warning"
            });
            return;
          }
          this.reqLoading = true;
          this.times = setInterval(() => {
            this.count--;
            if (this.count <= 0) {
              this.$message("请求超时!");
              this.reqLoading = false;
              this.count = 120;
              clearInterval(this.times);
            }
          }, 1000);
          this.cardbuild2 = Object.assign({}, this.cardbuild);
        } else {
          if (Object.keys(this.cardbuild2).length == 0) {
            return;
          }
        }
        this.$ajax(
          // "/auth/cardcenter/lotauth/3/getcardauth",
          // "/auth/cardcenter/lotauth/4/getcardauthpage",
          "/auth/cardcenter/lotauth/9/getcardauthpage2",
          { page: "1", rows: "500" },
          "1",
          bool ? this.cardbuild : this.cardbuild2
          // false,
          // 120000
        )
          .then(res => {
            this.reqLoading = false;
            clearInterval(this.times);
            this.count = 120;
            this.generateData = res.result;
          })
          .catch(err => {
            this.reqLoading = false;
            clearInterval(this.times);
            this.count = 120;
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      }
    },
    onRefresh() {
      this.onReturn(["2", this.cardParam.type, false]);
    },
    //搜索授权卡片
    cardInput(val) {
      //input框改变值事件
      if (val) {
        // this.cardShow = true;
        // setTimeout(()=>{
        //   this.cardRefresh = new Date().getTime();
        // },10)
      } else {
        this.cardShow = false;
      }
    },
    select(val) {
      //待授权fel-tabel 选中事件;被选中的值可以移除
      this.queryDataDel = val;
    },
    onDelete(type) {
      //弹出的paging-tabel隐藏,移除及清空事件
      if (type == "0") {
        this.queryDataDel.forEach(val => {
          let ind = this.queryData.indexOf(val);
          this.queryData.splice(ind, 1);
        });
      } else if (type == "2") {
        this.cardShow = false;
      } else {
        this.queryData = [];
      }
    },
    onSelection() {},
    onClick(key, data) {
      //清空,批量修改,生效授权事件
      if (key == "0") {
        this.generateData = [];
      } else if (key == "2") {
        if (this.generateData.length > 0) {
          this.editData = this.tableData;
          this.dialogEdit = true;
          this.defaultData = {
            sdate: "",
            edate: "",
            openstime: "00:00",
            openetime: "23:59",
            usecount: ""
          };
        } else {
          this.$message({
            message: "请先选择",
            type: "warning"
          });
        }
      } else if (key == "397") {
        if (this.tableData.length > 0) {
          let radio = this.isRight.includes("1") ? "1" : "0"; // this.radio == true ? "1" : "0";
          let radio1 = this.isRight.includes("2") ? "1" : "0"; //this.radio1 == true ? "1" : "0";
          let radio2 = this.isRight.includes("3") ? "1" : "0"; //this.radio2 == true ? "1" : "0";
          let data = this.tableData.map(obj => {
            return {
              cardcode: obj.cardcode,
              edate: obj.edate,
              openetime: obj.openetime,
              openstime: obj.openstime,
              roomid: obj.roomid,
              sdate: obj.sdate,
              usecount: obj.usecount
            };
          });
          this.reqLoading = true;
          this.times = setInterval(() => {
            this.count--;
            if (this.count <= 0) {
              this.$message("请求超时!");
              this.reqLoading = false;
              this.count = 120;
              clearInterval(this.times);
            }
          }, 1000);
          this.$ajax(
            "/auth/cardcenter/lotauth/5/savecardauth",
            { ismcard: radio, isapp: radio1, isfingerentry: radio2 },
            "1",
            data
            // false,
            // 120000
          )
            .then(res => {
              clearInterval(this.times);
              this.reqLoading = false;
              this.count = 120;
              // this.onClick('0');
              this.onReturn(["2", this.cardParam.type]);
              this.$message({
                message: "授权已下发!",
                type: "success"
              });
              this.isRight=[];
              this.addBut = true;
            })
            .catch(err => {
              clearInterval(this.times);
              this.reqLoading = false;
              this.count = 120;
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] ` + err.resultMsg,
                type: "error"
              });
            });
        } else {
          this.$message({
            message: "请先选择",
            type: "warning"
          });
        }
      } else if (key == "d1") {
        //显示隐藏批量授权卡页面  batchList的事件
        this.addBut = false;
      }
    },
    confirm(val, data) {
      //修改/批量修改;
      if (this.editData instanceof Array) {
        this.editData.forEach(obj => {
          Object.keys(val).forEach(key => {
            obj[key] = val[key] == undefined ? "" : val[key];
          });
        });
      } else {
        Object.keys(val).forEach(key => {
          this.editData[key] = val[key];
        });
      }
      console.log("confirm", this.generateData);
      this.dialogEdit = false;
      // this.generateData.forEach(item=>{
      //   item.edate=val.edate;
      //   item.openetime = val.openetime;
      //   item.openstime = val.openstime;
      //   item.sdate = val.sdate;
      //   item.usecount = val.usecount;
      // })
      // this.dialogEdit = false;
      // console.log("llloo", val, this.generateData);
    },
    generateSelection(data) {
      //批量生成授权列表选中事件;
      this.tableData = data;
    },
    onTableSelection() {},
    onSelect(val) {
      //卡片列表选中如果待授权列表没有该人员则push进待授权列表;
      let next = true;
      this.queryData.forEach(item => {
        if (item.cardcode == val.cardcode) {
          next = false;
        }
      });
      if (next) {
        this.queryData.push(val);
        this.cardShow = false;
      }
    },
    checkchange(val, data) {
      //建筑树选中事件
      this.cardbuild.build = data.checkedNodes;
    },
    ...mapGetters(["getNumber"])
  }
};
</script>

<style lang="scss">
.rightBatchAdd {
  .box_top {
    background: #fff;
    padding: 5px 5px 0 5px;
    height: 40px;
    justify-content: flex-end;
    display: flex;
    // margin-bottom:5px;
    .b-left_box_top_card-query {
      position: absolute;
      width: 28%;
      height: 85%;
      z-index: 10;
      left: 12px;
      top: 75px;
      .maR180 {
        margin-right: 180px;
      }
    }
    .box_top_rightBtn {
      float: right;
      height: 27px;
      width: 95px;
      margin: 2px 15px;

      line-height: 0px;
    }
    .box_top_sel {
      width: 80px;
      margin-right: 10px;
    }
    .box_top_cas {
      flex: 1;
      margin-right: 10px;
      line-height: 27px;
    }
    .box_top_btn {
      width: 56px;
      height: 27px;
      margin: 1px 15px 0 0;
    }
  }
  .b-left_box {
    // width: 100%;
    flex: 1;
    display: flex;
    flex-direction: column;
    .b-left_box_bottom {
      flex: 1;
      display: flex;
      flex-direction: column;
      .b-left_box_bottom_title {
        position: absolute;
        left: 15px;
        font-size: 16px;
      }
      .b-left_box_bottom_table {
        flex: 1;
      }
    }
    .b-left_box_pagin {
      height: 50px;
      text-align: right;
      background: #fff;
    }
  }
  .b-center_box {
    flex: 1;
    // height: 0;
    display: flex;
    flex-direction: column;
    background: #fff;
    .b-center_box_bottom {
      margin: 10px;
      flex: 1;
      overflow: auto;
      position: relative;
      .fel-tree {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }
    }
  }
  .b-right {
    .checkAdmin {
      // background: #409eff;
      // color: #fff;
      // border: none;
      position: absolute;
      left: 15px;
      padding-top: 4px;
      width:170px;
      .el-checkbox__input.is-checked + .el-checkbox__label {
        // color:#fff;
      }
    }
    .checkAdmin:nth-of-type(2) {
      left: 110px;
    }
    .checkAdmin:nth-of-type(3) {
      left: 200px;
    }
    .tobleList {
      padding-top: 2px;
    }
  }
}
</style>
