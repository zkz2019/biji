<!-- 位置树形控件-->
<template>
  <div class="fel-tree">
    <div v-if="treedatas.length == 0" v-loading="loading" class="tree-empty">
      <span v-if="serverText">
        {{serverText}}
        <el-button type="text" size="small" @click.stop="onRefresh(1)">刷新数据</el-button>
      </span>
      <span v-else class="el-table__empty-text">暂无数据</span>
    </div>
    <el-tree
      ref="tree"
      :data="treedatas"
      :props="defaultProps"
      :check-strictly="checkStrictly"
      render-after-expand
      empty-text
      :auto-expand-parent="false"
      @node-click="handleNodeClick"
      @node-expand="nodeExpand"
      @node-collapse="nodeCollapse"
      :load="loadin"
      lazy
      :node-key="nodeKeyFixed"
      highlight-current
      :show-checkbox="showCheckbox"
      @check="checkchange"
      :default-expanded-keys="idSets"
    >
      <span class="custom-tree-node" slot-scope="scope">
        <span class="tree-icon">
          <i v-if="scope.data.buildtype == ''" class="ficon-jianzhus"></i>
          <i v-else-if="scope.data.buildtype == 1" class="ficon-quyu"></i>
          <i v-else-if="scope.data.buildtype == 2" class="ficon-jianzhu"></i>
          <i v-else-if="scope.data.buildtype == 3" class="ficon-louceng"></i>
          <i v-else-if="scope.data.buildtype == 6" class="ficon-fangjian"></i>
          {{ scope.node.label}}
        </span>
      </span>
    </el-tree>
  </div>
</template>

<script>
export default {
  props: {
    checkStrictly: Boolean,
    showCheckbox: {
      type: Boolean,
      default: true
    },
    refresh: Number, //刷新
    interface: String,
    defaultProps: {
      type: Object,
      default() {
        return {
          children: "children",
          label: "buildname",
          isLeaf: "isLeaf"
        };
      }
    },
    nodeKey: {
      type: String,
      default: "buildid"
    },
    nodeType: {
      type: String,
      default: "buildtype"
    },
    param: {
      type: Object,
      default() {
        return {};
      }
    },
    idArr: {
      type: Array,
      default() {
        return [];
      }
    } //默认展开的数组
  },
  data() {
    return {
      num: 0,
      nodeKeyFixed: "_fixedId",
      loading: true,
      pagesids: this.pagesid,
      thistab: "",
      treedatas: [],
      serverText: "",
      idSets: this.idArr
    };
  },
  methods: {
    resetChecked() {
      this.$refs.tree.setCheckedKeys([]);
    },
    nodeExpand(data) {
      this.idSets.push(data[this.nodeKeyFixed]);
    },
    nodeCollapse(data) {
      const index = this.idSets.indexOf(data[this.nodeKeyFixed]);
      if (index > -1) {
        this.idSets.splice(index, 1);
      }
    },
    //点击切换表格
    handleNodeClick(data) {
      this.$emit("handleNodeClick", data);
    },
    //多选节点击
    checkchange(data, Nodes) {
      this.$emit("checkchange", data, Nodes);
    },
    //获取树形菜单数据
    getTreeData(node, resolve) {
      this.serverText = "";
      let data = {};
      if (
        node &&
        node.data &&
        (node.data[this.nodeKey] || node.data[this.nodeKey] === 0)
      ) {
        data = node.data;
      }
      this.$ajax(this.interface, this.param, "1", data)
        .then(res => {
          this.loading = false;
          let bb = 0;
          let aa = res.result.map(item => {
            if (item.isnext == 1) {
              item.isLeaf = false;
            } else {
              item.isLeaf = true;
            }
            if (this.num <= 0) {
              item.num = bb;
              item.top = "0";
            } else {
              item.num = node.data.num;
              item.top = "1";
            }
            item[this.nodeKeyFixed] = item[this.nodeType] + "|" + item[this.nodeKey];
            bb++;
            return item;
          }); //过滤
          this.num++;
          if (!node || !node.data || node.data.length == 0) {
            if (this.idArr.length === 1) {
              const index = this.idArr[0];
              const key = aa[index][this.nodeKeyFixed];
              this.idSets[0] = key;
              if (typeof node != "undefined") {
                setTimeout(() => {
                  this.setCurrentKey(key);
                  this.$emit("handleNodeClick", aa[index]);
                }, 0);
              }
              // this.$emit("handleNodeClick", aa[index]);
            }
            this.treedatas = aa;
            // } else if (
            //   node.data[this.nodeKey] === "0" ||
            //   node.data[this.nodeKey] === 0
            // ) {
            //   if (aa.length == 0) {
            //     this.treedatas = [];
            //   } else {
            //     return resolve(aa);
            //   }
          } else {
            // node.data.childList = aa;
            return resolve(aa);
          }
        })
        .catch(err => {
          node.loaded = false;
          node.loading = false;
          this.loading = false;
          if (!node || !node.data || node.data.length == 0) {
            this.serverText = `[${err.resultCode}] ` + err.resultMsg;
          }
        });
    },
    //生成子菜单
    loadin(node, resolve) {
      this.getTreeData(node, resolve);
    },
    setCurrentKey(key) {
      if (this.$refs.tree) {
        this.$refs.tree.setCurrentKey(key);
      }
    },
    onRefresh(key) {
      this.loading = true;
      if (key == 1) {
        let obj = {};
        obj[this.nodeKey] = 0;
        this.getTreeData(obj);
      } else {
        this.getTreeData();
      }
    }
  },
  watch: {
    refresh() {
      this.onRefresh();
    }
  }
};
</script>
