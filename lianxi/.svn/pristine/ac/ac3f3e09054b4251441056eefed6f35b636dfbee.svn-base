<!-- 录入机 -->
<template>
  <el-container class="zwlrjgl310">
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
      <retrieval class="query_head">
        <inpbox :inpb="true">
          <el-select v-model="param.fpstate" class="wid150 qh_inp">
            <el-option
              v-for="item in fpstates"
              :key="item.fpstate"
              :label="item.statename"
              :value="item.fpstate"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox :inptext="'请输入'">
          <el-input
            clearable
            class="qh_w270 qh_inp"
            v-model="param.search"
            placeholder="输入ID/名称进行检索"
          ></el-input>
        </inpbox>
        <inpbox>
          <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="query_main" v-loading="loading" :element-loading-text="loadingtext">
      <paging-table
        class="tobleList"
        height="100%"
        interface="/system/device/fingerprint/1/getfingerprint"
        :list="list"
        :refresh="refresh"
        :param="param"
        @onEjectChange="onEjectChange"
      >
        <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>
      </paging-table>
    </el-main>
    <inputAdmin
      :param="adminParam"
      :botButs="adminButs"
      :dialogVisible="dialogAdmin"
      @beforeClose="dialogAdmin=false"
    ></inputAdmin>
    <moifyFinger
      @onRefresh="onRefresh"
      :param="modifyParam"
      @beforeClose="dialogModify=false"
      :dialogVisible="dialogModify"
    ></moifyFinger>
    <historyFinger @beforeClose="dialogHistory=false" :dialogVisible="dialogHistory"></historyFinger>
  </el-container>
</template>

<script>
import Storages from "../../../utils/Storage.js"; //缓存工具
import inputAdmin from "./inputAdmin";
import moifyFinger from "./moifyFinger";
import historyFinger from "./historyFinger";
export default {
  components: {
    inputAdmin,
    moifyFinger,
    historyFinger
  },
  props: {
    toParam: Object
  },
  data() {
    let $this = this;
    return {
      fpstates: [{ fpstate: "", statename: "所有状态" }],
      loading: false,
      count: 0,
      setvals: null,
      dialogHistory: false,
      dialogModify: false,
      modifyParam: {},
      topButs: [],
      listBut: [],
      adminParam: {},
      adminButs: [],
      dialogAdmin: false,
      param: {
        search: "",
        fpstate: ""
      },
      list: [
        {
          type: "selection"
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "指纹机型号",
          prop: "fpmodel"
        },
        {
          name: "指纹机唯一ID",
          prop: "fpcode"
        },
        {
          name: "IP地址",
          prop: "fpip"
        },
        {
          name: "指纹机名称",
          prop: "fpname"
        },
        {
          name: "通讯状态",
          template: {
            props: ["scope"],
            template: `<span :class='scope.row.fponline=="在线"?"puc-ps":"puc-px"'>{{scope.row.fponline}}</span>`
          }
        },
        {
          name: "操作",
          width:"170px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              }
            },
            methods: {
              onClick(key) {
                if (key == 2) {
                  $this.modify(this.scope.row);
                } else if (key == 4) {
                  $this.delete([this.scope.row.fpcode]);
                } else if (key == 7) {
                  $this.admin(this.scope.row);
                } else if (key == 3) {
                  $this.getinquire(this.scope.row.fpcode);
                }
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.type)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      refresh: 0,
      sonmenu: 0
    };
  },
  computed: {
    loadingtext() {
      return `查询指令正在发送，预计${this.count}秒后返回结果 `;
    }
  },
  created() {
    this.inGetsonmenu();
    this.inGetlockstate();
  },
  mounted() {
    this.getEject();
  },
  methods: {
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.onRefresh();
    },
    inGetlockstate() {
      this.$ajax("/system/device/fingerprint/2/getfingerprintstate", {}, "1")
        .then(res => {
          this.fpstates.push(...res.result);
        })
        .catch(err => {});
    },
    onClick(key, data) {
      if (key == "278") {
        this.dialogHistory = true;
      } else if (key == "264") {
        this.modifyParam = {};
        this.dialogModify = true;
      }
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid:this.toParam.id }, "1")
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "264") {
              this.topButs.push(value.entity);
            } else if (id == "266") {
              this.listBut.push({
                type: "4",
                name: "删除"
              });
            } else if (id == "277") {
              this.listBut.push({
                type: "3",
                name: "查询"
              });
            } else if (id == "265") {
              this.listBut.push({
                type: "2",
                name: "修改"
              });
            } else if (id == "278") {
              this.topButs.push(value.entity);
            } else if (id == "460") {
              this.listBut.push({
                type: "7",
                name: "管理员"
              });
              if (value.childs) {
                this.adminButs = value.childs.map(o => {
                  return {
                    id: o.entity.id,
                    alias: o.entity.alias
                  };
                });
              }
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    modify(data) {
      this.modifyParam = data;
      this.dialogModify = true;
    },
    admin(data) {
      this.adminParam = data;
      this.dialogAdmin = true;
    },
    delete(arr) {
      this.$confirm("此操作将删除当前指纹机, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.$ajax(
            "/system/device/fingerprint/delete/1/deletefingerprint",
            {},
            "1",
            arr,
            true
          )
            .then(res => {
              this.$message({
                message: "删除成功",
                type: "success"
              });
              this.onRefresh();
            })
            .catch(err => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] `+err.resultMsg ,
                type: "error"
              });
            });
        })
        .catch(err => {});
    },
    //查询   发送查询指纹机状态指令
    getinquire(fpcode) {
      this.$ajax("/system/device/fingerprint/order/1/savefingerprintorder", {
        fpcode: fpcode
      })
        .then(res => {
          this.$notify({
            title: "成功",
            message: "操作成功，状态查询指令正在下发，请稍候！",
            type: "success"
          });
          this.loading = true;
          this.count = 120;
          let num = 0;
          this.setvals = setInterval(() => {
            if (this.count > 0) {
              this.count--;
              num++;
              if (num == 4) {
                num = 0;
                this.Instructionresult(res.result);
              }
            } else {
              clearInterval(this.setvals);
              this.loading = false;
              this.count = 120;
              this.$message({
                showClose: true,
                message: "连接超时!",
                type: "error"
              });
            }
          }, 1000);
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] `+err.resultMsg  || "连接失败",
            type: "error"
          });
        });
    },
    //查询 获取查询指纹机状态指令结果
    Instructionresult(orderid) {
      this.$ajax(
        "/system/device/fingerprint/order/2/getfingerprintorderresult",
        { orderid: orderid }
      )
        .then(res => {
          if (res.result.orderid == "") {
            this.$notify({
              title: "成功",
              message: res.result.ordermsg,
              type: "success"
            });
            return;
          }
          if (res.result.resultstate == 0) {
          } else if (res.result.resultstate == 1) {
            this.$alert(res.result.resultmsg || "下发成功", "指令结果", {
              confirmButtonText: "确定",
              type: "success",
              callback: action => {}
            });
            this.loading = false;
            clearInterval(this.setvals);
            this.count = 120;
          } else {
            this.$notify({
              title: "失败",
              message: res.result.resultmsg || "下发失败",
              type: "error"
            });
            clearInterval(this.setvals);
            this.count = 120;
            this.loading = false;
          }
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] `+err.resultMsg  || "连接失败",
            type: "error"
          });
        });
    },
    onEjectChange() {
      //将用户隐藏表格的信息存到localStorage
      let arr = this.list.map(o => o.show);
      Storages.setlocalStorage("zwlrjgl310.eject", arr);
    },
    getEject() {
      //从localStorage获取用户隐藏表格的信息
      let arr = Storages.getlocalStorage("zwlrjgl310.eject") || [];
      let lists = [];
      this.list.forEach((value, key) => {
        let obj = Object.assign({}, value);
        obj.show = arr[key];
        lists.push(obj);
      });
      this.list = lists;
    }
  }
};
</script>

<style>
</style>
