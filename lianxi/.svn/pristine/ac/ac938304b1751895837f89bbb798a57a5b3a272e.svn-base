<template>
  <span class="fel-date">
    <el-date-picker
      :value="value"
      @input="onInput"
      @change="onChange"
      :type="type"
      align="right"
      popper-class="fel-dateW miniDate"
      unlink-panels
      range-separator="至"
      :start-placeholder="pStart"
      :end-placeholder="pEnd"
      :picker-options="pickerShow?pickerOptions:{}"
      :default-time="times"
      :disabled="disabled"
      :time-arrow-control="arrowControl"
      :size="size"
    ></el-date-picker>
  </span>
</template>

<script>
/**
 * element-ui中date-picker 日期选择的组件
 * 带用最近一周,最近一个月,最近三个月的快捷选择
 * 参数支持 element-ui中date-picker 中所有
 */
export default {
  props: {
    value: null,
    start: {
      type: String,
      default: "3"
    },
    type: {
      type: String,
      default: "datetimerange"
    },
    pStart: { type: String, default: "开始日期" },
    pEnd: { type: String, default: "结束日期" },
    pickerShow: { type: Boolean, default: true },
    disabled: { type: Boolean, default: false },
    arrowControl: { type: Boolean, default: false },
    size: { type: String, default: "" }
  },
  model: {
    prop: "value",
    event: "input"
  },
  name: "fel-date",
  data() {
    return {
      date: "",
      times: ["00:00:00", "23:59:59"]
    };
  },
  methods: {
    onInput(data) {
      if (data && data[1]) {
        let d = new Date();
        if (data[1] > d) {
          data[1] = d;
        }
      }
      this.$emit("input", data);
    },
    onChange(...arr) {
      this.$emit("change", ...arr);
    }
  },

  created() {
    // this.times = ["00:00:00", String(new Date()).substring(16, 24)];
    let $this = this;
    let typss = {
      "1": [
        { name: "最近一周", value: 7 },
        { name: "最近半个月", value: 15 },
        { name: "最近一个月", value: 30 }
      ],
      "3": [
        { name: "最近一周", value: 7 },
        { name: "最近一个月", value: 30 },
        { name: "最近三个月", value: 90 }
      ]
    };

    let shortcuts = typss[this.start].map(obj => {
      return {
        text: obj.name,
        onClick(picker) {
          const end = new Date();
          const start = new Date();
          start.setTime(start.getTime() - 3600 * 1000 * 24 * obj.value);
          picker.$emit("pick", [start, end]);
          $this.$emit("change");
        }
      };
    });
    this.pickerOptions = {
      disabledDate(time) {
        var d = new Date();
        let t =
          new Date(
            d.getFullYear(),
            d.getMonth(),
            d.getDate() + 1,
            "00",
            "00",
            "00"
          ).getTime() - 1;
        return time.getTime() > t;
      },
      shortcuts
    };
  }
};
</script>
