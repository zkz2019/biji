<!-- 离线授权 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>
        <span class="navig" type="text" @click="onReturn">离线授权</span>
        <i class="arrow"></i>添加离线授权
      </com-title>
    </el-header>
    <el-container class="query_main batch">
      <adjust class="batch-authori">
        <adjust-div class="b-left" style="width:40%">
          <!-- change-on-select -->
          <div class="top query-input">
            <div class="tsTop">步骤1：选择授权位置</div>
            <div class="in-search">
              <el-cascader
                placeholder="请选择待授权位置"
                @change="changePsition"
                filterable
                clearable
                class="wid100"
                v-model="position"
                :options="positions"
                :props="{value:'agid',label:'agname',disabled:'isroom'}"
              ></el-cascader>
            </div>
          </div>
          <div class="tree">
            <div class="tsTop">步骤2：选择授权卡片</div>
            <div class="ts-but">
              <span v-if="isQuery" @click="queryClick" class="tsTop-but left">
                <i class="ficon-image668"></i>查询房间授权
              </span>
              <template v-if="cardData && cardData.length >0">
                <span @click="startingClick(0)" class="tsTop-but">
                  <i class="ficon-image440"></i>删除授权
                </span>
                <span @click="startingClick(1)" class="tsTop-but">
                  <i class="ficon-image622"></i>添加授权
                </span>
              </template>
            </div>
            <div class="tree1 list-table">
              <div class="list-table-query">
                <el-input
                  clearable
                  v-model="cardParam.search"
                  :placeholder="'输入卡号|姓名|'+getNumber()+'搜索'"
                >
                  <i slot="prefix" class="el-input__icon el-icon-search"></i>
                </el-input>
                <fel-button size="mini" @click="cardInput" type="primary">查询</fel-button>
              </div>
              <template v-if="isSearch">
                <paging-table
                  key="ts-0"
                  height="100%"
                  noOpera
                  noInit
                  @onSelection="onSelect"
                  interface="/auth/cardcenter/offlineauth/saveofflineauth/2/getcard"
                  class="cardList"
                  layout="total, prev, next"
                  :refresh="cardRefresh"
                  :param="cardParam"
                  :list="cardList"
                />
              </template>
              <template v-else>
                <fel-table
                  key="ts-1"
                  height="100%"
                  noOpera
                  @onSelection="onSelect"
                  class="cardList"
                  :refresh="cardRefresh"
                  :param="cardParam"
                  :list="cardList"
                  :queryData="searchData"
                ></fel-table>
              </template>
            </div>
          </div>
        </adjust-div>
        <adjust-div class="b-right" noadjust>
          <div class="tsTop">
            步骤3：写入离线授权卡（一张卡最多写入{{sectorsLeng}}个授权）
            <template v-if="isCardReader">
              <span class="is-card-reader" @click="onClickCardReader" title="读卡器软件下载">
                <i class="el-icon-download"></i>
              </span>
            </template>
          </div>
          <fel-table
            class="tobleList hide-refresh"
            height="94%"
            :loading="loading"
            @onSelection="onTableSelection"
            :queryData="queryData"
            :list="list"
          >
            <span
              :style="{color:Boolean(queryData && queryData.length > 0)?'':'#ccc'}"
              class="sli but-blue"
              @click="onClick(0)"
            >
              <i class="ficon-empty"></i>清空
            </span>
            <span v-if="tableData && tableData.length >0" class="sli but-blue" @click="onClick(2)">
              <i class="ficon-image30"></i>
              修改
            </span>
            <span
              v-for="(v,k) of offLineBut"
              :key="k"
              class="sli but-blue"
              @click="onClick(v.id, v)"
            >
              <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
              {{v.alias}}
            </span>
          </fel-table>
        </adjust-div>
      </adjust>
    </el-container>
    <batchEdit
      offLine
      :defaultData="defaultData"
      @confirm="confirm"
      :dialogVisible="dialogEdit"
      @beforeClose="dialogEdit=false"
    ></batchEdit>
    <cardReading ref="reading" type="4" @onInstall="onInstall" :close="addBut" />
  </el-container>
</template>

<script>
import { mapGetters } from "vuex";
import batchEdit from "./batchEdit";
import cardReading from "./cardReading2";
import { arrReduceRight, arrDelete } from "@/utils/utils";
import setting from "@/setting.js";
export default {
  components: {
    batchEdit,
    cardReading
  },
  props: {
    addBut: Boolean,
    offLineBut: {
      type: Array,
      default() {
        return [];
      }
    }
  },
  created() {
    this.inPosition();
    this.ingetroomsecter();
  },
  data() {
    let $this = this;
    return {
      isQuery: false,
      searchData: [],
      isSearch: true,
      isCardReader: false,
      position: [],
      positions: [{ agid: "", agname: "正在加载中...", isroom: true }],
      sectorsLeng: 15,
      defaultData: {},
      loading: false,
      stayData: [],
      queryData: [],
      stayParamObj: {
        build: [],
        card: [],
        roomid: ""
      },
      stayRefresh: 0,
      cardData: [],
      cardRefresh: 0,
      cardParam: {
        search: ""
      },
      cardList: [
        {
          type: "selection"
        },
        {
          name: "卡号",
          prop: "cardcode"
        },
        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        }
      ],
      dialogEdit: false,
      list: [
        {
          type: "selection"
        },
        {
          name: "序号",
          type: "index",
          width: "50px"
        },
        {
          prop: "authtype",
          name: "类型",
          width: "60px",
          formatter(a, b, c) {
            return c == 1 ? "添加" : "删除";
          }
        },
        {
          name: "被授权人",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },
        {
          name: "卡号",
          prop: "cardcode"
        },
        {
          name: "操作",
          width: "100px",
          template: {
            props: ["scope"],
            methods: {
              onClick(key) {
                if (key == 4) {
                  $this.queryData.splice(this.scope.$index, 1);
                } else {
                  $this.dialogEdit = true;
                  $this.editData = this.scope.row;
                  $this.defaultData = Object.assign(
                    {
                      opencount: "",
                      empedate: "",
                      empsdate: ""
                    },
                    this.scope.row
                  );
                }
              }
            },
            template: `<div class="operat-buts"> 
             <fel-button v-if="scope.row.authtype == 1" type="text" size="small" @click.stop="onClick(2)">修改</fel-button>
             <fel-button type="text" size="small" @click.stop="onClick(4)">删除</fel-button>
            </div>`
          }
        }
      ],
      tableData: [],
      editData: {},
      offlineBox: "",
      roomidObj: {},
      agree: {
        codea: "5F4375683198",
        codeb: "372415847326",
        sector: "14"
      }
    };
  },
  methods: {
    ingetroomcard(roomid) {
      this.isSearch = false;
      this.$ajax(
        "/auth/cardcenter/offlineauth/saveofflineauth/9/getroomcard",
        { roomid: roomid },
        "1",
        {}
      )
        .then(res => {
          this.searchData = res.result || [];
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    ingetroomsecter() {
      let roomid = "";
      if (this.position && this.position.length > 0) {
        roomid = this.position[this.position.length - 1];
      }
      this.$ajax(
        "/auth/cardcenter/offlineauth/saveofflineauth/a/getroomsecter",
        { roomid: roomid },
        "1",
        {}
      )
        .then(res => {
          this.agree = res.result || {
            codea: "5F4375683198",
            codeb: "372415847326",
            sector: "14"
          };
        })
        .catch(err => {});
    },
    queryClick() {
      this.cardParam.search = "";
      this.cardData = [];
      if (this.position && this.position.length > 0) {
        let roomid = this.position[this.position.length - 1];
        this.ingetroomcard(roomid);
      } else {
        this.$message({
          message: "请先选择授权位置",
          type: "warning"
        });
      }
    },
    onInstall(is) {
      console.log("onInstall", is);
      this.isCardReader = !is;
    },
    onClickCardReader() {
      this.$refs["reading"].download();
    },
    ...mapGetters(["getNumber", "getIsClassify"]),
    changePsition() {
      this.ingetroomsecter();
      if (!this.isSearch) {
        this.queryClick();
      }
      if (this.position && this.position.length > 0) {
        this.isQuery = true;
      } else {
        this.isQuery = false;
      }
      // this.queryStay();
      // this.queryData = [];
    },
    clickHandler() {
      if (this.offlineBox == 1) {
        this.queryData.forEach(obj => {
          obj.authtype = "1";
        });
      } else if (this.offlineBox == 2) {
        this.queryData.forEach(obj => {
          obj.authtype = "0";
        });
      }
    },
    onReturn() {
      this.queryData = [];
      this.loading = false;
      this.stayData = [];
      this.stayParamObj = {
        build: [],
        card: [],
        roomid: ""
      };
      this.cardData = [];
      this.cardParam = {
        search: ""
      };
      // if (this.$refs["pagingStay"]) {
      //   this.$refs["pagingStay"].eliminate();
      // }
      this.$emit("onReturn");
    },
    inPosition() {
      this.positions = [];
      this.$ajax(
        "/auth/cardcenter/offlineauth/saveofflineauth/6/getbuildtree",
        {},
        "1",
        {},
        "",
        60000
      )
        .then(res => {
          let list = res.result;
          this.setFJObjData(list);
          if (this.getIsClassify()) {
            this.positions.push({
              agid: "w",
              agname: "按位置显示",
              children: list
            });
          } else {
            this.positions = list;
          }
        })
        .catch(err => {});
      if (this.getIsClassify()) {
        this.$ajax("/arearoom/public/6/listAreaRoomAllTree", {}, "9")
          .then(res => {
            let list = res.result;
            this.setClassifyData(list);
            this.positions.push({
              agid: "f",
              agname: "按分组显示",
              children: list
            });
          })
          .catch(err => {});
      }
    },
    setClassifyData(arr) {
      arr.forEach(obj => {
        obj.agid = obj.arid;
        obj.agname = obj.arname;
        if (obj.artype == 2) {
          obj.isroom = false;
        } else {
          obj.isroom = true;
          if (obj.children) {
            obj.isroom = false;
            this.setClassifyData(obj.children);
          }
        }
      });
    },
    setFJObjData(arr) {
      arr.forEach(obj => {
        this.roomidObj[obj.agfatherid] = this.roomidObj[obj.agfatherid] || [];
        this.roomidObj[obj.agid] = [
          ...this.roomidObj[obj.agfatherid],
          obj.agid
        ];
        if (obj.children) {
          this.setFJObjData(obj.children);
        } else {
          obj.isroom = !obj.isroom;
        }
      });
    },
    //查询授权列表数据
    queryStay() {
      // if (this.position.length > 0) {
      //   if (this.cardData.length > 0) {
      //     this.stayParamObj.card = this.cardData;
      //     this.stayParamObj.roomid = this.position[this.position.length - 1];
      //     this.stayRefresh = new Date().getTime();
      //   }
      // }
    },
    //搜索授权卡片
    cardInput(val) {
      this.isSearch = true;
      this.cardData = [];
      this.cardRefresh = new Date().getTime();
    },
    //确定授权卡片
    onSelect(data) {
      if (data && data.length > 0) {
        this.cardData = data;
        // this.queryStay();
      } else {
        // this.$refs["pagingStay"].eliminate();
      }
    },
    // 选择授权列表
    onSelection(data) {
      this.stayData = data;
    },
    // 开始动作
    startingClick(key) {
      if (this.cardData.length > 0) {
        this.offlineBox = "";
        this.queryData.push(
          ...this.cardData.map(obj => {
            obj.authtype = key;
            return obj;
          })
        );
        this.queryData = arrReduceRight(this.queryData, "cardcode");
        let dom = document.querySelector(".tobleList");
        if (dom) {
          let w = dom.offsetWidth;
          dom.style.width = w - 1 + "px";
          setTimeout(() => {
            dom.style.width = w + "px";
          }, 100);
        }
      } else {
        this.$message({
          message: "请先勾选授权卡片",
          type: "warning"
        });
      }
    },
    // 选择
    onTableSelection(data) {
      this.tableData = data;
    },
    // 修改
    confirm(data) {
      if (this.editData instanceof Array) {
        this.editData.forEach(obj => {
          Object.keys(data).forEach(key => {
            obj[key] = data[key];
          });
        });
      } else {
        Object.keys(data).forEach(key => {
          this.editData[key] = data[key];
        });
      }
      this.dialogEdit = false;
    },
    dukai() {
      let loadings = this.$loading({
        lock: true,
        text: "正在读取中...",
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.7)"
      });
      this.$refs["reading"].cardReading(
        {
          pwda: this.agree.codea,
          sector: this.agree.sector
        },
        data => {
          console.log("data", data);
          this.$ajax(
            "/auth/cardcenter/offlineauth/readofflineauth/2/readofflineauthnew",
            {},
            "1",
            data
          )
            .then(res => {
              this.$refs["reading"].setBeep();
              let authorders = res.result.authorders || [];
              this.queryData.push(...authorders);
              this.queryData = arrReduceRight(this.queryData, "cardcode");
              let roomid = res.result.roomid || "";
              if (roomid) {
                if (this.roomidObj[roomid]) {
                  this.position = this.roomidObj[roomid];
                } else {
                  this.position = [roomid];
                }
              } else {
                this.position = [];
              }
              loadings.close();
              this.$message({
                message: "读取卡片成功",
                type: "success"
              });
            })
            .catch(err => {
              loadings.close();
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] ` + err.resultMsg,
                type: "error"
              });
            });
        },
        err => {
          console.log("读取 err", err);
          loadings.close();
          this.$message({
            showClose: true,
            message: "读取卡片失败！原因：" + err,
            type: "error"
          });
        }
      );
    },
    inxrwccl(loadings, buildid, data, order, callback) {
      this.$ajax(
        "/auth/cardcenter/offlineauth/saveofflineauth/8/saveofflineauthbycard",
        {
          buildid: buildid
        },
        "1",
        data
      )
        .then(res => {
          if (callback) {
            callback();
          }
        })
        .catch(err => {
          console.log("清空数据", err);
          this.$refs["reading"].cardEmpty(order);
          loadings.close();
          this.$message({
            showClose: true,
            message:
              "写入卡片失败！原因：" + `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    inFflineauth(type) {
      let loadings = this.$loading({
        lock: true,
        text: "正在写入中...",
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.7)"
      });
      let data = this.tableData.map(o => {
        return {
          authtype: o.authtype,
          cardcode: o.cardcode,
          opencount: o.opencount || "",
          empedate: o.empedate || "",
          empsdate: o.empsdate || ""
        };
      });
      let url =
        "/auth/cardcenter/offlineauth/saveofflineauth/7/getofflineauthbycard";
      let position = this.position[this.position.length - 1];
      this.$ajax(
        url,
        {
          buildid: position
        },
        "1",
        data
      )
        .then(res => {
          let result = res.result;
          if (result.order1 && result.authorders) {
            let order = {
              pwda: result.codea || this.agree.codea, //密钥a
              pwdb: result.codeb || this.agree.codeb, //密钥b
              order0: result.order1, //扇区块0指令
              order2: result.order2, //扇区块2指令
              sector: result.sector || this.agree.sector //协议扇区
            };
            this.$refs["reading"].cardWrite(
              order,
              result.authorders,
              () => {
                this.inxrwccl(loadings, position, data, order, () => {
                  this.$refs["reading"].setBeep();
                  this.queryStay();
                  this.queryData = arrDelete(
                    this.queryData,
                    this.tableData,
                    "cardcode"
                  );
                  this.tableData = [];
                  loadings.close();
                  this.$message({
                    message: "写入卡片成功",
                    type: "success"
                  });
                });
              },
              err => {
                console.log("写入 err", err);
                loadings.close();
                this.$message({
                  showClose: true,
                  message: "写入卡片失败！原因：" + err,
                  type: "error"
                });
              }
            );
          } else {
            loadings.close();
            this.$message({
              showClose: true,
              message: "没有接收到指令",
              type: "error"
            });
          }
        })
        .catch(err => {
          console.log("gb");
          loadings.close();
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    xieka(type) {
      if (this.position && this.position.length > 0) {
        if (this.tableData && this.tableData.length > 0) {
          if (type == 1) {
            this.editData = this.tableData;
            this.dialogEdit = true;
            this.defaultData = {
              edate: ""
            };
          } else if (type == 2 || type == 3) {
            if (this.tableData.length <= this.sectorsLeng) {
              let text = "是否把授权写入离线授权卡中？";
              if (type == 2) {
                text = "该操作会把锁内原有授权清空，是否确认！！";
              }
              this.$confirmCon(text, () => {
                this.inFflineauth(type);
              });
            } else {
              this.$message({
                showClose: true,
                message: `最多写入${this.sectorsLeng}个授权`,
                type: "error"
              });
            }
          }
        } else {
          this.$message({
            message: "请先选择",
            type: "warning"
          });
        }
      } else {
        this.$message({
          message: "请先选择授权位置",
          type: "warning"
        });
      }
    },
    onClick(key, data) {
      if (key == 0) {
        if (Boolean(this.queryData.length > 0)) {
          this.tableData = [];
          this.queryData = [];
        }
      } else if (key == "2") {
        this.xieka(1);
      } else if (key == "400") {
        //读取卡内信息
        this.dukai();
      } else if (key == "401") {
        // 写入添加
        this.xieka(3);
      } else if (key == "471") {
        //写入并清空原有
        this.xieka(2);
      }
    }
  }
};
</script>
