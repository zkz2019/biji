<template>
  <el-container>
    <batch v-if="isBatch" :buts="batchButs" ref="batch" @onReturn="isBatch = false"></batch>
    <fel-container v-else title="批量授权门禁" @onQuery="onQuery" @onReset="onReset">
      <template slot="retrieve">
        <fel-retrie text="请输入" v-model="param.search" :placeholder="'输入'+getNumber()+'/姓名检索'"></fel-retrie>
      </template>
      <paging-table
        interface="/access/v2.0/auth/g/listAccessAuthFace"
        class="heig100"
        :param="param"
        :list="list"
        ajaxType="9"
        :refresh="refresh"
      >
        <span class="sli but-blue" @click="onClick">
          <i class="ficon-image403"></i>
          批量授权人脸数据
        </span>
      </paging-table>
      <fel-popup width="80%" title="授权列表" @close="grant.box=false" :value="grant.box">
        <paging-table
          ref="person-paging-table"
          :list="grant.list"
          interface="/access/v2.0/auth/h/listAccessAuthFaceDetails"
          :param="grant.param"
          ajaxType="9"
          :refresh="grant.refresh"
        >
          <span
            v-for="(v,k) of grant.topButs"
            :key="k"
            class="sli but-blue"
            @click="onClick(v.id, v)"
          >
            <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
            {{v.alias}}
          </span>
        </paging-table>
      </fel-popup>
    </fel-container>
  </el-container>
</template>

<script>
import { mapGetters } from "vuex";
import batch from "./batch";
export default {
  components: {
    batch
  },
  data() {
    let $this = this;
    return {
      batchButs: [
        {
          id: 0,
          alias: "清空",
          icon: "empty"
        },
        {
          id: 2,
          alias: "修改",
          icon: "image30"
        }
      ],
      grant: {
        box: false,
        topButs: [],
        param: { authid: "" },
        list: [
          {
            name: "序号",
            type: "$index",
            width: "60px"
          },
          {
            name: "门禁位置",
            prop: "aglocation"
          },
          {
            name: "门禁名称",
            prop: "amname"
          },
          {
            name: "门名称",
            prop: "adname"
          },
          {
            name: "读头编号",
            prop: "ahname"
          },
          {
            name: "姓名",
            prop: "personname"
          },
          {
            minWidth: "90px",
            name: this.getNumber(),
            prop: "personcode"
          },
          {
            minWidth: "110px",
            name: "授权开始时间",
            prop: "aafldsdate"
          },
          {
            minWidth: "110px",
            name: "授权结束时间",
            prop: "aafldedate"
          },
          {
            minWidth: "92px",
            name: "可开门次数",
            prop: "aafldusecount"
          },
          {
            minWidth: "92px",
            name: "可用时间段",
            prop: "opentime",
            formatter(a, b, c) {
              return a.aafldopenstime + "~" + a.aafldopenetime;
            }
          },
          {
            name: "授权状态",
            prop: "aafldstatus"
          },
          {
            name: "下发状态",
            prop: "aafldstate"
          },
          {
            name: "失败原因",
            prop: "aafldremark"
          }
        ],
        refresh: 0
      },
      isBatch: false,
      param: { search: "" },
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "创建时间",
          prop: "aaflcdate"
        },

        {
          name: "授权下发时间",
          prop: "aafldate"
        },
        {
          name: "下发方式",
          prop: "aafltype",
          formatter(a) {
            let map = {
              1: "立即下发",
              2: "延时下发"
            };
            return map[a.aafltype];
          }
        },
        // {
        //   name: "授权类型",
        //   prop: "personlocation",
        //   width: "110px"
        // },
        {
          name: "授权总数",
          prop: "aaflcount",
          custom: "num",
          formatter(obj) {
            let num = obj.row.aaflcount;
            if (num) {
              return /^[0-9]*$/.test(num);
            }
            return false;
          },
          click(obj, value) {
            $this.grant.param.authid = obj.row.aaflid;
            $this.onGrantRefresh();
            $this.grant.box = true;
          }
        },
        {
          name: "授权成功数",
          prop: "aaclokcount",
          width: "110px"
        },
        {
          name: "授权失败数",
          prop: "aaflnocount",
          width: "110px"
        },
        {
          name: "指令成功数",
          prop: "aaflordernocount",
          width: "110px"
        },
        {
          name: "指令失败数",
          prop: "aaflorderokcount",
          width: "110px"
        },
        {
          name: "操作人账号",
          prop: "userlogin",
          width: "110px"
        },
        {
          name: "操作人姓名",
          prop: "username",
          width: "110px"
        }
      ],
      refresh: 0,
      sonmenu: 0
    };
  },
  created() {
    this.inGetsonmenu();
  },
  methods: {
    ...mapGetters(["getNumber"]),
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", {
        fatherid: "868"
      })
        .then(res => {
          this.sonmenu = 4;
          res.result.forEach(value => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "870") {
              this.grant.topButs.push(value.entity);
            } else if (id == "869") {
              value.entity.alias = "立即下发授权";
              this.batchButs.push(value.entity);
              this.batchButs.push({
                id: "8691",
                alias: "延时下发授权",
                icon: value.entity.icon
              });
            }
          });
        })
        .catch(err => {
          console.log("err", err);
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onEjectChange() {},
    onGrantRefresh() {
      this.grant.refresh = new Date().getTime();
    },
    onClick(key) {
      if (key == 870) {
        this.$ajax(
          "/access/v2.0/auth/i/reloadAccessAuthFace",
          {
            authid: this.grant.param.authid
          },
          "9",
          {},
          true
        )
          .then(res => {
            this.$message({
              message: "重载未生效授权已下发",
              type: "success"
            });
            this.onGrantRefresh();
          })
          .catch(err => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      } else {
        this.isBatch = true;
      }
    },
    onQuery() {
      this.refresh = new Date().getTime();
    },
    onReset() {
      this.param.search = "";
      this.onQuery();
    }
  }
};
</script>

<style>
</style>