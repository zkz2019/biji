<!-- 楼层效果弹出框 -->
<template>
  <div class="effect-layer">
    <div class="room—const">
      <div class="header">
        <div v-if="buildinfo.ismanager == 1" class="roomBox_buts">
          <el-button @click="onReverse(1)" icon="ficon-diandou" type="text" size="small">颠倒顺序</el-button>
        </div>
        <h3
          class="name"
        >{{buildinfo.buildlocation||'建筑'}}-{{buildinfo.buildname}}(区域编号{{buildinfo.buildcode||'0'}})</h3>
      </div>
      <div class="roomBox">
        <div class="roomBox_list" :key="key">
          <!-- <el-input v-model="value3"></el-input> -->
          <div v-for="(obj, key) of list" :key="key">
            <div class="roomBox_title">
              <div></div>
              <div>
                <h3>{{obj.buildname}}</h3>
              </div>
              <div>
                <img src="../../assets/image/list-fjgl.png" alt />
              </div>
            </div>
          </div>
          <div v-if="list.length == 0 && isLoad" class="listNull">暂无楼层</div>
        </div>
      </div>
    </div>
    <div class="room_buts" v-if="!isAdjust">
      <el-button size="small" @click="onAdjustment(0)">取消</el-button>
      <el-button size="small" type="primary" @click="onAdjustment(2)">确定</el-button>
    </div>
  </div>
</template>

<script>
import Sortable from "sortablejs";
export default {
  name: "effect-layer",
  props: {
    buildinfo: Object,
    dialogVisible: Boolean
  },
  data() {
    return {
      isLoad: false,
      key: 0,
      list: [],
      array: [],
      sorta: null
    };
  },
  created() {
    this.getroomlayout();
  },
  mounted: function() {
    this.setSortable();
  },
  methods: {
    onAdjustment(key) {
      if (key == 0) {
        // this.setLiData();
        this.$emit("beforeClose");
      } else if (key == 2) {
        this.$confirm("是否确定把楼层当前的位置?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {})
          .catch(err => {});
      }
    },
    getroomlayout() {
      this.isLoad = false;
      if (this.buildinfo && this.buildinfo.buildtype == 2) {
        this.$ajax("/system/build/1/getbuild", {}, "1", this.buildinfo)
          .then(res => {
            this.list = res.result || [];
            this.array = [...this.list];
            this.isLoad = true;
          })
          .catch(err => {});
      }
    },
    onReverse(key) {
      if (key == 1 && this.array.length > 1) {
        if (this.sorta) {
          this.sorta.destroy();
          this.sorta = null;
        }
        this.array.reverse();
        this.list = this.array;
        this.array = [...this.list];
        this.key = new Date().getTime();
        setTimeout(() => {
          this.setSortable();
        }, 0);
      }
    },
    setSortable() {
      if (this.sorta) {
        this.sorta.destroy();
        this.sorta = null;
      }
      var _this = this;
      var $ul = this.$el.querySelector(".roomBox .roomBox_list");
      this.sorta = new Sortable($ul, {
        ghostClass: "blue-background-class",
        onUpdate: function(event) {
          var newIndex = event.newIndex - 1,
            oldIndex = event.oldIndex - 1;
          var item = _this.array.splice(oldIndex, 1);
          _this.array.splice(newIndex, 0, item[0]);
          // 下一个tick就会走patch更新
        },
        animation: 150
      });
    }
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.getroomlayout();
      }
    }
  }
};
</script>
<style lang='scss'>
.effect-layer {
  .room_buts {
    margin-top: 10px;
    border-top: 1px solid #ccc;
    padding-top: 16px;
    text-align: right;
    .el-button {
      margin-left: 20px;
    }
  }
  .room—const {
    margin: 0 10% 25px;
  }
  .header {
    width: 100%;
    height: 80px;
    background: url("../../assets/image/wuding.png") no-repeat;
    background-size: 100% 102%;
    display: flex;
    flex-direction: column;
    padding: 0;
    position: relative;
    .roomBox_buts {
      position: absolute;
      top: 0;
      right: 0;
      .el-button {
        margin-left: 20px;
      }
    }
    .name {
      flex: 1;
      font-size: 16px;
      line-height: 90px;
      padding-top: 14px;
      margin: 0 auto;
      text-align: center;
    }
  }
  .roomBox {
    padding: 1px;
    overflow-y: auto;
    .roomBox_list {
      margin: -1px 0;
    }
  }
}
</style>