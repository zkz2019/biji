<!-- 门禁 -->
<template>
  <el-container>
    <fel-left-tree leftTitle="建筑列表" class="mj809">
      <div slot="left" class="left-tree">
        <fel-tree1
          :showCheckbox="false"
          class="tree1"
          :idArr="[0]"
          :refresh="refreshTree"
          ajaxType="9"
          :param="{agfatherid:''}"
          iconName="agtype"
          paramKey="agfatherid"
          nodeKey="agid"
          :defaultProps="{
          children: 'children',
          label: 'agname',
          isLeaf: 'isLeaf'}"
          interface="/access/v2.0/main/1/listAreaTree"
          @handleNodeClick="handleNodeClick"
        ></fel-tree1>
      </div>
      <el-container>
        <el-header class="query_headbox">
          <com-title>{{toParam.alias}}</com-title>
          <retrieval class="query_head">
            <inpbox :inpb="true">
              <el-select v-model="param.amstate" class="con-select qh_inp">
                <el-option
                  v-for="item in amstates"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </inpbox>
            <inpbox :inpb="true">
              <el-select v-model="param.amtype" class="con-select qh_inp">
                <el-option
                  v-for="item in amtypes"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </inpbox>
            <inpbox :inpb="true">
              <el-select v-model="param.ahstate" class="con-select qh_inp">
                <el-option
                  v-for="item in ahstates"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </inpbox>
            <inpbox :inpb="true">
              <el-input
                class="con-search qh_inp"
                clearable
                v-model="param.search"
                :placeholder="'输入门禁名称/ID查询'"
              ></el-input>
            </inpbox>

            <inpbox>
              <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
              <fel-button class="qh_btn" @click="onReset">重置</fel-button>
            </inpbox>
          </retrieval>
        </el-header>
        <el-main class="query_main">
          <paging-table
            class="tobleList"
            height="100%"
            noInit
            ref="paging-table"
            :isAll="range == 2? true:false"
            :class="{'cover-up':range == 2}"
            interface="/access/v2.0/main/3/listAccessMain"
            :list="list"
            @onSelection="onSelection"
            :refresh="refresh"
            :refreshTable="refreshTable"
            :param="param"
            ajaxType="9"
            @onEjectChange="onEjectChange"
          >
            <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
              <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
              {{v.alias}}
            </span>
            <template v-if="quantitytypes && quantitytypes.length > 0">
              <div class="full-list" v-show="!list[0].show">
                <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
              </div>
              <batch-but
                class="sli but-blue"
                :type="range"
                :list="listArr"
                :param="quantitytypes"
                @onClick="inSavegatewayorder"
              ></batch-but>
            </template>
          </paging-table>
        </el-main>
      </el-container>
    </fel-left-tree>
    <!-- <modifyAccessControl
      @onRefresh="onRefresh"
      :param="modifyParam"
      :paramObj="modifyParamObj"
      @beforeClose="dialogModify=false"
      :dialogVisible="dialogModify"
    ></modifyAccessControl>-->
    <addAccessControl
      :dialogVisible="dialogVisibleAdd"
      :defaultData="defaultDataAdd"
      :param="paramObj"
      :isAdd="isAdd"
      @beforeClose="beforeCloseAdd"
    ></addAccessControl>
    <readHeadDetails
      :dialogVisible="dialogVisibleRead"
      :paramObj="paramObjRead"
      :param="paramRead"
      @beforeClose="beforeCloseRead"
    ></readHeadDetails>
    <configureInfo
      :param="paramConfig"
      :dialogVisible="dialogVisibleInfo"
      @beforeClose="beforeCloseInfo"
    ></configureInfo>
    <queryMj :param="paramMj" :dialogVisible="dialogVisibleMj" @beforeClose="beforeClosemj"></queryMj>
    <cfjc @beforeClose="dialogCfjc=false" :dialogVisible="dialogCfjc"></cfjc>
  </el-container>
</template>

<script>
import cfjc from "./../wggl307/cfjc";
import Storages from "../../../utils/Storage.js"; //缓存工具
import axios from "axios";
import readHeadDetails from "./readHeadDetails";
// import infoAccessControl from "./infoAccessControl";
import configureInfo from "./configureInfo";
import queryMj from "./queryMj";
// import modifyAccessControl from "./modifyAccessControl";
// import replaceAccessControl from "./replaceAccessControl";
import addAccessControl from "./addAccessControl";
export default {
  components: {
    // modifyAccessControl,
    // infoAccessControl,
    // replaceAccessControl,
    addAccessControl,
    configureInfo,
    queryMj,
    readHeadDetails,
    cfjc,
  },
  props: {
    toParam: Object,
  },
  data() {
    let $this = this;
    return {
      dialogCfjc: false,
      isAdd: true,
      checkClear: 0,
      dialogVisibleMj: false,
      dialogVisibleInfo: false,
      dialogVisibleRead: false,
      dialogVisibleAdd: false,
      defaultDataAdd: {},
      // paramAdd: {},
      paramConfig: {},
      paramObjRead: {},
      paramRead: {},
      paramMj: {},
      ahstates: [],
      amtypes: [],
      amstates: [],
      // modifyParamObj: [],
      refreshTree: 0,
      topButs: [],
      // dialogGuideFile: false,
      // modifyParam: {},
      // dialogQuery: false,
      // dialogModify: false,
      range: "1",
      queryParam: {
        sendtype: "勾选范围",
        // gotype2: ""
      },
      quantitytypes: [],
      refresh: 0,
      refreshTable: 0,
      param: {
        search: "",
        ahstate: "",
        amtype: "",
        amstate: "",
      },
      paramObj: {},
      isSelectable: true,
      list: [
        {
          type: "selection",
          // selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "位置",
          prop: "aglocation",
        },
        {
          name: "门禁类型",
          width: "80px",
          prop: "amtype",
        },
        {
          name: "门禁名称",
          prop: "amname",
        },
        {
          name: "门禁唯一ID",
          prop: "amcode",
        },
        {
          name: "IP地址",
          prop: "amip",
          template: {
            props: ["scope"],
            methods: {
              topath(path) {
                let topath = "http://" + path;
                window.open(topath);
              },
            },
            template: `
            <div>
             <el-button type="text" size="small" @click.stop="topath(scope.row.amip)">{{scope.row.amip}}</el-button>
            </div>`,
          },
        },
        {
          name: "MAC地址",
          show: true,
          prop: "gatewaymac",
        },
        {
          name: "正常读头",
          prop: "zxcount",
          width: "80px",
          template: {
            props: ["scope"],
            methods: {
              onClick() {
                if (this.scope.row.zxcount > 0) {
                  $this.paramObjRead = this.scope.row;
                  $this.paramRead = { ahstate: 1 };
                  $this.dialogVisibleRead = true;
                }
              },
            },
            template: `
            <div>
              <span><a class="a-click" @click.stop="onClick">{{scope.row.zxcount}}</a></span>
            </div>
            `,
            // <fel-button type="text" @click="onClick">{{scope.row.zxcount}}</fel-button>
          },
        },
        {
          name: "异常读头",
          width: "80px",
          template: {
            props: ["scope"],
            methods: {
              onClick() {
                if (this.scope.row.lxcount > 0) {
                  $this.paramObjRead = this.scope.row;
                  $this.paramRead = { ahstate: 0 };
                  $this.dialogVisibleRead = true;
                }
              },
            },
            template: `
            <div>
              <span><a class="a-click" @click.stop="onClick">{{scope.row.lxcount}}</a></span>
            </div>
            `,
            // <fel-button type="text" @click="onClick">{{scope.row.lxcount}}</fel-button>
          },
        },
        {
          name: "门禁状态",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.amstate;
                if (value == "在线") {
                  return "puc-pg";
                } else if (value == "离线") {
                  return "puc-px";
                } else {
                  return "";
                }
              },
            },
            template: `<span :class='getClass()'>{{scope.row.amstate}}</span>`,
          },
        },
        {
          name: "操作",
          width: "130px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              },
            },
            methods: {
              onClick(key, obj) {
                if (key == "1") {
                  $this.onReplace(this.scope.row);
                } else if (key == "2") {
                  $this.modify(this.scope.row);
                } else if (key == "3") {
                  // $this.onInfo(this.scope.row);
                } else {
                  $this.delete(this.scope.row);
                }
              },
            },
            template: `<div class="operat-buts"> 
             <el-button :disabled="scope.row.amstate=='未安装'&&v.name=='配置'" v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.type,v)">{{v.name}}</el-button>
            </div>`,
          },
        },
      ],
      listBut: [],
      listArr: [],
      sonmenu: 0,
    };
  },
  created() {
    this.inGetsonmenu();
    this.getType();
  },
  mounted() {
    this.getEject();
  },
  methods: {
    getType() {
      this.$ajax("/access/v2.0/main/2/getAccessMainState", {}, "9")
        .then((res) => {
          this.ahstates = res.result.ahstates;
          this.amstates = res.result.amstates;
          this.amtypes = res.result.amtypes;
        })
        .catch((err) => {
          console.log("err", err);
        });
    },
    beforeCloseInfo() {
      this.dialogVisibleInfo = false;
    },
    beforeCloseRead() {
      this.dialogVisibleRead = false;
    },
    beforeClosemj() {
      this.dialogVisibleMj = false;
    },
    // 更改
    onReplace(data) {
      this.isAdd = false;
      let oldAmcode = { oldAmcode: data.amcode, amid: data.amid };
      let obj = {};
      this.$ajax(
        "/access/v2.0/main/6/getUpdateAccessMain",
        { amid: data.amid },
        "9"
      )
        .then((res) => {
          obj = res.result;
          // this.agid.agid = res.result.agid;
          // this.defaultData = res.result;
          this.defaultDataAdd = Object.assign(obj, oldAmcode);
          delete this.defaultDataAdd.amcode;
          this.dialogVisibleAdd = true;
        })
        .catch((err) => {
          console.log("err", err);
        });
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach((key) => {
        if (key != "agid") {
          this.param[key] = "";
        }
      });
      this.onRefresh();
      this.isSelectable = true;
      this.range = "1";
    },
    onSelection(data) {
      this.listArr = data;
    },
    onClick(key, data) {
      if (key == 466) {
        // this.dialogGuideFile = true;
      } else if (key == 353) {
        // this.dialogQuery = true;
      } else if (key == 811) {
        this.isAdd = true;
        this.dialogVisibleAdd = true;
      } else if (key == 820) {
        this.dialogVisibleMj = true;
      } else if (key == 984) {
        this.dialogCfjc = true;
      }
    },
    inSavegatewayorder(id, obj) {
      let lotisdel = 0;
      let bool = id == 900 || id == 901 || id == 902;
      let text;
      if (id == 900) {
        text = "卡密";
      } else if (id == 901) {
        text = "指纹";
      } else if (id == 902) {
        text = "人脸";
      }
      const h = this.$createElement;
      let that = this;
      if (bool) {
        this.$confirm(
          h("div", {}, [
            h(
              "label",
              {
                style: { display: "block", fontFamily: "Tahoma" },
              },
              [
                h("input", {
                  domProps: {
                    type: "radio",
                    value: 0,
                    name: "clear",
                    checked: "checked",
                  },
                  style: {
                    display: "inline-block",
                    width: "14px",
                    height: "14px",
                    margin: "10px",
                    verticalAlign: "-2px",
                  },
                  on: {
                    change: function (e) {
                      that.checkClear = +e.target.value;
                    },
                  },
                }),
                h("span", "设备本地授权"),
              ]
            ),
            h("label", {}, [
              h("input", {
                domProps: {
                  type: "radio",
                  value: 1,
                  name: "clear",
                },
                style: {
                  display: "inline-block",
                  width: "14px",
                  height: "14px",
                  verticalAlign: "-2px",
                  margin: "10px",
                },
                on: {
                  change: function (e) {
                    that.checkClear = +e.target.value;
                  },
                },
              }),
              h("span", "设备本地授权,服务器授权"),
            ]),
          ]),
          "请选择需要清除的授权储存位置",
          {
            distinguishCancelAndClose: true,
            confirmButtonText: "确定",
            cancelButtonText: "取消",
          }
        )
          .then(() => {
            lotisdel = that.checkClear;
            this.inSave(id, obj, lotisdel, text);
          })
          .catch((action) => {
            return;
          });
      } else {
        this.inSave(id, obj, lotisdel, null);
      }
    },
    inSave(id, obj, lotisdel, text) {
      console.log("id,lotisdel", id, lotisdel);
      setTimeout(() => {
        this.$confirm(
          text
            ? "此操作将清除该设备" +
                (lotisdel == 1 ? "本地的" : "本地以及服务器的") +
                text +
                "授权,确认清除吗?"
            : "确定要进行" + obj.alias + "吗?",
          "提示",
          {
            confirmButtonText: "确定",
            cancelButtonText: "取消",
            type: "warning",
          }
        ).then(() => {
          this.queryParam.sendtype = this.range == 2 ? 2 : 1;
          if (
            this.queryParam.sendtype == 1 &&
            (!this.listArr || this.listArr.length == 0)
          ) {
            this.$message({
              message: "请先选择要发指令的门锁",
              type: "warning",
            });
          } else {
            let type;
            switch (id) {
              case 822:
                type = 4;
                break;

              case 823:
                type = 5;
                break;

              case 899: //门锁复位
                type = 13;
                break;

              case 900: //卡密清除
                type = 9;
                break;

              case 901: //指纹清除
                type = 10;
                break;

              case 902: //人脸清除
                type = 11;
                break;
            }
            let data = {
              agid: this.param.agid,
              amids: this.listArr.map((o) => o.amid),
              lottype: this.queryParam.sendtype,
              ordertype: type, //id == 822 ? 4 : 5
              lotisdel,
            };
            // if (bool) {
            //   data.lotisdel = lotisdel;
            // }
            this.$ajax(
              "/access/v2.0/main/o/saveLotAccessMainOrder",
              data,
              "9",
              {},
              true
            )
              .then((res) => {
                this.$message({
                  message: obj.alias + "成功!",
                  type: "success",
                });
                this.checkClear = 0;
                this.onRefreshTable();
              })
              .catch((err) => {
                this.checkClear = 0;
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error",
                });
              });
          }
        });
      }, 100);
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then((res) => {
          res.result.forEach((value) => {
            let obj = value.entity;
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == 812) {
              this.listBut.push({
                type: "1",
                name: "更换",
              });
            } else if (id == 813) {
              this.listBut.push({
                type: "2",
                name: "配置",
              });
            } else if (id == 819) {
              this.listBut.push({
                type: "4",
                name: "删除",
              });
              // this.quantitytypes.push(obj);
            } else if (id == 811) {
              this.topButs.push(obj);
            } else if (id == 820) {
              this.topButs.push(obj);
            } else if (id == 821) {
              let batchObj = value.childs;
              batchObj.forEach((item) => {
                let id = item.entity.id;
                if (
                  id == 822 ||
                  id == 823 ||
                  id == 899 ||
                  id == 900 ||
                  id == 901 ||
                  id == 902
                ) {
                  this.quantitytypes.push(item.entity);
                }
              });
            } else if (id == "984") {
              this.topButs.push(value.entity);
            }
          });
          this.sonmenu = 4;
        })
        .catch((err) => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    delete(arr) {
      let data = Object.assign({ sendtype: "勾选范围" }, this.param);
      this.$confirm("此操作将删除当前设备, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning",
      })
        .then(() => {
          this.$ajax(
            "/access/v2.0/main/m/deleteAccessMain",
            { amid: arr.amid },
            "9",
            {},
            true
          )
            .then((res) => {
              this.$message({
                message: "删除成功",
                type: "success",
              });
              this.onRefreshTable();
            })
            .catch((err) => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] ` + err.resultMsg,
                type: "error",
              });
            });
        })
        .catch((err) => {});
    },
    modify(data) {
      this.paramConfig = data;
      this.dialogVisibleInfo = true;
      // this.modifyParam = data;
      // this.dialogModify = true;
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onRefreshTable() {
      this.refreshTable = new Date().getTime();
    },
    handleNodeClick(data, obj) {
      let k = this.setkey(obj, [data.agid], [data.agname]);
      // this.paramObj = data;
      this.param.agid = data.agid;
      this.onRefresh();
    },
    setkey(obj, arr, arr2) {
      if (obj && obj.parent && !Array.isArray(obj.parent.data)) {
        arr.push(obj.parent.data.agid);
        arr2.push(obj.parent.data.agname);
        this.setkey(obj.parent, arr, arr2);
      } else {
        arr.reverse();
        arr2.reverse();
        this.paramObj.buildidArr = arr;
        this.paramObj.buildnameArr = arr2;
        return;
      }
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    beforeCloseAdd(bool) {
      if (bool) {
        this.onRefreshTable();
      }
      this.dialogVisibleAdd = false;
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "mj584");
    },
    getEject() {
      this.$common.getEject(this, "list", "mj584");
    },
  },
};
</script>
