<!-- 添加卡片 修改卡片授权 -->
<template>
  <el-dialog
    title="添加授权"
    width="60%"
    :close-on-click-modal="false"
    append-to-body
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <fel-form
      class="kinguserAdd"
      ref="felForm"
      :selects="selects"
      @submitForm="submitForm"
      @closeForm="beforeClose"
      width="140px"
      dynamic
      :defaultData="defaultFormData"
      :formData="formData"
    >
      <div slot="top" class="form-header">
        <span>请输入</span>
        <el-input
          class="wid300 maR10 qh_inp"
          clearable
          @clear="cardInput"
          v-model="search"
          :placeholder="'请输入身份证号/'+getNumber()+'/姓名搜索'"
        >
          <i slot="prefix" class="el-input__icon el-icon-search"></i>
        </el-input>
        <fel-button size="small" class="fh_btn" type="primary" @click="cardInput">查询</fel-button>
        <div class="card-query">
          <paging-table
            ref="paging-table"
            v-show="cardShow"
            noInit
            noOpera
            interface="/lock/operate/info/k/getperson"
            class="card-paging"
            @onSelect="onSelect"
            layout="total, prev, pager, next"
            :refresh="cardRefresh"
            :param="cardParam"
            :list="cardList"
          />
        </div>
      </div>
    </fel-form>
    <cardReading :close="dialogVisible" @resultdata="resultdata"/>
  </el-dialog>
</template>

<script>
import { mapGetters } from "vuex";
import { format } from "@/utils/utils.js";
import cardReading from "../../kwgl/cardReading";
export default {
  components: {
    cardReading
  },

  props: {
    checkedroom: Object,
    defaultData: {
      type: Object,
      default() {
        return {};
      }
    },
    dialogVisible: Boolean
  },
  data() {
    let $this = this;
    return {
      selectedData: {},
      selects: {
        cardcode: []
      },
      isselect: {},
      options: [],
      value: "",
      search: "",
      cardRefresh: 0,
      cardShow: false,
      cardList: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },
        {
          name: "组织",
          prop: "personlocation"
        },
        {
          name: "电话",
          prop: "personmobile"
        }
      ],
      loading: false,
      defaultFormData: {},
      formData: [
        {
          width: "50%",
          value: "personname",
          name: "姓名",
          type: "text",
          disabled: true
        },
        {
          width: "50%",
          value: "personcode",
          name: this.getNumber(),
          type: "text",
          disabled: true
        },
        {
          width: "50%",
          value: "personlocation",
          name: "组织",
          type: "text",
          disabled: true
        },
        {
          width: "50%",
          value: "personmobile",
          name: "电话",
          type: "text",
          disabled: true
        },
        {
          class: "hide",
          noShow: true,
          width: "50%",
          value: "issendcard",
          name: "卡片",
          type: "text",
          readonly: true,
          onChange: this.onChangeCard,
          select: [
            { value: "1", label: "下发" },
            { value: "0", label: "不下发" }
          ],
          placeholder: "",
          rules: []
        },
        {
          class: "hide",
          noShow: true,
          width: "50%",
          value: "cardcode",
          name: "卡号",
          type: "text",
          readonly: true,
          select: "cardcode",
          svalue: "",
          slabel: "",
          placeholder: "",
          rules: []
        },

        {
          class: "hide",
          noShow: true,
          width: "50%",
          value: "issendfinger",
          name: "指纹",
          type: "text",
          readonly: true,
          select: [
            { value: "1", label: "下发" },
            { value: "0", label: "不下发" }
          ],
          placeholder: "",
          rules: []
        },
        {
          class: "hide",
          noShow: false,
          width: "50%",
          value: "issendapp",
          name: "app",
          type: "text",
          readonly: true,
          onChange: this.onChangeApp,
          select: [
            { value: "1", label: "下发" },
            { value: "0", label: "不下发" }
          ],
          placeholder: "",
          rules: []
        },
        {
          class: "hide",
          noShow: true,
          display: "block",
          width: "50%",
          value: "issendpass",
          name: "密码",
          type: "text",
          readonly: true,
          onChange: this.onChangePwd,
          select: [
            { value: "1", label: "下发" },
            { value: "0", label: "不下发" }
          ],
          placeholder: "",
          rules: []
        },
        {
          class: "hide",
          noShow: true,
          value: "password", //值,
          name: "密码", //名称,
          placeholder: "请输入密码",
          type: "password", //input输入框的类型 或者 select,
          width: "50%",
          rules: [
            {
              validator: (rule, value, callback) => {
                let password = $this.$refs.felForm.ruleForm.password2;
                if (!value && value !== 0) {
                  if (password) {
                    callback(new Error("请输入密码"));
                  } else {
                    callback();
                    $this.$refs.felForm.validateField("password2");
                  }
                } else if (password) {
                  callback();
                  $this.$refs.felForm.validateField("password2");
                } else {
                  callback();
                  $this.$refs.felForm.validateField("password2");
                }
              },
              trigger: "blur"
            },
            {
              required: true,
              message: "请输入密码",
              trigger: "blur"
            }
          ] //表格校验 Array
        },
        {
          class: "hide",
          noShow: true,
          value: "password2", //值,
          name: "确认密码", //名称,
          placeholder: "请输入确认密码",
          type: "password", //input输入框的类型 或者 select,
          width: "50%",
          rules: [
            {
              validator: (rule, value, callback) => {
                let password = $this.$refs.felForm.ruleForm.password;
                if (!value && value !== 0) {
                  if (password) {
                    callback(new Error("请输入确认密码"));
                  } else {
                    callback();
                  }
                } else if (password && password != value) {
                  callback(new Error("与密码不一致!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            },
            {
              required: true,
              message: "请输入确认密码",
              trigger: "blur"
            }
          ] //表格校验 Array
        },

        {
          // class: "hide",
          noShow: false,
          width: "50%",
          value: "ismanager",
          name: "是否为管理权限",
          type: "select",
          readonly: false,
          select: [{ value: "1", label: "是" }, { value: "0", label: "否" }],
          rules: []
        },
        {
          // class: "hide",
          noShow: false,
          width: "50%",
          value: "isaddfingerentry",
          name: "app录入指纹权限",
          type: "select",
          readonly: false,
          select: [{ value: "1", label: "是" }, { value: "0", label: "否" }],
          rules: []
        },
        {
          width: "50%",
          value: "empsdate",
          name: "授权开始日期",
          type: "date",
          date: "datetime",
          placeholder: "长期",
          format: "yyyy-MM-dd HH:mm:ss"
        },
        {
          width: "50%",
          value: "empedate",
          name: "授权结束日期",
          type: "date",
          date: "datetime",
          placeholder: "长期",
          format: "yyyy-MM-dd HH:mm:ss"
        },
        {
          width: "50%",
          value: "openstime",
          name: "每日授权开始时间",
          type: "time",
          format: "HH:mm",
          rules: [
            {
              required: true,
              message: "请选择每日授权开始时间",
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "openetime",
          name: "每日授权结束时间",
          type: "time",
          format: "HH:mm",
          rules: [
            {
              required: true,
              message: "请选择每日授权结束时间",
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "opencount",
          name: "开门使用次数",
          maxlength: 4,
          placeholder: "不限",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (value) {
                  if (/^[0-9]+$/.test(value)) {
                    if (value < 0 || value > 254) {
                      callback(new Error("输入的值在1~254之间"));
                    } else {
                      callback();
                    }
                  } else {
                    callback(new Error("使用次数必须是正整数"));
                  }
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        }
      ]
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        if (this.checkedroom.iscardlock == 1) {
          this.formData[4].noShow = false;
          this.formData[5].noShow = false;
          this.formData[4].readonly = true;
          this.formData[4].type = "text";
          this.formData[4].placeholder = "";
          this.formData[5].readonly = true;
          this.formData[5].type = "text";
          this.formData[5].placeholder = "";
        }
        if (this.checkedroom.isfingerlock == 1) {
          this.formData[6].noShow = false;
          this.formData[6].readonly = true;
          this.formData[6].type = "text";
          this.formData[6].placeholder = "";
        }
        if (this.checkedroom.ispasslock == 1) {
          this.formData[8].noShow = false;
          this.formData[8].readonly = true;
          this.formData[8].type = "text";
          this.formData[8].placeholder = "";
        }
      }
    }
  },
  created() {
    this.$ajax("/lock/b/getdefaultauth", {}, "1")
      .then(res => {
        this.isselect = res.result;
      })
      .catch(err => {
        console.log("err", err);
      });
  },
  computed: {
    cardParam() {
      return {
        roomid: this.checkedroom.roomid,
        search: this.search
      };
    }
  },
  methods: {
    ...mapGetters(["getNumber"]),

    onSearch() {
      let obj = this.selectedData;
      let is = true;
      if (obj.iscard == 1) {
        this.formData[4].readonly = false;
        this.formData[4].type = "select";
        this.formData[4].placeholder = "请选择是否下发";
        this.$refs.felForm.rules.issendcard = [
          {
            message: "请选择是否下发卡片",
            trigger: "change"
          },
          {
            required: true,
            message: "请选择是否下发卡片",
            trigger: "blur"
          }
        ];

        is = false;
      } else {
        this.formData[4].readonly = true;
        this.formData[4].type = "text";
        this.formData[4].placeholder = "暂无数据";
        this.$refs.felForm.rules.issendcard = [];
      }
      if (obj.isfinger == 1) {
        this.formData[6].readonly = false;
        this.formData[6].type = "select";
        this.formData[6].placeholder = "请选择是否下发";
        this.$refs.felForm.rules.issendfinger = [
          {
            required: true,
            message: "请选择是否下发指纹",
            trigger: "change"
          },
          {
            required: true,
            message: "请选择是否下发指纹",
            trigger: "blur"
          }
        ];
        is = false;
      } else {
        this.formData[6].readonly = true;
        this.formData[6].type = "text";
        this.formData[6].placeholder = "暂无数据";
        this.$refs.felForm.rules.issendfinger = [];
      }
      if (obj.ispass == 1) {
        this.formData[8].readonly = false;
        this.formData[8].type = "select";
        this.formData[8].placeholder = "请选择是否下发";

        this.$refs.felForm.rules.issendpass = [
          {
            required: true,
            message: "请选择是否下发密码",
            trigger: "change"
          },
          {
            required: true,
            message: "请选择是否下发密码",
            trigger: "blur"
          }
        ];

        is = false;
      } else {
        this.formData[8].readonly = true;
        this.formData[8].type = "text";
        this.formData[8].placeholder = "暂无数据";
        this.$refs.felForm.rules.issendpass = [];
      }
      if (obj.isapp == 1) {
        this.formData[7].readonly = false;
        this.formData[7].type = "select";
        this.formData[7].placeholder = "请选择是否下发";

        this.$refs.felForm.rules.issendapp = [
          {
            required: true,
            message: "请选择是否下发app",
            trigger: "change"
          },
          {
            required: true,
            message: "请选择是否下发app",
            trigger: "blur"
          }
        ];

        is = false;
      } else {
        this.formData[7].readonly = true;
        this.formData[7].type = "text";
        this.formData[7].placeholder = "暂无数据";
        this.$refs.felForm.rules.issendapp = [];
      }
      if (obj.ismanager == "0") {
        this.formData[11].noShow = true;
      } else {
        delete obj.ismanager;
        this.formData[11].noShow = false;
      }
      if (obj.isclosefingerentry == "1") {
        this.formData[12].noShow = true;
      } else {
        // delete obj.isclosefingerentry;
        this.formData[12].noShow = false;
      }
      if (is) {
        this.$message({
          message: "当前选中的人员无法添加授权，请重新选择",
          type: "warning"
        });
      } else {
        // this.search = obj.personcode;
        this.selects.cardcode = obj.cardcodes || [];
        this.defaultFormData = Object.assign(
          {
            openstime: "00:00",
            openetime: "23:59",
            issendapp:
              obj.isapp == 1 ? (this.isselect.isselectapp ? "1" : "") : "",
            issendcard:
              obj.iscard == 1 ? (this.isselect.isselectcard ? "1" : "") : "",
            issendfinger:
              obj.isfinger == 1 ? (this.isselect.isselectfinger ? "1" : "") : ""
          },
          obj
        );
        if (obj.iscard == 1) {
          if (this.isselect.isselectcard == "1") {
            this.onChangeCard(["1"], obj);
          }
        }
      }
    },
    resultdata(data) {
      if (data.Result > 0 && data.FunctionID == 0) {
        if (this.$refs.felForm) {
          this.selects.cardcode = [];
          this.formData.forEach(value => {
            if (value.class == "hide") {
              value.noShow = true;
            }
          });
          this.cardShow = false;
          this.defaultFormData = { openstime: "00:00", openetime: "23:59" };
          // this.search = data.CardNo;
          this.$ajax(
            "/lock/operate/info/k/getperson",
            {
              roomid: this.checkedroom.roomid,
              search: data.CardNo,
              page: 1,
              rows: 10
            },
            "1",
            {},
            true
          )
            .then(res => {
              let result = res.result;
              if (result.total == 1) {
                let obj = result.data[0];
                if (obj.iscard == 1) {
                  obj.issendcard = "1";
                  let dx = data.CardNo.toUpperCase();
                  let xx = data.CardNo.toLowerCase();
                  obj.cardcodes.forEach(val => {
                    if (val.indexOf(dx) != -1 || val.indexOf(xx) != -1) {
                      obj.cardcode = val;
                    }
                  });
                }
                this.onSelect(obj);
              } else if (res.total > 1) {
                this.cardRefresh = new Date().getTime();
                this.cardShow = true;
              } else {
                this.$message({
                  message: "没有查询到人员",
                  type: "error"
                });
              }
            })
            .catch(err => {
              this.$message({
                message: `[${err.resultCode}] ` + err.resultMsg,
                type: "error"
              });
            });
        }
      }
    },
    onChangeCard(arr, data) {
      if (arr[0] == 1) {
        if (this.selects.cardcode.length == 1) {
          if (arr[0] === "1") {
            this.$set(
              this.defaultFormData,
              "cardcode",
              this.selects.cardcode[0]
            );
          }
          data.cardcode = this.selects.cardcode[0];
        } else {
          data.cardcode = "";
        }
        this.formData[5].readonly = false;
        this.formData[5].type = "select";
        this.formData[5].placeholder = "请选择要下发的卡号";
        this.$refs.felForm.rules.cardcode = [
          {
            message: "请选择要下发卡号",
            trigger: "change"
          },
          {
            required: true,
            message: "请选择要下发卡号",
            trigger: "blur"
          }
        ];
      } else {
        data.cardcode = "";
        this.formData[5].readonly = true;
        this.formData[5].type = "text";
        this.formData[5].placeholder = "";
        this.$refs.felForm.rules.cardcode = [];
      }
    },
    onChangeApp(arr, data) {
      if (arr[0] == 1) {
      } else {
      }
    },
    onChangePwd(arr, data) {
      if (arr[0] == 1) {
        this.formData[9].noShow = false;
        this.formData[10].noShow = false;
      } else {
        this.formData[9].noShow = true;
        this.formData[10].noShow = true;
      }
    },
    onSelect(obj) {
      this.selectedData = obj;
      this.search = obj.personcode;
      this.cardShow = false;
      this.onSearch();
      if (obj.iscloseapp == 1) {
        this.formData[7].noShow = true;
      } else {
        this.formData[7].noShow = false;
      }
    },
    cardInput() {
      let val = this.search;
      this.selects.cardcode = [];
      this.defaultFormData = { openstime: "00:00", openetime: "23:59" };
      this.formData[9].noShow = true;
      this.formData[10].noShow = true;
      if (val) {
        this.$refs["paging-table"].eliminate();
        this.cardRefresh = new Date().getTime();
        this.cardShow = true;
      } else {
        this.cardShow = false;
        this.formData[4].readonly = true;
        this.formData[4].type = "text";
        this.formData[4].placeholder = "";
        this.formData[5].readonly = true;
        this.formData[5].type = "text";
        this.formData[5].placeholder = "";
        this.formData[6].readonly = true;
        this.formData[6].type = "text";
        this.formData[6].placeholder = "";
        this.formData[7].readonly = true;
        this.formData[7].type = "text";
        this.formData[7].placeholder = "";
        this.formData[8].readonly = true;
        this.formData[8].type = "text";
        this.formData[8].placeholder = "";
        if (this.$refs.felForm.rules) {
          this.$refs.felForm.rules.issendcard = [];
          this.$refs.felForm.rules.cardcode = [];
          this.$refs.felForm.rules.issendfinger = [];
          this.$refs.felForm.rules.issendpass = [];
          this.$refs.felForm.rules.issendapp = [];
        }
      }
    },
    remoteMethod(query) {
      this.ingetauthperson(query);
    },
    beforeClose() {
      this.formData.forEach(value => {
        if (value.class == "hide") {
          value.noShow = true;
        }
      });
      if (this.$refs["felForm"]) {
        if (this.$refs.felForm.rules) {
          this.$refs.felForm.rules.issendcard = [];
          this.$refs.felForm.rules.cardcode = [];
          this.$refs.felForm.rules.issendfinger = [];
          this.$refs.felForm.rules.issendpass = [];
        }
        this.$refs["felForm"].resetForm();
      }
      this.selects.cardcode = [];
      this.search = "";
      this.cardShow = false;
      this.$emit("beforeClose");
    },
    submitForm(data) {
      if (
        data.issendcard == 1 ||
        data.issendfinger == 1 ||
        data.issendpass == 1 ||
        data.issendapp == 1
      ) {
        data.openetime = data.openstime + "~" + data.openetime;
        this.$ajax(
          "/lock/operate/info/l/saveauths",
          {
            roomid: this.checkedroom.roomid,
            ismanager: data.ismanager
          },
          "1",
          [data],
          true
        )
          .then(res => {
            this.$emit("onRefresh");
            this.$message({
              message: "添加授权已发送",
              type: "success"
            });
            this.beforeClose();
          })
          .catch(err => {
            this.$message({
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      } else {
        this.$message({
          message: "请选择要添加授权的类型，请选择为下发",
          type: "warning"
        });
      }
    }
  }
};
</script>
<style lang="scss">
.kinguserAdd {
  .form-header {
    text-align: center;
    margin: 0 10px 10px 10px;
    padding-bottom: 15px;
    border-bottom: 1px solid #ddd;
    span {
      margin-right: 10px;
    }
    .fh_btn {
      height: 32px;
      span {
        margin: 0;
      }
    }
    .btn-sure {
      margin-left: 10px;
      color: #fff;
      background-color: #409eff;
      border-color: #409eff;
      display: inline-block;
      line-height: 1;
      white-space: nowrap;
      cursor: pointer;
      border: 1px solid #dcdfe6;
      -webkit-appearance: none;
      text-align: center;
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      outline: 0;
      -webkit-transition: 0.1s;
      transition: 0.1s;
      font-weight: 500;
      padding: 9px 20px;
      font-size: 14px;
      border-radius: 4px;
    }
    .card-query {
      position: relative;
      background: #fff;

      .card-paging {
        overflow: auto;
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1000;
        background: #fff;
        height: 300px;
        border: 1px solid #ccc;
      }
    }
  }
}
</style>
