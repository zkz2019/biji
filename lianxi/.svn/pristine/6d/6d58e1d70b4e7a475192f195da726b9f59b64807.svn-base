<template>
  <el-popover
    ref="popover"
    class="search-select"
    @show="onShowPopover"
    @hide="onHidePopover"
    placement="bottom-start"
    trigger="click"
  >
    <div class="select-box">
      <slot :options="options" :text="loadText">
        <div class="select-tips" v-show="!options || options.length==0">{{loadText}}</div>
        <div class="select-list" v-show="options && options.length>0">
          <div
            class="select-li"
            v-for="(item,key) of options"
            :key="key"
            @click.stop="onClick(item)"
          >
            <span class="text">{{item.personname}}</span>
            <span class="text right">{{item.personcode}}</span>
          </div>
        </div>
      </slot>
    </div>
    <div slot="reference" class="tree-select">
      <el-input
        ref="input"
        size="mini"
        prefix-icon="el-icon-search"
        :placeholder="placeholder"
        v-model="model"
        @focus="onFocus"
        @blur="onBlur"
        @input="onInput"
        @clear="onClear"
        clearable
      >
        <template v-if="isQuery" class="appIcon" slot="append">
          <i :class="suffixIcon"></i>
        </template>
      </el-input>
    </div>
  </el-popover>
</template>

<script>
export default {
  props: {
    searchKey: {
      // 接口参数
      type: String,
      default: "search",
    },
    param: {
      // 接口参数
      type: Object,
      default() {
        return {
          pgid: 0,
          page: 1,
          rows: 10,
        };
      },
    },
    ajaxType: {
      type: String,
      default: "1",
    },
    paramObj: {
      // 接口参数
      type: Object | Array,
      default() {
        return {};
      },
    },
    interface: String, //接口
    noClick: Boolean,
    value: null,
    placeholder: String,
    refresh: Number,
  },
  data() {
    return {
      loadText: "请输入查询内容",
      isQuery: false,
      model: "",
      options: [], //下拉框数据
      suffixIcon: "el-icon-arrow-down",
    };
  },
  created() {
    if (this.value) {
      this.defaultInput(this.value);
    }
  },
  watch: {
    value(val) {
      if (val) {
        this.defaultInput(val);
      }
    },
    refresh() {
      setTimeout(() => {
        this.$refs["popover"].doShow();
      }, 100);
      if (this.model) {
        this.inQuery();
      } else {
        this.loadText = "请输入查询内容";
      }
    },
  },
  methods: {
    defaultInput(val) {
      this.$refs["popover"].doShow();
      this.model = val;
      this.param[this.searchKey] = val;
      this.inQuery(() => {
        if (this.options.length == 1) {
          this.$refs["popover"].doClose();
          this.$emit("change", this.options[0]);
        }
      });
    },
    onShowPopover() {
      this.suffixIcon = "el-icon-arrow-up";
    },
    onHidePopover() {
      this.suffixIcon = "el-icon-arrow-down";
    },
    onFocus() {
      if (this.model) {
        if (!this.noClick) {
          this.loadText = "请点击查询按钮查询";
        }
      } else {
        this.loadText = "请输入查询内容";
      }
    },
    onInput(value) {
      this.param[this.searchKey] = value;
      if (value) {
        if (this.noClick) {
          tsetTimeout(() => {
            this.$refs["popover"].doShow();
          }, 100);
          this.inQuery();
        } else {
          this.loadText = "请点击查询按钮查询";
        }
      } else {
        this.loadText = "请输入查询内容";
        this.options = [];
        this.isQuery = false;
        this.visible = false;
      }
    },
    inQuery(callback) {
      if (this.interface) {
        this.visible = true;
        this.loadText = "加载中...";
        this.isQuery = true;
        this.$ajax(
          this.interface,
          this.param,
          this.ajaxType,
          this.paramObj,
          false
        )
          .then((res) => {
            let data = res.result;
            if (Array.isArray(data)) {
              this.options = data;
            } else if (data.data) {
              this.options = data.data;
            } else {
              this.options = [];
            }
            if (this.options.length == 0) {
              this.loadText = "没有查询到数据";
            }
            if (callback) {
              callback();
            }
          })
          .catch((err) => {
            this.options = [];
            this.loadText = `[${err.resultCode}] ` + err.resultMsg;
          });
      }
    },
    onClear() {
      this.param[this.searchKey] = "";
    },
    onBlur() {},
    onClick(data) {
      this.$refs["popover"].doClose();
      this.$emit("change", data);
    },
  },
};
</script>

<style lang="scss">
.search-select {
  display: inline-block;
  .el-input-group__append {
    padding: 0;
    padding-left: 4px;
  }
}
.select-box {
  max-height: 50vh;
  width: 180px;
  overflow: auto;
  .select-list {
    .select-li {
      height: 36px;
      line-height: 36px;
      position: relative;
      border-top: 1px solid #eee;
      &:first-child {
        border: 0;
      }
      .right {
        position: absolute;
        text-align: right;
        right: 10px;
        top: 0;
      }
    }
  }
}
</style>
