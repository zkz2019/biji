<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
      <retrieval class="query_head">
        <inpbox :inptext="'请输入'">
          <el-input
            clearable
            class="search qh_w270 qh_inp"
            type="text"
            v-model="param.search"
            :placeholder="'输入'+getNumber()+'/姓名进行检索'"
          ></el-input>
        </inpbox>
        <inpbox>
          <el-button class="buta qh_btn" type="primary" @click="cardInput">查询</el-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="pad0 query_main">
      <paging-table
        class="tobleList wh100"
        height="100%"
        interface="/auth/fingercenter/lotauth/1/getlotauth"
        @onSelection="onSelection"
        :list="list"
        :refresh="refresh"
        :param="param"
        @onEjectChange="onEjectChange"
      >
        <span class="sli but-blue" @click="onClick('d1')">批量授权指纹</span>
      </paging-table>
    </el-main>
    <el-dialog
      :title="titleList"
      width="75%"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="dialogVisible"
    >
      <el-container class="dialog-table6 wh100">
        <paging-table
          v-if="grantType == 4"
          key="type4"
          interface="/auth/fingercenter/lotauth/3/getlotfingerbackauthinfo"
          :param="grantParam"
          :refresh="grantRefresh"
          :list="grantList2"
        >
          <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
            <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
            {{v.alias}}
          </span>
        </paging-table>
        <paging-table
          v-else
          key="type3"
          interface="/auth/fingercenter/lotauth/2/getlotfingerauthinfo"
          :param="grantParam"
          :refresh="grantRefresh"
          :list="grantList1"
        >
          <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
            <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
            {{v.alias}}
          </span>
        </paging-table>
      </el-container>
    </el-dialog>
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
import { mapGetters } from "vuex";
export default {
  components: {},
  props: {
    toParam: null,
    topButs: Array
  },
  data() {
    let $this = this;
    return {
      titleList: "指纹授权列表",
      dialogVisible: false,
      grantParam: { sceid: "" },
      grantType: 3,
      grantList1: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "房间位置",
          prop: "roomlocation"
        },
        {
          name: "指纹编号",
          prop: "fingercode"
        },
        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },
        {
          name: "授权开始时间",
          prop: "empsdate"
        },
        {
          name: "授权结束时间",
          prop: "empedate"
        },
        {
          name: "可开门次数",
          prop: "rfusecount"
        },
        {
          name: "可用时间段",
          prop: "opentime"
        },
        {
          name: "下发状态",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.issend;
                if (value == "下发成功") {
                  return "puc-pg";
                } else if (value == "下发失败") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class='getClass()'>{{scope.row.issend}}</span>`
          }
        },
        {
          name: "备注",
          prop: "failtype"
        }
      ],
      grantList2: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "房间位置",
          prop: "roomlocation"
        },
        {
          name: "指纹编号",
          prop: "fingercode"
        },
        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },
        {
          name: "下发状态",
          prop: "issend"
        },
        {
          name: "备注",
          prop: "failtype"
        }
      ],
      grantRefresh: 0,
      dialogEdit: false,
      editData: [],
      param: {
        search: ""
      },
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "授权id",
          prop: "sceid"
        },
        {
          name: "授权类型",
          prop: "specialtype"
        },
        {
          name: "授权数量",
          prop: "scecount",
          template: {
            props: ["scope"],
            methods: {
              isNumber(num) {
                if (num) {
                  return /^[0-9]*$/.test(num) && num != 0;
                }
                return false;
              },
              onClick() {
                let obj = this.scope.row;
                if (obj.sceid) {
                  $this.grantType = obj.specialtype2;
                  if (obj.specialtype2 == "4") {
                    $this.titleList = "指纹取消授权列表";
                  } else {
                    $this.titleList = "指纹授权列表";
                  }
                  $this.grantParam.sceid = obj.sceid;
                  $this.grantRefresh = new Date().getTime();
                  $this.dialogVisible = true;
                }
              }
            },
            template: `<div>
              <span v-if="isNumber(scope.row.scecount)"><a class="a-click" @click.stop="onClick">{{scope.row.scecount}}</a></span>
              <span v-else>{{scope.row.scecount}}</span>
            </div>`
          }
        },
        {
          name: "授权日期",
          prop: "scecdate"
        },
        {
          name: "操作人账号",
          prop: "userlogin"
        },
        {
          name: "操作人姓名",
          prop: "username"
        }
        // {
        //   name: "操作",
        //   width: "100px",
        //   template: {
        //     props: ["scope"],
        //     methods: {
        //       onClick(key) {
        //         let obj = this.scope.row;
        //         $this.inReloadlotcard(obj.specialtype2, obj.sceid);
        //       }
        //     },
        //     template: `<el-button type="text" size="small" @click.stop="onClick">重载授权</el-button>`
        //   }
        // }
      ],
      refresh: 0,
      tableData: [],
      defaultData: {}
    };
  },
    mounted() {
    this.getEject();
  },
  methods: {
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.cardInput();
    },
    ...mapGetters(["getNumber"]),
    beforeClose() {
      this.dialogVisible = false;
    },
    onSelection(data) {
      this.tableData = data;
    },
    confirm(data) {
      let arr = [];
      if (this.editData instanceof Array) {
        this.editData.forEach(obj => {
          obj["oledate"] = data.edate || "";
        });
        arr = this.editData;
      } else {
        this.editData["oledate"] = data.edate || "";
        arr.push(this.editData);
      }
      this.edit(arr);
    },
    cardInput() {
      this.refresh = new Date().getTime();
    },
    //删除离线授权
    delete(arr) {
      this.$confirm("确定要删除这些授权吗？", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.$ajax(
            "/auth/cardcenter/offlineauth/saveofflineauth/1/deleteofflineauth",
            {},
            "1",
            arr
          )
            .then(res => {
              this.cardInput();
              this.$message({
                message: "删除成功",
                type: "success"
              });
            })
            .catch(err => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] `+err.resultMsg ,
                type: "error"
              });
            });
        })
        .catch(() => {});
    },
    //修改
    edit(arr) {
      this.$ajax(
        "/auth/cardcenter/offlineauth/saveofflineauth/1/updateofflineauth",
        {},
        "1",
        arr
      )
        .then(res => {
          this.cardInput();
          this.dialogEdit = false;
          this.$message({
            message: "修改成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] `+err.resultMsg ,
            type: "error"
          });
        });
    },
    onClick(key, data) {
      if (key == 474) {
        this.submitForm();
      } else if (key == "d1") {
        this.$emit("onClick", key, data);
      }
    },
    submitForm() {
      this.inReloadlotcard(this.grantType, this.grantParam.sceid);
    },
    inReloadlotcard(type, sceid) {
      this.$confirm(
        `确定要重载${type == 4 ? "取消" : ""}指纹的授权吗？`,
        "提示",
        {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }
      )
        .then(() => {
          let url =
            "/auth/fingercenter/fingerauth/reload/1/reloadlotfingerauth";
          if (type == 4) {
            url =
              "/auth/fingercenter/fingerauth/reload/2/reloadlotfingerbackauth";
          }
          this.$ajax(url, { sceid }, "1", {}, true)
            .then(res => {
              this.$message({
                message: "重载授权成功",
                type: "success"
              });
              this.grantRefresh = new Date().getTime();
            })
            .catch(err => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] `+err.resultMsg ,
                type: "error"
              });
            });
        })
        .catch(() => {});
    },
    onEjectChange() {
      //将用户隐藏表格的信息存到localStorage
      let arr = this.list.map(o => o.show);
      Storages.setlocalStorage("plsqzw403.eject", arr);
    },
    getEject() {
      //从localStorage获取用户隐藏表格的信息
      let arr = Storages.getlocalStorage("plsqzw403.eject") || [];
      let lists = [];
      this.list.forEach((value, key) => {
        let obj = Object.assign({}, value);
        obj.show = arr[key];
        lists.push(obj);
      });
      this.list = lists;
    }
  }
};
</script>