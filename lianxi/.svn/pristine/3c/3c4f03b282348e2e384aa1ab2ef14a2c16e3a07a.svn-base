<template>
  <el-dialog
    :title="type==1?'添加人员':'修改人员'"
    width="60%"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <fel-form
      ref="felForm"
      :selects="selects"
      @submitForm="submitForm"
      @closeForm="beforeClose"
      width="140px"
      dynamic
      :defaultData="defaultData"
      :formData="formData"
    ></fel-form>
  </el-dialog>
</template>

<script>
import { mapGetters } from "vuex";
import judge from "@/utils/judge.js";
export default {
  props: {
    dialogVisible: Boolean,
    defaultData: Object,
    fatheragid: Object,
    type: null
  },
  data() {
    let $this = this;
    return {
      pgidObj: {},
      selects: {
        pgid: [{ pgid: "", pgname: "正在加载中...", isroom: true }],
        persontype: [],
        personstate: []
      },
      formData: [
        {
          width: "50%",
          value: "personcode",
          name: this.getNumber(),
          type: "text",
          disabled: false,
          rules: [
            {
              required: true,
              validator: (rule, value, callback) => {
                let name = $this.getNumber();
                if (!value && value !== 0) {
                  callback(new Error("请输入" + name));
                } else if (!judge.isAlphaNumeric(value)) {
                  callback(new Error(name + "格式错误，只能是字母或数字"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "persontype",
          name: "人员类型",
          type: "select",
          disabled: false,
          onChange: this.persontypeChange,
          select: "persontype",
          slabel: "typename",
          svalue: "type",
          rules: [
            {
              required: true,
              message: "请选择人员类型",
              trigger: "change"
            }
          ]
        },
        {
          width: "50%",
          value: "personname",
          name: "姓名",
          type: "text",
          rules: [
            {
              required: true,
              message: "请输入姓名",
              trigger: "blur"
            }
          ]
        },
        // {
        // width: "50%",
        // value: "personstate",
        // name: "人员状态",
        // type: "select",
        // select: "personstate",
        // slabel: "statename",
        // svalue: "state"
        // rules: [
        //   {
        //     required: true,
        //     message: "请选择人员状态",
        //     trigger: "change"
        //   }
        // ]
        // },
        {
          width: "50%",
          value: "personsex",
          name: "性别",
          type: "select",
          select: [
            {
              value: 1,
              label: "男"
            },
            {
              value: 0,
              label: "女"
            }
          ],
          rules: [
            {
              required: true,
              message: "请选择性别",
              trigger: "change"
            }
          ]
        },
        {
          value: "pgid",
          name: "归属组织",
          type: "cascader",
          options: "pgid",
          change: true,
          filterable: true,
          props: {
            label: "pgname",
            value: "pgid",
            children: "children"
          },
          rules: {
            required: true,
            message: "请选择归属组织",
            trigger: "blur"
          }
        },
        {
          width: "50%",
          value: "personcard",
          name: "身份证号",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isCardID(value)) {
                  callback(new Error("身份证号格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "personcomedate",
          name: "登记日期",
          type: "date",
          popperClass:"dateQueryList",
          date: "date",
          format: "yyyy-MM-dd"
        },
        {
          width: "50%",
          value: "personmobile",
          name: "手机号",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isMobile(value)) {
                  callback(new Error("手机号码格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "personemail",
          name: "邮箱",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isEmail(value)) {
                  callback(new Error("邮箱码格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "50%",
          value: "persontype2",
          name: "学历",
          type: "select",
          select: [
            {
              value: 1,
              label: "高职"
            },
            {
              value: 2,
              label: "大专"
            },
            {
              value: 3,
              label: "本科"
            },
            {
              value: 4,
              label: "研究生"
            },
            {
              value: 5,
              label: "博士生"
            }
          ]
        },
        {
          width: "50%",
          value: "personremark",
          name: "备注",
          type: "text"
        },
        {
          width: "50%",
          value: "personcreatedate",
          name: "建立人员时间",
          type: "text",
          disabled: true
        },
        {
          width: "50%",
          value: "personeditdate",
          name: "最后变更信息时间",
          type: "text",
          disabled: true
        }
      ],
      button: [
        {
          type: "2",
          name: "确认"
        },
        {
          type: "1",
          name: "取消"
        }
      ]
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        if (this.type == 1) {
          this.formData[0].disabled = false;
          this.formData[1].disabled = false;
          if (this.fatheragid && this.fatheragid.pgid) {
            this.defaultData.pgid = this.pgidObj[this.fatheragid.pgid];
          }
          console.log("this.fatheragid", this.fatheragid);
        } else {
          if (this.defaultData && this.defaultData.pgid) {
            this.defaultData.pgid = this.pgidObj[this.defaultData.pgid[0]];
          }
          this.formData[0].disabled = true;
          this.formData[1].disabled = true;
        }
      }
    }
  },
  created() {
    this.inGetpersontree();
    this.inSelectType();
  },
  methods: {
    ...mapGetters(["getNumber"]),
    persontypeChange(arr, data) {
      let $this = this;
      if (arr[0] == "3") {
        this.$refs["felForm"].rules["personcode"] = [];
      } else {
        this.$refs["felForm"].rules["personcode"] = [
          {
            required: true,
            message: "请输入" + $this.getNumber(),
            trigger: "blur"
          }
        ];
      }
    },
    inSelectType() {
      let url = "/person/save/3/getpersonstateandtype";
      this.$ajax(url, {}, "1")
        .then(res => {
          let result = res.result;
          this.selects.personstate = result.state;
          this.selects.persontype = result.type;
        })
        .catch(err => {});
    },
    inGetpersontree() {
      this.$ajax("/person/save/1/getpersontree", {}, "1")
        .then(res => {
          this.setObjData(res.result);
          this.selects.pgid = res.result;
          if (this.type == 1) {
            if (this.fatheragid && this.fatheragid.pgid) {
              this.defaultData.pgid = this.pgidObj[this.fatheragid.pgid];
            }
          } else {
            if (this.defaultData && this.defaultData.pgid) {
              this.defaultData.pgid = this.pgidObj[this.defaultData.pgid[0]];
            }
          }
        })
        .catch(err => {});
    },
    setObjData(arr) {
      arr.forEach(obj => {
        this.pgidObj[obj.pgfatherid] = this.pgidObj[obj.pgfatherid] || [];
        this.pgidObj[obj.pgid] = [...this.pgidObj[obj.pgfatherid], obj.pgid];
        if (obj.children) {
          this.setObjData(obj.children);
        }
      });
    },
    submitForm(data) {
      let pgids = data.pgid;
      if (pgids && pgids.length > 0) {
        data.pgid = pgids[pgids.length - 1];
      }
      let url = "/person/update/3/updateperson",
        ts = "修改";
      if (this.type == 1) {
        url = "/person/save/2/saveperson";
        ts = "添加";
      }
      this.$ajax(url, data, "1", {}, true)
        .then(res => {
          this.$emit("onRefresh");
          this.beforeClose();
          this.$message({
            message: ts + "人员成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    beforeClose() {
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].resetForm();
      }
      this.$emit("beforeClose");
    }
  }
};
</script>
