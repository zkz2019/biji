<!-- 卡片管理 -->
<template>
  <el-container>
    <el-header class="elheader query_headbox">
      <com-title>{{toParam.alias}}</com-title>
      <retrieval class="query_head">
        <inpbox :inpb="true">
          <el-select v-model="param.cardstate" class="wid150 qh_inp">
            <el-option
              v-for="item in states"
              :key="item.cardstate"
              :label="item.cardstatename"
              :value="item.cardstate"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox :inpb="true">
          <el-select v-model="param.cardtype" class="wid150 qh_inp">
            <el-option
              v-for="item in types"
              :key="item.cardtype"
              :label="item.cardtypename"
              :value="item.cardtype"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox :inptext="'选择组织'">
          <el-cascader
            ref="cascader"
            class="box_top_cas"
            size="mini"
            v-model="param.pgid"
            :options="zzoptions"
            :props="{ checkStrictly: true ,value:'pgid',label:'pgname' }"
            clearable
          ></el-cascader>
        </inpbox>
        <inpbox :inptext="'请输入'">
          <el-input
            class="wid300 qh_inp"
            clearable
            type="text"
            :placeholder="'请输入卡号|'+getNumber()+'|姓名|手机号搜索'"
            v-model="param.search"
          ></el-input>
        </inpbox>
        <inpbox>
          <el-button @click="onRefresh" class="qh_btn" type="primary">查询</el-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
        <template v-if="isCardReader">
          <span class="is-card-reader maR10" @click="onClickCardReader" title="读卡机驱动下载">
            <!-- <i class="el-icon-download"></i> -->
            <el-button type="text" size="mini">读卡机驱动</el-button>
          </span>
        </template>
      </retrieval>
    </el-header>
    <el-main class="elmainbox query_main">
      <paging-table
        height="100%"
        ref="paging-table"
        :isAll="range == 2? true:false"
        :class="{'cover-up':range == 2}"
        interface="/auth/cardcenter/card/1/getcard"
        class="heig100"
        @onEjectChange="onEjectChange"
        @onSelection="onSelection"
        @onSelect="onSelect"
        @sort-change="sortChange"
        :param="param"
        :list="list"
        :refresh="refresh"
      >
        <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>
        <template v-if="batchButs && batchButs.length > 0">
          <div class="full-list" v-show="!list[0].show">
            <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
          </div>
          <!-- <div class="cover-up" v-show="range == 2">
            <el-checkbox disabled v-model="range" true-label="2" false-label="1"></el-checkbox>
          </div>-->
          <batch-but
            class="sli but-blue"
            :type="range"
            :list="listArrs"
            :param="batchButs"
            @onClick="onBatchClick"
          ></batch-but>
        </template>
      </paging-table>
    </el-main>
    <el-dialog
      title="卡片授权列表"
      width="70%"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="dialogVisible"
    >
      <el-container class="dialog-table6 wh100">
        <paging-table
          ref="grant-paging-table"
          :isAll="grantRange == 2? true:false"
          :class="{'cover-up':grantRange == 2}"
          interface="/auth/cardcenter/card/deletecardauths/4/getcardauth"
          :param="{'cardcode':this.grantParam.cardcode}"
          @onSelection="(data)=>{this.rcids = data}"
          :refresh="grantRefresh"
          :list="grantList"
        >
          <template v-if="grantButs && grantButs.length > 0">
            <!-- <span class="sli">
              <el-select class="wid150" v-model="grantRange">
                <el-option
                  v-for="item in ranges"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                ></el-option>
              </el-select>
            </span>-->
            <div class="full-list" v-show="!grantList[0].show">
              <el-checkbox
                v-model="grantRange"
                @change="onGrantChange"
                true-label="2"
                false-label="1"
              >跨页全选</el-checkbox>
            </div>
            <!-- <div class="cover-up" v-show="grantRange == 2">
              <el-checkbox disabled v-model="grantRange" true-label="2" false-label="1"></el-checkbox>
            </div>-->
            <batch-but
              class="sli but-blue"
              :type="grantRange"
              :list="rcids"
              :param="grantButs"
              @onClick="onGrantBatchClick"
            ></batch-but>
          </template>
        </paging-table>
      </el-container>
    </el-dialog>
    <cardAdd
      :type="addType"
      :defaultData="defaultDataAdd"
      @confirm="confirmAdd"
      :dialogVisible="dialogAdd"
      @beforeClose="dialogAdd=false"
    ></cardAdd>
    <cardModify
      :param="grantParam"
      @confirm="confirmModify"
      :defaultData="defaultData"
      :dialogVisible="cardModify"
      @beforeClose="cardModify=false"
    ></cardModify>
    <guideFile
      :dialogVisible="dialogGuideFile"
      :importButs="importButs"
      :exportButs="exportButs"
      @handleClose="dialogGuideFile=false"
    ></guideFile>
    <cardReading
      ref="cardReading"
      :close="dialogReading"
      @onInstall="onInstall"
      @resultdata="resultdata"
    />
  </el-container>
</template>

<script>
import cardReading from "./cardReading";
import queryOrgan from "./../query/queryOrgan";
import Storages from "../../utils/Storage.js"; //缓存工具
import { mapGetters } from "vuex";
import cardAdd from "./cardAdd";
import cardModify from "./cardModify";
import { download } from "@/utils/utils.js";
import guideFile from "@/views/common/guideFile.vue";
export default {
  name: "kpgl384",
  components: {
    guideFile,
    cardAdd,
    cardModify,
    queryOrgan,
    cardReading
  },
  props: {
    toParam: null
  },
  created() {
    this.dialogReading = true;
    this.$ajax("/auth/cardcenter/card/3/getgrouptree", {}, "1")
      .then(res => {
        this.zzoptions = res.result;
      })
      .catch(err => {
        console.log("err", err);
      });
    this.inGetsonmenu();
    this.inGetcardtype();
  },
  data() {
    let $this = this;
    return {
      zzoptions: [],
      importButs: [],
      exportButs: [],
      dialogReading: false,
      isCardReader: false,
      dialogGuideFile: false,
      batchButs: [],
      defaultData: {},
      defaultDataAdd: {},
      addType: "0",
      cardModify: false,
      FileimportVisible: false,
      grantRefresh: 0,
      grantParam: {},
      param: {
        cardstate: "",
        cardtype: "",
        search: "",
        sequence: "",
        pgid: "",
        sortby: ""
      },
      range: "1",
      grantRange: "1",
      ranges: [
        {
          value: "1",
          label: "勾选范围"
        },
        {
          value: "2",
          label: "全部列表"
        }
      ],
      grantButs: [],
      choiceType: "",
      choiceTypes: [],
      refresh: 0,
      dialogAdd: false,
      titleAdd: "添加卡片",
      dialogVisible: false,
      listGrantBut: [],
      isGranSelectable: true,
      grantList: [
        {
          type: "selection",
          selectable: this.onGranSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "房间位置",
          prop: "roomlocation"
        },
        {
          name: "授权创建时间",
          prop: "empcdate"
        },
        {
          name: "授权账号",
          prop: "userlogin"
        },
        {
          name: "授权开始时间",
          prop: "empsdate"
        },
        {
          name: "授权结束时间",
          prop: "empedate"
        },
        {
          name: "开门时间段",
          prop: "opentime"
        },
        {
          name: "可开门次数",
          prop: "count"
        },
        {
          name: "操作",
          width: "100px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listGrantBut;
              },
              next() {
                if (this.scope.row.rcid == 0) {
                  return false;
                } else {
                  return true;
                }
              }
            },
            methods: {
              onClick(key, obj) {
                if (this.next) {
                  $this.onClick(key, Object.assign({}, this.scope.row), obj);
                }
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,i) of listBut" :style="next?'':'color:#999'" :key="i" type="text" size="small" @click.stop="onClick(v.type, v)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      isSelectable: true,
      list: [
        {
          type: "selection",
          selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "卡类型",
          prop: "cardtype",
          sortable: "custom"
        },

        {
          name: "卡号",
          prop: "cardcode",
          sortable: "custom"
        },
        {
          name: "姓名",
          prop: "personname",
          sortable: "custom"
        },
        {
          name: this.getNumber(),
          prop: "personcode",
          sortable: "custom"
        },
        {
          name: "归属组织",
          prop: "personlocation",
          sortable: "custom",
          width: "110px"
        },
        {
          name: "手机号",
          prop: "personmobile",
          sortable: "custom"
        },
        {
          name: "注册日期",
          prop: "cardsdate",
          sortable: "custom",
          width: "110px"
        },
        {
          name: "到期日期",
          prop: "cardedate",
          sortable: "custom",
          width: "110px"
        },
        {
          name: "授权",
          prop: "empowercount",
          sortable: "custom",
          template: {
            props: ["scope"],
            methods: {
              isNumber(num) {
                if (num) {
                  return /^[0-9]*$/.test(num);
                }
                return false;
              },
              onClick() {
                if (this.scope.row.cardcode) {
                  $this.grantParam = this.scope.row;
                  $this.grantRefresh = new Date().getTime();
                  $this.dialogVisible = true;
                }
              }
            },
            template: `<div>
              <span v-if="isNumber(scope.row.empowercount)"><a class="a-click" @click.stop="onClick">{{scope.row.empowercount}}</a></span>
              <span v-else>{{scope.row.empowercount}}</span>
            </div>`
          }
        },
        // {
        //   name: "状态",
        //   prop: "cardstate",
        //   sortable: "custom"
        // },
        {
          name: "状态",
          prop: "cardstate",
          sortable: "custom",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.cardstate;
                if (value == "启用") {
                  return "puc-pg";
                } else if (value == "停用") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class='getClass()'>{{scope.row.cardstate}}</span>`
          }
        },
        {
          name: "操作",
          width: "160px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              },
              row() {
                return this.scope.row;
              }
            },
            methods: {
              onClick(key, obj) {
                $this.onClick(key, Object.assign({}, this.scope.row), obj);
              },
              getState(str, state) {
                if (state == "过期" && str == "启用") {
                  return false;
                } else if (state == "过期" && str == "停用") {
                  return false;
                } else if (state == str) {
                  return false;
                } else {
                  return true;
                }
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,i) of listBut" v-show= 'getState(v.name,row.cardstate)' :key="i" type="text" size="small" @click.stop="onClick(v.type, v)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      states: [
        {
          cardstate: "",
          cardstatename: "所有状态卡片"
        }
      ],
      types: [
        {
          cardtype: "",
          cardtypename: "所有类型卡片"
        }
      ],
      topButs: [],
      listBut: [],
      modifyObj: [],
      //授权列表选择数据
      rcids: [],
      //卡片列表选择数据
      listArrs: [],
      sonmenu: 0
    };
  },
  mounted() {
    this.getEject();
  },
  beforeDestroy() {
    this.dialogReading = false;
  },
  methods: {
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "465") {
              let arr = value.childs;
              if (arr && arr.length > 0) {
                this.topButs.push(value.entity);
                arr.forEach(obj => {
                  let vid = obj.entity.id;
                  let valias = obj.entity.alias;
                  if (vid == "392") {
                    this.importButs.push({
                      name: valias,
                      tempUrl:
                        "/auth/cardcenter/card/uploadcard/3/downcardmodel",
                      url: "/auth/cardcenter/card/uploadcard/1/uploadcard",
                      errUrl: "/auth/cardcenter/card/uploadcard/2/downcardfail"
                    });
                  } else if (vid == "393") {
                    this.exportButs.push({
                      name: valias,
                      url: "/auth/cardcenter/card/uploadcard/4/downcard",
                      data: this.param
                    });
                  } else if (vid == "541") {
                    this.exportButs.push({
                      name: valias,
                      url: "/auth/cardcenter/card/uploadcard/3/downcardmodel",
                      data: this.param
                    });
                  }
                });
              }
            } else if (id == "387") {
              this.topButs.push(value.entity);
            } else if (id == "388") {
              this.listBut.push({
                type: "2",
                name: "修改",
                alias
              });
            } else if (id == "389") {
              this.batchButs.push(value.entity);
              this.listBut.push({
                type: "6",
                name: "启用",
                alias
              });
            } else if (id == "390") {
              this.batchButs.push(value.entity);
              this.listBut.push({
                type: "7",
                name: "停用",
                alias
              });
            } else if (id == "391") {
              this.batchButs.push(value.entity);
              this.listBut.push({
                type: "4",
                name: "删除",
                alias
              });
            } else if (id == "395") {
              this.listGrantBut.push({
                type: "g4",
                name: "删除",
                alias
              });
              this.grantButs.push(value.entity);
            } else if (id == "396") {
              this.listGrantBut.push({
                type: "g2",
                name: "修改",
                alias
              });
              this.grantButs.push(value.entity);
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onInstall(is) {
      //身份证读卡器驱动下载
      this.isCardReader = !is;
    },
    onClickCardReader() {
      this.$refs["cardReading"].download();
    },
    resultdata(data) {
      //读卡
      this.param.search = data.CardNo;
      this.onRefresh();
    },
    //选择组织
    onChoiceZZ(data) {
      console.log("data", data);
      // this.paramObj.persontree = data;
    },
    sortChange(obj) {
      // return ;
      if (obj.order) {
        if (obj.order == "descending") {
          this.param.sequence = "2";
        } else if (obj.order == "ascending") {
          this.param.sequence = "1";
        }
        let sortby = obj.prop;
        this.param.sortby = sortby;
      } else {
        this.param.sequence = "";
        this.param.sortby = "";
      }
      this.onRefresh();
    },
     onEjectChange() {
      this.$common.onEjectChange(this.list, "kpgl384");
    },
    getEject() {
      this.$common.getEject(this, "list", "kpgl384");
    },
    onGranSelectable() {
      return this.isGranSelectable;
    },
    onSelectable() {
      return this.isSelectable;
    },
    onGrantChange(val) {
      if (val == 2) {
        this.$refs["grant-paging-table"].clearSelection();
        this.$refs["grant-paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isGranSelectable = false;
        }, 100);
      } else {
        this.$refs["grant-paging-table"].clearSelection();
        this.isGranSelectable = true;
      }
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    //重置事件
    onReset() {
      this.param.cardstate = "";
      this.param.cardtype = "";
      this.param.search = "";
      this.param.pgid = "";
      this.onRefresh();
      this.isGranSelectable = true;
      this.isSelectable = true;
      this.range = "1";
      this.grantRange = "1";
    },
    ...mapGetters(["getNumber"]),
    //获取卡片类型
    inGetcardtype() {
      this.$ajax("/auth/cardcenter/card/2/getcardtype", {}, "1")
        .then(res => {
          this.types.push(...res.result.cardtypes);
          this.states.push(...res.result.cardstate);
        })
        .catch(err => {});
    },
    //添加卡片
    confirmAdd(data) {
      // 修改卡片
      if (this.addType == "1") {
        this.$ajax("/auth/cardcenter/card/savecard/1/updatecard", data, "1")
          .then(res => {
            this.onRefresh();
            this.dialogAdd = false;
            this.$message({
              message: "修改成功",
              type: "success"
            });
          })
          .catch(err => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      } else {
        this.$ajax("/auth/cardcenter/card/savecard/9/savecard", data, "1")
          .then(res => {
            this.onRefresh();
            this.dialogAdd = false;
            this.$message({
              message: "添加成功",
              type: "success"
            });
          })
          .catch(err => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      }
    },
    //提交 修改卡片授权列表
    confirmModify(data) {
      let url = "/auth/cardcenter/card/deletecardauths/5/updateallcardauths";
      let param = {};
      if (this.grantRange == 1) {
        param = this.modifyObj.map(o => o.rcid);
        url = "/auth/cardcenter/card/deletecardauths/3/updatecardauths";
      } else {
        data.cardcode = this.grantParam.cardcode;
      }
      this.$ajax(url, data, "1", param, true)
        .then(res => {
          this.grantRefresh = new Date().getTime();
          this.cardModify = false;
          this.$message({
            message: "修改成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    //选择 修改卡片授权列表
    onCardModify(arr) {
      let data = this.rcids;
      if (arr) {
        data = arr;
      }
      if (this.grantParam && this.grantParam.cardcode) {
        if (this.grantRange != 2) {
          if (data && data.length > 0) {
            if (data.length == 1) {
              let opencount = data[0].count;
              if (!/^[0-9]*$/.test(opencount)) {
                opencount = "";
              }
              let empsdate = data[0].empsdate;
              if (!/^[:\s0-9\-]*$/.test(empsdate)) {
                empsdate = "";
              }
              let empedate = data[0].empedate;
              if (!/^[:\s0-9\-]*$/.test(empedate)) {
                empedate = "";
              }
              let times = data[0].opentime.split("~");
              this.defaultData = {
                empsdate: empsdate,
                empedate: empedate,
                openstime: times[0] || "",
                openetime: times[1] || "",
                opencount: opencount
              };
            } else {
              this.defaultData = {};
            }
            this.modifyObj = data;
            this.cardModify = true;
          } else {
            this.$message({
              message: "请先选择授权",
              type: "warning"
            });
            return;
          }
        } else {
          this.modifyObj = data;
          this.cardModify = true;
        }
      }
    },
    //删除卡片授权列表
    onGrantDelete(arr, key) {
      let data = this.rcids;
      if (arr) {
        data = arr;
      }
      if ((this.grantParam && this.grantParam.cardcode, arr)) {
        let url =
          "/auth/cardcenter/card/deletecardauths/2/batchdeletecardauths";
        let obj = {
          cardcode: this.grantParam.cardcode
        };
        let param = [];
        let ctext = "确定要删除被选中的授权吗？";
        if (this.grantRange == 2 && key != "g4") {
          ctext = "确定要删除全部列表的授权吗？";
          url = "/auth/cardcenter/card/deletecardauths/1/deleteallcardauths";
        } else if (data && data.length > 0) {
          param = data.map(o => o.rcid);
        } else if (this.rcids && this.rcids.length > 0) {
          param = this.rcids.map(o => o.rcid);
        } else {
          this.$message({
            message: "请先选择授权",
            type: "warning"
          });
          return;
        }
        this.$confirm(ctext, "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(url, obj, "1", param, true)
              .then(res => {
                this.grantRefresh = new Date().getTime();
                this.onRefresh();
                this.$message({
                  message: "删除成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      }
    },
    // 卡片列表的选择数据
    onSelection(data) {
      this.listArrs = data;
    },
    // 卡片列表的单选数据
    onSelect(obj) {
      this.cardObj = obj;
    },
    // 开始操作卡片列表
    onAction(type, arr) {
      let url = "/auth/cardcenter/card/deletecard/2/batchactioncard";
      let data = {
        actiontype: type
      };
      let param = [];
      if (arr) {
        param = arr.map(o => o.cardcode);
      } else if (!arr && this.range == 2) {
        url = "/auth/cardcenter/card/deletecard/5/allactioncard";
        data = Object.assign(data, this.param);
      } else {
        param = this.listArrs.map(o => o.cardcode);
      }
      this.$ajax(url, data, "1", param, true)
        .then(res => {
          this.onRefresh();
          this.$message({
            message: type + "操作成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    // 刷新卡片列表数据
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onBatchClick(key, obj) {
      if (this.range == 2) {
        this.onAction(obj.alias);
      } else if (this.listArrs.length != 0) {
        this.onAction(obj.alias);
      } else {
        this.$message({
          showClose: true,
          message: "请先选中卡片",
          type: "warning"
        });
      }
    },
    onGrantBatchClick(key) {
      if (this.grantRange == 1 && this.rcids.length == 0) {
        this.$message({
          showClose: true,
          message: "请先选中授权",
          type: "warning"
        });
      } else {
        if (key == 395) {
          this.onGrantDelete([], key);
        } else if (key == 396) {
          this.onCardModify();
        }
      }
    },
    onClick(key, data, obj) {
      if (key == 4) {
        this.$confirmCon("确定删除当前卡片吗？", () => {
          this.onAction(obj.alias, [data]);
        });
      } else if (key == 6) {
        this.$confirmCon("此操作将此启用此卡片，是否继续？", () => {
          this.onAction(obj.alias, [data]);
        });
      } else if (key == 7) {
        this.$confirmCon("此操作将停用此卡片，是否继续？", () => {
          this.onAction(obj.alias, [data]);
        });
      } else if (key == "465") {
        this.dialogGuideFile = true;
      } else if (key == 387) {
        this.addType = "0";
        this.dialogAdd = true;
        this.defaultDataAdd = {
          openstime: "00:00",
          openetime: "23:59"
        };
      } else if (key == 2) {
        this.addType = "1";
        this.dialogAdd = true;
        if (!/^[0-9:\s\/-]*$/.test(data.cardedate)) {
          data.cardedate = "";
        }
        data.opencount = data.cardusecount;
        this.defaultDataAdd = Object.assign(
          {
            openstime: "00:00",
            openetime: "23:59"
          },
          data
        );
      } else if (key == "g2") {
        this.onCardModify([data]);
      } else if (key == "g4") {
        this.onGrantDelete([data], key);
      }
    },

    beforeClose() {
      this.dialogVisible = false;
    }
  }
};
</script>

