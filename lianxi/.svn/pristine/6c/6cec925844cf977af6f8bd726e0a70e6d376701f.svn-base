<template>
  <el-dialog
    title="自动升级网关"
    width="70%"
    class="importHistory"
    append-to-body
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <el-container class="dialog-table6 wh100">
      <el-header class="query_headbox">
        <retrieval class="query_head">
          <inpbox :inpb="true">
            <el-input
              clearable
              class="qh_w270 qh_inp maR24"
              v-model="param.search"
              placeholder="输入门锁唯一ID/位置进行查询"
            ></el-input>
          </inpbox>
          <inpbox>
            <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
            <fel-button class="qh_btn" @click="onReset">重置</fel-button>
          </inpbox>
        </retrieval>
      </el-header>
      <paging-table
        interface="/system/onlineup/wxgateversionup/4/getautoversionupgates"
        :list="listInfo"
        :param="param"
        :refresh="refresh"
        ref="paging-table"
        :isAll="range == 2 ? true : false"
        @onSelection="onSelection"
        :class="{ 'cover-up': range == 2 }"
      >
        <template v-if="stopBtns && stopBtns.length > 0">
          <div class="full-list" v-show="!listInfo[0].show">
            <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
          </div>
          <batch-but
            class="sli but-blue"
            :type="range"
            :list="listArr"
            :param="stopBtns"
            @onClick="inSavegatewayorder"
          ></batch-but>
        </template>
      </paging-table>
    </el-container>
    <wxProcessDetails
      :dialogVisible="procsssVisible"
      :auid="auid"
      @beforeClose="procsssVisible=false"
    ></wxProcessDetails>
  </el-dialog>
</template>

<script>
import wxProcessDetails from "./wxProcessDetails.vue";
export default {
  props: {
    dialogVisible: Boolean,
    duid: String | Number,
    stopBtns: Array,
  },
  components: { wxProcessDetails },
  data() {
    let $this = this;
    return {
      procsssVisible: false,
      param: { duid: "", search: "" },
      auid: "",
      listArr: [],
      range: "1",
      refresh: 0,
      listInfo: [
        {
          type: "selection",
          width: "40px",
          selectable: this.onSelectable,
        },
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "开始时间",
          width: "160px",
          prop: "ausdate",
        },
        {
          name: "结束时间",
          width: "160px",
          prop: "auedate",
        },
        {
          name: "进度",
          width: "110px",
          prop: "austatename",
        },
        {
          name: "网关位置",
          minWidth: "170px",
          prop: "gatewaylocation",
        },
        {
          name: "版本号",
          prop: "deviceversion",
        },

        {
          name: "状态",
          template: {
            props: ["scope"],
            computed: {
              name() {
                if (this.scope.row.austate == 0) {
                  return "正在升级";
                } else if (this.scope.row.austate <= -1) {
                  return "失败";
                } else {
                  return "成功";
                }
              },
            },
            methods: {
              getClass() {
                let value = this.scope.row.austate;
                if (value >= 1) {
                  return "puc-pg";
                } else if (value <= -1) {
                  return "puc-px";
                } else {
                  return "";
                }
              },
            },
            template: `<span :class='getClass()'>{{name}}</span>`,
          },
        },
        {
          name: "失败原因",
          prop: "auremark",
        },
        {
          name: "操作",
          width: "150px",
          template: {
            props: ["scope"],
            methods: {
              onClick(key) {
                $this.onClick(key, this.scope.row);
              },
            },
            computed: {
              stopBtns() {
                return $this.stopBtns;
              },
            },
            template: `<div class="operat-buts"> 
             <el-button type="text" v-if="stopBtns&&stopBtns.length>0" size="small" @click.stop="onClick('0')">停止自动升级</el-button>
             <el-button type="text" size="small" @click.stop="onClick('1')">详情</el-button>
            </div>`,
          },
        },
      ],
    };
  },
  computed: {},
  watch: {
    dialogVisible(val) {
      if (val) {
        this.param.duid = this.duid;
      } else {
        this.param.duid = "";
      }
      this.onRefresh();
    },
  },
  methods: {
    onClick(key, obj) {
      if (key == "0") {
        let data = {
          actiontype: "勾选范围",
          auids: [obj.auid],
          duid: this.duid,
          search: this.param.search,
        };
        let arr = [obj.auid];
        this.onAction(data, arr);
      } else if (key == "1") {
        this.auid = obj.auid;
        this.procsssVisible = true;
      }
    },
    onSelection(data) {
      this.listArr = data;
    },
    inSavegatewayorder(id) {
      let data = {
        actiontype: this.range == "2" ? "跨页全选" : "勾选范围",
        duid: this.duid,
        search: this.param.search,
      };
      let obj = this.listArr.map((item) => {
        return item.auid;
      });
      this.onAction(data, obj);
    },
    onAction(data, obj) {
      this.$ajax(
        "/system/onlineup/savewxlockversion/c/stopautowxlockup",
        data,
        "1",
        obj,
        true
      )
        .then((res) => {
          this.$message({
            message: "停止自动升级成功!",
            type: "success",
          });
          console.log("res", res);
        })
        .catch((err) => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error",
          });
        });
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    beforeClose() {
      this.$emit("beforeClose");
    },
    onReset() {
      this.param.search = "";
      this.onRefresh();
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
  },
};
</script>