<!-- 门禁管理 -->
<template>
  <el-container>
    <fel-left-tree class="building">
      <div slot="left" class="left-tree">
        <fel-tree1
          ref="fel-tree1"
          :showCheckbox="false"
          class="tree1"
          :idArr="[0]"
          :refresh="refreshTree"
          interface="/access/v2.0/door/1/listAreaTree"
          ajaxType="9"
          nodeKey="agid"
          iconName="agtype"
          :param="{agfatherid:''}"
          paramKey="agfatherid"
          :defaultProps="{
          children: 'children',
          label: 'agname',
          isLeaf: 'isLeaf'}"
          @handleNodeClick="handleNodeClick"
        ></fel-tree1>
      </div>
      <el-container>
        <el-header class="elheader query_headbox">
          <comTitle>
            <div class="titlebox">门禁管理-{{fatheragid.agname || '建筑'}}</div>
          </comTitle>
        </el-header>
        <el-main class="padt0 query_main">
          <paging-table
            ref="paging-table"
            class="tobleList wh100"
            height="100%"
            noInit
            interface="/access/v2.0/door/2/listAccessDoor"
            ajaxType="9"
            @onSelection="onSelection"
            :list="list"
            :refresh="refresh"
            :param="param"
            :paramObj="fatheragid"
            @onEjectChange="onEjectChange"
          >
            <span
              v-for="(v,k) of topButs"
              :key="k"
              class="sli but-blue"
              @click="onClickTop(v.id, v)"
            >
              <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
              {{v.alias}}
            </span>
            <template v-if="batchButs && batchButs.length > 0">
              <div class="full-list" v-show="!list[0].show">
                <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
              </div>
              <!-- <div class="cover-up" v-show="range == 2">
                <el-checkbox disabled v-model="range" true-label="2" false-label="1"></el-checkbox>
              </div>-->
              <batch-but
                class="sli but-blue"
                text="批量下发"
                :list="listArrs"
                :param="batchButs"
                @onClick="onBatchClick"
              ></batch-but>
            </template>
          </paging-table>
        </el-main>
      </el-container>
    </fel-left-tree>
    <!-- 指令下发 -->
    <instructions
      @onRefresh="onRefreshs"
      :param="param"
      :paramObj="listArrs"
      :isBatch="isBatch"
      :range="range"
      :agid="agid"
      :dialogVisible="dialogVisible"
      @beforeClose="beforeClose"
    ></instructions>
    <!-- 设备信息 -->
    <configureInfo :param="param" :dialogVisible="dialogVisibleInfo" @beforeClose="beforeCloseInfo"></configureInfo>
    <!-- 记录查询 -->
    <history
      :paramObj="param"
      :dialogVisibleHistory="dialogVisibleHistory"
      @beforeClose="beforeCloseHistory"
    ></history>
    <!-- <history
      :paramObj="param"
      :dialogVisibleHistory="dialogVisibleRight"
      @beforeClose="beforeCloseRight"
    ></history>-->
    <batchQueryZl :dialogVisible="dialogVisibleZL" @beforeClose="beforeCloseZL"></batchQueryZl>
    <!-- 授权管理 -->
    <grant
      :btnRight="rightBut"
      :dialogVisible="dialogVisibleGrant"
      :paramObj="param"
      @beforeClose="beforeCloseGrant"
    ></grant>
    <reload :dialogVisible="dialogVisibleReload" @beforeClose="beforeCloseReload"></reload>
    <notRight
      :btnRight="notBut"
      :paramObj="paramNot"
      :dialogVisible="dialogVisibleNot"
      @beforeClose="beforeCloseNot"
    ></notRight>
  </el-container>
</template>

<script>
import notRight from "./dialog/notRight";
import grant from "./dialog/grant/index";
import reload from "./dialog/reload";
import Storages from "../../utils/Storage.js"; //缓存工具
// import zlxfdialog from "./dialog/zlxfdialog";
import instructions from "./dialog/instructions";
import configureInfo from "./dialog/configureInfo";
import history from "./dialog/history";
import batchQueryZl from "./dialog/batchQueryZl";
export default {
  name: "mjgl590",
  components: {
    reload,
    grant,
    instructions,
    configureInfo,
    history,
    batchQueryZl,
    notRight
    // zlxfdialog
  },
  data() {
    let $this = this;
    return {
      paramObjZl: [],
      isBatch: false,
      dialogVisibleReload: false,
      dialogVisible: false,
      dialogVisibleRight: false,
      dialogVisibleInfo: false,
      dialogVisibleHistory: false,
      dialogVisibleGrant: false,
      dialogVisibleZL: false,
      isSelectable: true,
      dialogVisibleNot: false,
      rightBut: [],
      notBut: [],
      batchButs: [],
      refreshTree: 0,
      range: "1",
      fatheragid: {},
      paramNot: {},
      param: {
        searchtype: "0"
      },
      listBut: [],
      topButs: [],
      list: [
        {
          type: "selection",
          selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "门名称",
          prop: "adname",
          width: "90px"
        },
        {
          name: "门类型",
          prop: "adtype",
          width: "90px"
        },
        {
          name: "读头唯一ID",
          prop: ""
        },
        {
          name: "关联读头数量",
          prop: "adhcount",
          width: "90px"
        },
        {
          name: "门外读头支持授权",
          prop: "adoutauths",
          width: "90px"
        },
        {
          name: "所属门禁",
          prop: "amname"
        },
        {
          name: "主控板ID",
          prop: "amcode"
        },
        {
          name: "授权数量",
          template: {
            props: ["scope"],
            computed: {
              total() {
                let row = this.scope.row;
                return (
                  Number(row.adcardcount) ||
                  0 + Number(row.adpasscount) ||
                  0 + Number(row.adappcount) ||
                  0 + Number(row.adfingercount) ||
                  0 + Number(row.adfacecount) ||
                  0
                );
              }
            },
            methods: {
              onClick(obj) {
                $this.onRightClick("1", obj);
              }
            },
            template: `
            <el-tooltip placement="bottom-end">
              <div slot="content">卡片 : {{scope.row.adcardcount}}<br/>密码 : {{scope.row.adpasscount}}<br/>蓝牙 : {{scope.row.adappcount}}<br/>指纹 : {{scope.row.adfingercount}}<br/>人脸 : {{scope.row.adfacecount}}</div>
              <el-button type="text" @click="onClick(scope.row)">{{total}}</el-button>
            </el-tooltip>`
          }
        },
        {
          name: "未下发授权",
          template: {
            props: ["scope"],
            computed: {
              total() {
                let row = this.scope.row;
                return (
                  Number(row.adcardnocount) ||
                  Number(row.adpassnocount) ||
                  Number(row.adfingernocount) ||
                  Number(row.adfacenocount)
                );
              }
            },
            mounted() {
              let row = this.scope.row;
              console.log(
                "this.total",
                this.total,
                Number(row.adcardnocount),
                Number(row.adpassnocount),
                Number(row.adfingernocount),
                Number(row.adfacenocount)
              );
            },
            methods: {
              onClick(obj) {
                $this.onRightClick("2", obj);
              }
            },
            template: `
            <el-tooltip placement="bottom-end">
              <div slot="content">卡片 : {{scope.row.adcardnocount}}<br/>密码 : {{scope.row.adpassnocount}}<br/>指纹 : {{scope.row.adfingernocount}}<br/>人脸 : {{scope.row.adfacenocount}}</div>
              <el-button type="text" @click="onClick(scope.row)">{{total}}</el-button>
            </el-tooltip>`
          }
        },
        {
          name: "主控板状态",
          prop: "amstate",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.amstate;
                if (value == "在线") {
                  return "puc-pg";
                } else if (value == "离线") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class='getClass()'>{{scope.row.amstate}}</span>`
          }
        },
        {
          name: "操作",
          width: "150px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, Object.assign({}, this.scope.row));
              }
            },
            template: `<div class="operat-buts"> 
      <fel-button v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.type)">{{v.name}}</fel-button>
</div>`
          }
        }
      ],
      refresh: 0,
      listArrs: [],
      sonmenu: 0,
      agid: ""
    };
  },
  created() {
    this.inGetsonmenu();
  },
  mounted() {
    this.getEject();
  },
  computed: {},
  methods: {
    beforeCloseHistory() {
      this.dialogVisibleHistory = false;
    },
    beforeCloseZL() {
      this.dialogVisibleZL = false;
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    beforeCloseInfo() {
      this.dialogVisibleInfo = false;
    },
    beforeCloseGrant() {
      this.dialogVisibleGrant = false;
    },
    beforeCloseReload() {
      this.dialogVisibleReload = false;
    },
    beforeCloseRight() {
      this.dialogVisibleRight = false;
    },
    beforeCloseNot() {
      this.dialogVisibleNot = false;
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    onSelectable() {
      return this.isSelectable;
    },
    onRightClick(key, obj) {
      console.log("obj", key, obj);
      if (key == "1") {
        this.dialogVisibleRight = true;
        this.param = obj;
      } else {
        this.paramNot = {
          adid: obj.adid,
          amid: obj.amid
        };
        this.dialogVisibleNot = true;
      }
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.range = "1";
      this.isSelectable = true;
      this.onRefresh();
    },
    onSelection(data) {
      this.listArrs = data;
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: "824" }, "1")
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            if (id == "826") {
              this.listBut.push({ name: "指令下发", type: "1" });
              // if (value && value.childs && value.childs.length > 0) {
              //   this.paramObjZl = value.childs.map(item => {
              //     return item.entity;
              //   });
              //   this.batchButs = value.childs.map(item => {
              //     return item.entity;
              //   });
              // }
            } else if (id == "825") {
              this.listBut.push({ name: "记录查询", type: "2" });
            } else if (id == "828") {
              this.listBut.push({ name: "设备详情", type: "3" });
            } else if (id == "827") {
              this.listBut.push({ name: "授权管理", type: "4" });
              this.rightBut = value.childs;
              console.log("this.rightBut", this.rightBut);
            } else if (id == "829") {
              this.batchButs.push(value.entity);
            } else if (id == "844") {
              this.topButs.push(value.entity);
            } else if (id == "850") {
              this.notBut.push(value.childs[0].entity);
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onRefreshs() {
      this.onRefresh();
      this.onRefreshTree();
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onRefreshTree() {
      this.refreshTree = new Date().getTime();
    },
    handleNodeClick(data) {
      this.fatheragid = data;
      this.agid = data.agid;
      this.onRefresh();
    },
    onBatchClick(key, obj) {
      if (key == "829") {
        this.isBatch = true;
        this.dialogVisible = true;
      }
    },
    onClickTop(key, data) {
      if (key == "844") {
        this.dialogVisibleZL = true;
        console.log("key,data", key, data, this.dialogVisibleZL);
      }
    },
    onClick(key, data) {
      if (key == 1) {
        this.isBatch = false;
        this.param = data;
        this.dialogVisible = true;
      } else if (key == 2) {
        this.dialogVisibleHistory = true;
        this.param = data;
      } else if (key == 3) {
        this.dialogVisibleInfo = true;
        this.param = data;
      } else if (key == 4) {
        // this.dialogVisibleGrant = true;
        this.dialogVisibleGrant = true;
        this.param = data;
      }
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "mjgl590");
    },
    getEject() {
      this.$common.getEject(this, "list", "mjgl590");
    }
  }
};
</script>
