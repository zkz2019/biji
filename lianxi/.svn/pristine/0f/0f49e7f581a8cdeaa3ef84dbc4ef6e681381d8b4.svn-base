<template>
  <fel-dialog
    :title="title"
    top="5vh"
    width="60%"
    min-width="740px"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <fel-form
      v-loading="loading"
      ref="felForm"
      :selects="selects"
      @submitForm="submitForm"
      @closeForm="beforeClose"
      width="140px"
      dynamic
      :defaultData="defaultData"
      :formData="formData"
    ></fel-form>
    <personnel
      :param="cardParam"
      @onSelect="onSelect"
      :interfaceUrl="interfaceUrl"
      @beforeClose="personDialog=false"
      :dialogVisible="personDialog"
    ></personnel>
  </fel-dialog>
</template>

<script>
import { mapGetters } from "vuex";
import judge from "@/utils/judge.js";
import personnel from "./personnel";
export default {
  components: {
    personnel
  },
  props: {
    dialogVisible: Boolean,
    param: Object
  },
  data() {
    let $this = this;
    return {
      loading: false,
      cardParam: {},
      interfaceUrl: "/system/user/save/1/getperson",
      cardRefresh: 0,
      personDialog: false,
      defaultData: {
        usertype: "2",
        userrole: [],
        dictionary: {}
      },
      title: "",
      pgidObj: {},
      selects: {
        persontype: [],
        userrole: [],
        dictionary: []
      },
      formData: [
        {
          value: "userlogin", //值,
          name: "账户名", //名称,
          type: "text", //input输入框的类型 或者 select,
          width: "50%",
          rules: [{ required: true, message: "请输入账户名", trigger: "blur" }] //表格校验 Array
        },
        {
          value: "usertype", //值,
          name: "账户类型", //名称,
          type: "select", //input输入框的类型 或者 select,
          width: "50%",
          disabled: false,
          select: [
            {
              label: "管理者",
              value: "1"
            },
            {
              label: "使用者",
              value: "2"
            },
            {
              label: "售后者",
              value: "3"
            },
            {
              label: "管理+售后",
              value: "4"
            }
          ],
          onChange: this.onChangeType,
          rules: [
            { required: true, message: "请选择账户类型", trigger: "change" }
          ] //表格校验 Array
        },
        {
          value: "password", //值,
          name: "密码", //名称,
          type: "password", //input输入框的类型 或者 select,
          width: "50%",
          rules: [
            {
              validator: (rule, value, callback) => {
                let password = $this.$refs.felForm.ruleForm.password2;
                if (!value && value !== 0) {
                  if (password) {
                    callback(new Error("请输入密码"));
                  } else {
                    callback();
                    $this.$refs.felForm.validateField("password2");
                  }
                } else if (password) {
                  callback();
                  $this.$refs.felForm.validateField("password2");
                } else {
                  callback();
                  $this.$refs.felForm.validateField("password2");
                }
              },
              trigger: "blur"
            }
          ] //表格校验 Array
        },
        {
          value: "password2", //值,
          name: "确认密码", //名称,
          type: "password", //input输入框的类型 或者 select,
          width: "50%",
          rules: [
            {
              validator: (rule, value, callback) => {
                let password = $this.$refs.felForm.ruleForm.password;
                if (!value && value !== 0) {
                  if (password) {
                    callback(new Error("请输入确认密码"));
                  } else {
                    callback();
                  }
                } else if (password && password != value) {
                  callback(new Error("与密码不一致!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ] //表格校验 Array
        },
        {
          noShow: true,
          value: "userrole", //值,
          name: "账户角色", //名称,
          type: "select", //input输入框的类型 或者 select,
          select: "userrole",
          svalue: "",
          slabel: "",
          multiple: true,
          onChange: this.onRoleChange,
          ref: "onRoleChange",
          rules: [
            { required: true, message: "请选择账户角色", trigger: "change" },
            {
              validator: (rule, value, callback) => {
                if (!value || value.length == 0) {
                  callback(new Error("请选择账户角色"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ] //表格校验 Array
        },
        {
          value: "dictionary", //值,
          name: "数据字典", //名称,
          type: "select", //input输入框的类型 或者 select,
          select: "dictionary",
          vkey: "dictionaryid",
          svalue: "",
          slabel: "dictionaryname",
          width: "50%",
          rules: [
            { required: true, message: "请选择数据字典", trigger: "change" },
            {
              validator: (rule, value, callback) => {
                if (
                  !value ||
                  value.length == 0 ||
                  Object.keys(value).length == 0
                ) {
                  callback(new Error("请选择数据字典"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ] //表格校验 Array
        },
        {
          value: "useredate", //值,
          name: "账户到期时间", //名称,
          type: "date",
          placeholder: "长期",
          date: "datetime",
          format: "yyyy-MM-dd HH:mm:ss",
          width: "50%"
        },
        {
          value: "username", //值,
          name: "使用者姓名", //名称,
          type: "text", //input输入框的类型 或者 select,
          width: "50%",
          buts: [
            {
              class: "but-connect",
              title: "搜索人员信息",
              icon: "el-icon-search",
              onClick: this.personClick
            }
          ]
        },
        {
          disabled: true,
          value: "persontype", //值,
          name: "使用人类型", //名称,
          type: "select", //input输入框的类型 或者 select,
          select: "persontype",
          svalue: "type",
          slabel: "typename",
          width: "50%",
          placeholder: ""
          // rules: [
          //   { required: true, message: "请选择使用人类型", trigger: "change" }
          // ]
        },
        {
          value: "personcode", //值,
          name: "使用者标识", //名称,
          type: "input", //input输入框的类型 或者 select,
          width: "50%"
        },
        {
          value: "personlocation", //值,
          name: "使用者组织", //名称,
          type: "text", //input输入框的类型 或者 select,
          width: "50%",
          readonly: true
        },
        {
          value: "personcard", //值,
          name: "使用者身份证号", //名称,
          type: "text", //input输入框的类型 或者 select,
          width: "50%",
          readonly: true
        },
        {
          value: "usermobile", //值,
          name: "使用者手机号", //名称,
          type: "text", //input输入框的类型 或者 select,
          width: "50%",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isMobile(value)) {
                  callback(new Error("手机号码格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          value: "userwx", //值,
          name: "使用者微信号", //名称,
          type: "text", //input输入框的类型 或者 select,
          width: "50%",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isWeChat(value)) {
                  callback(new Error("微信号格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          value: "useremail", //值,
          name: "使用者邮箱", //名称,
          type: "text", //input输入框的类型 或者 select,
          width: "50%",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isEmail(value)) {
                  callback(new Error("邮箱格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          value: "userremark", //值,
          name: "备注", //名称,
          type: "text", //input输入框的类型 或者 select,
          width: "50%"
        },
        {
          noShow: true,
          value: "usertype2", //值,
          name: "售后", //名称,
          type: "select", //input输入框的类型 或者 select,
          select: [
            { label: "是", value: "1" },
            { label: "否", value: "0" }
          ],
          // rules:[{required:true,message:"请选择是否售后!",trigger:"change"}],
          width: "50%"
        },
        {
          value: "userimage", //值,
          name: "logo", //名称,
          uWidth: "180px",
          uHeight: "46px",
          type: "uploadImg", //上传
          url: "/system/user/save/3/uploaduserlogo",
          urlObtain: "/system/user/update/5/downuserimage",
          width: "50%"
        },
        {
          value: "userdate", 
          name: "账户创建时间",
          readonly:true,
          type: "text",
          width: "50%"
        },
         {
          value: "userlastdate", 
          name: "最后变动时间",
          type: "text",
          readonly:true,
          width: "50%"
        },
      ],
      button: [
        {
          type: "2",
          name: "确认"
        },
        {
          type: "1",
          name: "取消"
        }
      ]
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.cardParam = {
          search: ""
        };
        if (this.param.userlogin) {
          this.title = "修改账户";
          this.formData[0].disabled = true;
          // this.formData[1].disabled = true;
          this.formData[4].noShow = true;
          this.interfaceUrl = "/system/user/update/2/getperson";
          setTimeout(() => {
            this.inGetuserinfo();
            this.setRules();
          }, 0);
        } else {
          this.title = "添加账户";
          this.formData[0].disabled = false;
          // this.formData[1].disabled = false;
          this.interfaceUrl = "/system/user/save/1/getperson";
          setTimeout(() => {
            this.setRules();
          }, 0);
        }
        this.inSelectType();
      }
    }
  },
  created() {
    this.inSelectType();
  },
  methods: {
    ...mapGetters(["getNumber"]),
    onRoleChange(/*arr, obj*/) {
      this.$refs.felForm.$refs.onRoleChange[0].blur();
    },
    setRules() {
      if (this.param.userlogin) {
        this.formData[2].placeholder = "不填为不修改密码";
        this.formData[3].placeholder = "不填为不修改密码";
        this.$refs.felForm.rules.password;
        if (this.$refs.felForm.rules.password.length > 1) {
          this.$refs.felForm.rules.password.splice(1);
          this.$refs.felForm.rules.password2.splice(1);
        }
      } else {
        this.formData[2].placeholder = "请输入密码";
        this.formData[3].placeholder = "请输入确认密码";
        if (this.$refs.felForm.rules.password.length == 1) {
          this.$refs.felForm.rules.password.push({
            required: true,
            message: "请输入密码",
            trigger: "blur"
          });
          this.$refs.felForm.rules.password2.push({
            required: true,
            message: "请输入确认密码",
            trigger: "blur"
          });
        }
        this.defaultData = {
          usertype: "2",
          userrole: [],
          dictionary: {}
        };
        this.formData[4].noShow = true;
        // this.formData[16].noShow = true;
      }
    },
    personClick() {
      this.personDialog = true;
    },
    onSelect(data) {
      if (data && data.personname) {
        if (this.$refs.felForm) {
          this.$refs.felForm.ruleForm = Object.assign(
            this.$refs.felForm.ruleForm,
            {
              personlocation: data.personlocation,
              personcard: data.personcard,
              useremail: data.personemail,
              usermobile: data.personmobile,
              username: data.personname,
              personcode: data.personcode,
              persontype: Number(data.persontype) || ""
            }
          );
        }
        this.personDialog = false;
      }
    },
    onChangeType(arr) {
      if (arr[0] == "1" || arr[0] == "4") {
        this.formData[4].noShow = false;
        // this.formData[16].noShow = false;
      } else {
        this.formData[4].noShow = true;
        // this.formData[16].noShow = true;
      }
    },
    inSelectType() {
      let url = "/system/user/save/2/getsaveuserinfo";
      this.$ajax(url, {}, "1")
        .then(res => {
          let result = res.result;
          this.selects.userrole = result.userrole;
          this.selects.dictionary = result.userdictionary;
        })
        .catch(err => {
          console.log("err", err);
        });
      this.$ajax("/system/user/save/5/getpersontype", {}, "1")
        .then(res => {
          this.selects.persontype = res.result;
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    inGetuserinfo() {
      this.loading = true;
      this.$ajax(
        "/system/user/update/1/getuserinfo",
        { userlogin: this.param.userlogin },
        "1",
        {}
      )
        .then(res => {
          let result = res.result;
          this.selects.userrole = result.userroles;
          this.selects.dictionary = result.userdictionary;
          if (result.usertype == "1") {
            // this.formData[16].noShow = false;
          } else {
            // this.formData[16].noShow = true;
          }
          if (result.usertype == "1" || result.usertype == "4") {
            this.formData[4].noShow = false;
          } else {
            this.formData[4].noShow = true;
          }
          this.defaultData = {
            persontype: Number(result.persontype) || "",
            dictionary: {
              dictionaryid: result.dictionaryid,
              dictionaryname: result.dictionaryname
            },
            password: "",
            password2: "",
            userrole: result.userrole,
            usertype2: result.usertype2,
            personcard: result.personcard,
            personcode: result.personcode,
            useredate: result.useredate,
            useremail: result.useremail,
            userhomeconfig: result.userhomeconfig,
            userlockconfig: result.userlockconfig,
            userimage: result.userimage,
            userlogin: result.userlogin,
            usermobile: result.usermobile,
            username: result.username,
            userremark: result.userremark,
            usertype: result.usertype,
            userwx: result.userwx,
            personlocation: result.personlocation,
            userdate:result.userdate,
            userlastdate:result.userlastdate,

          };
          this.loading = false;
        })
        .catch(err => {
          this.loading = false;
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    add(data) {
      let arr = data.userrole;
      data.dictionaryid = data.dictionary.dictionaryid;
      data.dictionaryname = data.dictionary.dictionaryname;
      delete data.dictionary;
      delete data.userrole;
      this.$ajax("/system/user/save/4/saveuser", data, "1", arr, true)
        .then(() => {
          this.beforeClose();
          this.$message({
            message: this.title + "成功",
            type: "success"
          });
          this.$emit("onRefresh");
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },

    modify(data) {
      let arr = data.userrole;
      data.dictionaryid = data.dictionary.dictionaryid;
      data.dictionaryname = data.dictionary.dictionaryname;
      delete data.dictionary;
      delete data.userrole;
      this.$ajax("/system/user/update/4/updateuser", data, "1", arr, true)
        .then(() => {
          this.beforeClose();
          this.$message({
            message: this.title + "成功",
            type: "success"
          });
          this.$emit("onRefresh");
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },

    submitForm(data) {
      if (this.param.userlogin) {
        this.modify(data);
      } else {
        this.add(data);
      }
    },
    beforeClose() {
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].resetForm();
      }
      this.$emit("beforeClose");
    }
  }
};
</script>
