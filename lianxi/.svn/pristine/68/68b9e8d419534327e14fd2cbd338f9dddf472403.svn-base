<!-- 数据字典 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
    </el-header>
    <el-main class="query_main">
      <paging-table
        height="100%"
        interface="/system/parameter/wordbook/2/getdatadictionary"
        class="heig100"
        :list="list"
        :refresh="refresh"
      >
        <!-- <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>-->
      </paging-table>
    </el-main>
    <el-dialog
      title="编辑"
      width="40%"
      :close-on-click-modal="false"
      append-to-body
      :before-close="closeForm"
      :visible.sync="dialogForm"
    >
      <fel-form
        :formData="formModify"
        class="single-row"
        ref="dctFelFormAdd"
        width="140px"
        dynamic
        @closeForm="closeForm"
        @submitForm="submitForm"
        :defaultData="form"
      ></fel-form>
    </el-dialog>
    <!-- <el-dialog
      title="修改字典"
      top="10vh"
      width="70%"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="dialogVisible"
    >
      <el-container class="dialog-table wh100">
        <paging-table
          interface="/system/parameter/wordbook/update/1/getwordbookdetails"
          :param="grantParam"
          :refresh="grantRefresh"
          :list="grantList"
        />
      </el-container>
      <el-dialog
        title="修改"
        width="40%"
        :close-on-click-modal="false"
        append-to-body
        :before-close="closeForm"
        :visible.sync="dialogForm"
      >
        <fel-form
          :formData="formModify"
          class="single-row"
          ref="dctFelFormAdd"
          width="140px"
          dynamic
          @closeForm="closeForm"
          @submitForm="submitForm"
          :defaultData="form"
        ></fel-form>
      </el-dialog>
    </el-dialog>
    <el-dialog
      title="新建字典"
      width="60%"
      :close-on-click-modal="false"
      :before-close="closeFormAdd"
      :visible.sync="dialogFormAdd"
    >
      <fel-form
        :formData="formData"
        ref="dctFelFormAdd"
        width="150px"
        dynamic
        @closeForm="closeFormAdd"
        @submitForm="submitFormAdd"
        :defaultData="defaultDataAdd"
      ></fel-form>
    </el-dialog>-->
  </el-container>
</template>

<script>
export default {
  props: ["toParam"],
  created() {
    this.inGetsonmenu();
    this.queryAdd();
  },
  data() {
    let $this = this;
    return {
      formModify: [
        {
          name: "名称",
          type: "text",
          value: "ddname"
        },
        {
          name: "说明",
          type: "text",
          value: "ddremark"
        }
      ],
      rigButs: [],
      defaultDataAdd: {},
      button: [{ type: 2, name: "确认" }],
      formData: [
        {
          name: "字典名称",
          type: "text",
          value: "wbname",
          rules: [
            { required: true, message: "请输入字典名称", trigger: "blur" }
          ]
        },
        {
          name: "字典说明",
          type: "textarea",
          value: "wbbei",
          rules: [
            { required: true, message: "请输入字典说明", trigger: "blur" }
          ]
        }
      ],
      dialogFormAdd: false,
      form: {},
      dialogForm: false,
      grantParam: {
        wbid: ""
      },
      grantRefresh: 0,
      // grantList: [
      //   {
      //     name: "项目",
      //     prop: "wbditem"
      //   },
      //   {
      //     name: "ID",
      //     prop: "wbdid"
      //   },
      //   {
      //     name: "名称",
      //     prop: "wbdvalue"
      //   },
      //   {
      //     name: "操作",
      //     width: "80px",
      //     template: {
      //       props: ["scope"],
      //       methods: {
      //         onClick(key) {
      //           $this.onClick(key, Object.assign({}, this.scope.row));
      //         }
      //       },
      //       template: `<div class="operat-buts">
      //        <el-button type="text" size="small" @click.stop="onClick(10)">修改</el-button>
      //       </div>`
      //     }
      //   },
      //   {
      //     name: "备注",
      //     prop: "wbdbei"
      //   }
      // ],
      dialogVisible: false,
      topButs: [
        // {
        //   type: "a1",
        //   name: "新建字典"
        // }
      ],
      queryAddBot: false,
      refresh: 0,
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "字典类型名称",
          prop: "ddtypename"
        },
        {
          name: "字典初始名称",
          prop: "ddinitname"
        },
        {
          name: "字典当前名称",
          prop: "ddname"
        },

        {
          name: "最后修改时间",
          prop: "ddudate"
        },
        {
          name: "最后修改账户",
          prop: "userlogin"
        },
        {
          name: "备注",
          prop: "ddremark"
        },
        {
          name: "操作",
          width: "120px",
          template: {
            props: ["scope"],
            computed: {
              rigButs() {
                return $this.rigButs;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, Object.assign({}, this.scope.row));
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="v of rigButs" type="text" size="small" @click.stop="onClick(v.type,v)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      queryAddB: false,
      addList: [],
      sonmenu: 0
    };
  },
  methods: {
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          if (res.result) {
            res.result.forEach(value => {
              let id = value.entity.id;
              let alias = value.entity.alias;
              if (id == "429") {
                this.rigButs.push({
                  name: "编辑",
                  type: "1"
                });
              } else if (id == "431") {
                this.rigButs.push({
                  name: "初始化",
                  type: "2"
                });
              }
            });
          }
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    queryAdd(show) {
      if (!this.queryAddB) {
        this.queryAddB = true;
        if (!this.queryAddBot) {
          this.$ajax(
            "/system/parameter/wordbook/save/1/getwordbookfiled",
            {},
            "1"
          )
            .then(res => {
              let arr = res.result;
              this.addList = arr;
              if (arr) {
                arr.forEach(obj => {
                  let dao = {
                    width: "50%",
                    name: obj.wbditem,
                    type: "text",
                    value: obj.wbdcode,
                    placeholder: obj.wbdask,
                    rules: [
                      {
                        required: true,
                        message: "请输入" + obj.wbditem,
                        trigger: "blur"
                      }
                    ]
                  };
                  this.formData.push(dao);
                });
              }
              this.queryAddBot = true;
              if (show) {
                this.dialogFormAdd = true;
              }
            })
            .catch(err => {});
        } else {
          if (show) {
            this.dialogFormAdd = true;
          }
        }
      } else {
        if (show) {
          this.dialogFormAdd = true;
        }
      }
    },
    submitFormAdd(data) {
      let arrs = this.addList.map(obj => {
        obj.wbdvalue = data[obj.wbdcode];
        return obj;
      });
      this.$ajax(
        "/system/parameter/wordbook/save/2/savewordbook",
        {
          wbbei: data.wbbei,
          wbname: data.wbname
        },
        "1",
        arrs,
        true
      )
        .then(res => {
          this.closeFormAdd();
          this.onRefresh();
          this.$message({
            message: "新建字典成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    closeFormAdd() {
      if (this.$refs["dctFelFormAdd"]) {
        this.$refs["dctFelFormAdd"].resetForm();
      }
      this.dialogFormAdd = false;
    },
    submitForm(data) {
      let obj = {
        ddid: data.ddid,
        ddname: data.ddname,
        ddremark: data.ddremark
      };
      console.log("obj", obj);
      this.$ajax(
        "/system/parameter/wordbook/update/3/updatedatadictionary",
        obj,
        "1",
        {},
        true
      )
        .then(res => {
          this.dialogForm = false;
          this.onRefresh();
          this.$message({
            message: "修改成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    closeForm() {
      this.dialogForm = false;
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onClick(key, data) {
      console.log("key,data", key, data);
      if (key == "2") {
        this.$confirm("此操作将初始化当前数据字典, 是否继续?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/parameter/wordbook/delete/3/restoredatadictionary",
              {
                ddid: data.ddid
              },
              "1",
              {},
              true
            )
              .then(res => {
                this.onRefresh();
                this.$message({
                  message: "恢复初始成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      } else if (key == "1") {
        this.form = data;
        this.dialogForm = true;
        // this.$confirm("此操作将删除当前数据字典, 是否继续?", "提示", {
        //   confirmButtonText: "确定",
        //   cancelButtonText: "取消",
        //   type: "warning"
        // })
        //   .then(() => {
        //     this.$ajax(
        //       "/system/parameter/wordbook/delete/1/deletewordbook",
        //       {
        //         wbid: data.wbid
        //       },
        //       "1",
        //       {},
        //       true
        //     )
        //       .then(res => {
        //         this.onRefresh();
        //         this.$message({
        //           message: "删除成功",
        //           type: "success"
        //         });
        //       })
        //       .catch(err => {
        //         this.$message({
        //           showClose: true,
        //           message: `[${err.resultCode}] ` + err.resultMsg,
        //           type: "error"
        //         });
        //       });
        //   })
        //   .catch(() => {});
      }
      //  else if (key == 0) {
      //   this.grantParam.wbid = data.wbid;
      //   this.grantRefresh = new Date().getTime();
      //   this.dialogVisible = true;
      // } else if (key == 10) {
      //   this.form = data;
      //   this.dialogForm = true;
      // } else if (key == "428") {
      //   this.queryAdd(true);
      // }
    }
  }
};
</script>