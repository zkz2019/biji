<!-- 子账号 -->
<template>
  <el-dialog
    title="子账号"
    :visible.sync="dialogVisible"
    width="75%"
    top="5%"
    :before-close="handleClose"
    :close-on-click-modal="false"
    append-to-body
    class="el-dialogs"
  >
    <el-container class="dialog-table wh100">
      <fel-left-tree>
        <div slot="left" class="left-tree">
          <fel-tree 
            ref="felTree"
            interface="/system/user/son/1/getsonusertree"
            @handleNodeClick="handleNodeClick"
            :refresh="treeRefresh"
            :param="treeParam"
            nodeKey="userlogin"
            :isUser="true"
            :defaultProps="{label: 'userlogin',isLeaf: 'isLeaf'}"
          ></fel-tree>
        </div>
        <el-container class="organiztion_container">
          <paging-table
            ref="pagingTable"
            noInit
            height="100%"
            interface="/system/user/son/2/getsonuser"
            @onSelection="onSelection"
            @sort-change="sortChange"
            :list="list"
            :param="paramTable"
            :refresh="tableRefresh"
            @onRefreshTable="onRefreshTable"
          >
            <!-- <el-header> -->
            <span class="sli leftInp">
              <!-- <inpbox :inpb="true"> -->
              <el-select v-model="paramTable.state" class="wid100p qh_inp mar0-10">
                <el-option
                  v-for="item in states"
                  :key="item.value"
                  :label="item.statename"
                  :value="item.state"
                ></el-option>
              </el-select>
              <!-- </inpbox> -->
              <!-- <inpbox inptext="类型"> -->
              <el-select v-model="paramTable.type" class="wid100p qh_inp mar0-10">
                <el-option
                  v-for="item in types"
                  :key="item.value"
                  :label="item.statename"
                  :value="item.state"
                ></el-option>
              </el-select>
              <el-input
                clearable
                class="wid150 mar0-10"
                v-model="paramTable.search"
                :placeholder="'输入组织名称进行组织搜索'"
              ></el-input>
              <!-- </inpbox> -->
              <fel-button type="primary" @click="onRefreshTable">查询</fel-button>
              <fel-button @click="onReset">查询</fel-button>
            </span>
            <!-- </el-header> -->
          </paging-table>
        </el-container>
      </fel-left-tree>
    </el-container>
  </el-dialog>
</template>

<script>
import { mapGetters } from "vuex";
export default {
  props: {
    dialogVisible: Boolean,
    param: Object
  },
  data() {
    return {
      // top:"",
      // width:"",
      tableRefresh: 0,
      treeRefresh: 0,
      paramTable: {
        state: "",
        search: "",
        sortby: "",
        sequence: "",
        type: "",
        userlogin: ""
      },
      treeParam: { userlogin: "" },
      states: [
        {
          statename: "全部状态",
          state: ""
        },
        {
          statename: "正常",
          state: "1"
        },
        {
          statename: "停用",
          state: "0"
        }
      ],
      types: [
        {
          statename: "全部类型",
          state: ""
        },
        {
          statename: "使用者",
          state: "2"
        },
        {
          statename: "管理者",
          state: "1"
        },
        {
          statename: "售后者",
          state: "3"
        },
        {
          statename: "售后管理者",
          state: "4"
        }
      ],
      list: [
        // {
        //   type: "selection"
        // },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "账户",
          sortable: "custom",
          minWidth: "80px",
          prop: "userlogin"
        },
        {
          name: "账户类型",
          sortable: "custom",
          minWidth: "90px",
          prop: "usertype"
        },
        {
          name: "账户角色",
          sortable: "custom",
          minWidth: "110px",
          prop: "userrole"
        },
        {
          name: "数据字典",
          sortable: "custom",
          minWidth: "90px",
          prop: "dictionaryname"
        },
        {
          name: "姓名",
          minWidth: "70px",
          sortable: "custom",
          prop: "username"
        },
        {
          name: "手机号",
          minWidth: "100px",
          sortable: "custom",
          prop: "usermobile"
        },
        {
          name: "创建人",
          minWidth: "90px",
          sortable: "custom",
          prop: "userlogin2"
        },
        {
          name: "创建时间",
          minWidth: "100px",
          sortable: "custom",
          prop: "userdate",
          template: {
            props: ["scope"],
            methods: {
              getdate(data) {
                if (this.scope.row.userdate.length == 0) {
                  return false;
                }
                if (data) {
                  return this.scope.row.userdate.substr(0, 10);
                } else {
                  return this.scope.row.userdate.substr(11);
                }
              }
            },
            template: `<ul v-if="getdate()"><li>{{getdate(true)}}</li><li>{{getdate(false)}}</li></ul>`
          }
        },
        {
          name: "最后变动时间",
          prop: "userlastdate",
          sortable: "custom",
          width: "125px",
          template: {
            props: ["scope"],
            methods: {
              getdate(data) {
                if (this.scope.row.userlastdate.length == 0) {
                  return false;
                }
                if (data) {
                  return this.scope.row.userlastdate.substr(0, 10);
                } else {
                  return this.scope.row.userlastdate.substr(11);
                }
              }
            },
            template: `<ul v-if="getdate()"><li>{{getdate(true)}}</li><li>{{getdate(false)}}</li></ul>`
          }
        },
        {
          name: "状态",
          sortable: "custom",
          minWidth: "80px",
          template: {
            props: ["scope"],
            template: `<span :class='scope.row.userstate=="正常"?"puc-pg":"puc-px"'>{{scope.row.userstate}}</span>`
          }
        },
        {
          noClose: true,
          show: true,
          sortable: "custom",
          name: "超级权限",
          template: {
            props: ["scope"],
            template: `<span :class='scope.row.userisadmin=="是"?"puc-pg":"puc-px"'>{{scope.row.userisadmin}}</span>`
          }
        },
        {
          name: "备注",
          minWidth: "80px",
          sortable: "custom",
          prop: "userremark"
        }
        // {
        //   name: "操作",
        //   width: "220px",
        //   template: {
        //     props: ["scope"],
        //     computed: {
        //       isdisable() {
        //         if (this.scope.row.usertype == "售后者") {
        //           return true;
        //         } else {
        //           return false;
        //         }
        //       },
        //       listBut() {
        //         let listBut = [];
        //         let userstate = this.scope.row.userstate;
        //         if (userstate == "正常") {
        //           userstate = 1;
        //         } else if (userstate == "停用") {
        //           userstate = 2;
        //         }
        //         if ($this.isSuper) {
        //           let isSuper = this.scope.row.userisadmin;
        //           if (isSuper == "是") {
        //             isSuper = 1;
        //           } else if (isSuper == "否") {
        //             isSuper = 2;
        //           }
        //           listBut[2] = $this.listBut[2].filter(obj => {
        //             if (isSuper == 2 && obj.type == 17) {
        //               return false;
        //             } else if (isSuper == 1 && obj.type == 16) {
        //               return false;
        //             } else {
        //               return true;
        //             }
        //           });
        //         }
        //         listBut[0] = $this.listBut[0].filter(obj => {
        //           if (userstate == 2 && obj.type == 7) {
        //             return false;
        //           } else if (userstate == 1 && obj.type == 6) {
        //             return false;
        //           } else {
        //             return true;
        //           }
        //         });
        //         listBut[1] = $this.listBut[1];
        //         return listBut;
        //       }
        //     },
        //     methods: {
        //       onClick(key) {
        //         $this.onClick(key, Object.assign({}, this.scope.row));
        //       }
        //     },
        //     template: `<div class="operat-buts">
        //     <template v-for="(val,key) of listBut">
        //       <span class="buts-div" v-if="val && val.length > 0" :key="key">
        //       <el-button v-for="(v,i) of val" :disabled="isdisable" :key="i" type="text" size="small" @click.stop="onClick(v.type||v.id)">{{v.name||v.alias}}</el-button>
        //       </span>
        //     </template>
        //     </div>`
        //   }
        // }
      ]
    };
  },
  computed: {
    // treeParam() {
    //   return { userlogin: this.param.userlogin };
    // }
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.paramTable.userlogin = this.param.userlogin;
        this.treeParam.userlogin = this.param.userlogin;
        this.refreshData();
      } else {
        this.$refs.felTree.clearData();
      }
    }
  },
  methods: {
    sortChange(obj) {
      if (obj.order) {
        if (obj.order == "descending") {
          this.paramTable.sequence = "2";
        } else if (obj.order == "ascending") {
          this.paramTable.sequence = "1";
        }
        let sortby = obj.prop;
        this.paramTable.sortby = sortby;
      } else {
        this.paramTable.sequence = "";
        this.paramTable.sortby = "";
      }
      this.onRefreshTable();
    },
    refreshData() {
      this.tableRefresh = new Date().getTime();
      this.treeRefresh = new Date().getTime();
    },
    handleClose() {
      this.$emit("handleClose");
    },
    onSelection() {},
    onRefreshTable() {
      this.tableRefresh = new Date().getTime();
    },
    onReset() {
      Object.keys(this.paramTable).forEach(item => {
        if (item != "userlogin") {
          this.paramTable[item] = "";
        }
      });
      this.onRefreshTable();
    },
    handleNodeClick(obj, data) {
      this.paramTable.userlogin = obj.userlogin;
      this.onRefreshTable();
    }
  }
};
</script>
