<!-- 团管理 -->
<template>
  <el-container>
    <template v-if="changeNum=='0'">
      <el-header class="query_headbox">
        <retrieval class="query_head">
          <inpbox inptext="请选择时间">
            <el-date-picker
              v-model="dates"
              size="mini"
              type="datetimerange"
              range-separator="至"
              start-placeholder="开始日期"
              end-placeholder="结束日期"
              format="yyyy-MM-dd HH:mm:ss"
              value-format="yyyy-MM-dd HH:mm:ss"
              :default-time="['00:00:00','23:59:59']"
              :picker-options="pickerOptions"
            ></el-date-picker>
          </inpbox>
          <inpbox :inpb="true">
            <el-select v-model="param.teamstate" class="con-select qh_inp">
              <el-option
                v-for="item in gatetypes"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              ></el-option>
            </el-select>
          </inpbox>
          <inpbox inptext="请输入">
            <el-input
              clearable
              class="con-search qh_inp"
              v-model="param.search"
              placeholder="团名/团长手机/团员姓名/团员身份证进行检索"
            ></el-input>
          </inpbox>
          <inpbox>
            <fel-button class="qh_btn" type="primary" @click="search">查询</fel-button>
            <fel-button class="qh_btn" @click="onReset">重置</fel-button>
          </inpbox>
        </retrieval>
      </el-header>
      <el-main class="padt0 query_main">
        <paging-table
          class="tobleList wh100"
          height="100%"
          interface="/team/1/getteam"
          :list="list"
          :refresh="refresh"
          @sort-change="sortChange"
          :param="param"
        >
          <span
            v-for="(v,k) of topButs"
            :key="k"
            class="sli but-blue"
            @click="onClick(v.id, v,'0')"
          >
            <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
            {{v.alias}}
          </span>
          <!-- <template v-if="batchButs && batchButs.length > 0">
          <div class="full-list" v-show="!list[0].show">
            <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
          </div>
          <batch-but
            class="sli but-blue"
            :type="range"
            :list="listArrs"
            :param="batchButs"
            @onClick="onBatchClick"
          ></batch-but>
          </template>-->
        </paging-table>
      </el-main>
    </template>
    <quickReception
      :entity="entity625"
      :param="appointmentParam"
      @onReturn="onReturn"
      v-if="changeNum=='1'"
    ></quickReception>
    <batchRoom
      :entity="entity626"
      :param="appointmentParam"
      @onReturn="onReturn"
      v-if="changeNum=='2'"
    ></batchRoom>
    <appointment
      :entity="entity622"
      @onRefresh="search"
      :dialogVisible="dialogRoomtype"
      @beforeClose="dialogRoomtype=false"
    ></appointment>
    <administer
      @onRefresh="search"
      :entity="entity624"
      :param="appointmentParam"
      :dialogVisible="administerShow"
      @beforeClose="administerShow=false"
    ></administer>
    <guideFile
      :dialogVisible="dialogGuideFile"
      :importButs="importButs"
      :exportButs="exportButs"
      @handleClose="dialogGuideFile=false"
    ></guideFile>
  </el-container>
</template>

<script>
import { mapActions } from "vuex";
import guideFile from "@/views/common/guideFile.vue";
import appointment from "./appointment";
import administer from "./administer";
import quickReception from "./quickReception";
import batchRoom from "./batchRoom";
import quickCheckIn from "./quickCheckIn";
import { format } from "@/utils/utils.js";
export default {
  name: "tgl621",
  props: {},
  components: {
    batchRoom,
    quickCheckIn,
    appointment,
    quickReception,
    administer,
    guideFile
  },
  data() {
    let $this = this;
    return {
      gatetypes: [
        { id: "", name: "全部状态" },
        { id: "1", name: "已预定" },
        { id: "0", name: "已取消" },
        { id: "2", name: "已退团" }
      ],
      appointmentParam: {},
      dialogGuideFile: false,
      pickerOptions: {},
      dialogRoomtype: false,
      administerShow: false,
      changeNum: "0",
      rightData: [],
      dates: [],
      param: { teamstate: "", sdate: "", edate: "", search: "" },
      importButs: [],
      exportButs: [],
      topButs: [],
      listBut: [],
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "预订时间段",
          tooltip: false,
          width: "200px",
          prop: "teamsdate",
          sortable: "custom",
          formatter(a, b, c) {
            return (
              a.teamsdate.substring(0, 10) +
              " ~ " +
              a.teamedate.substring(0, 10)
            );
          }
        },
        {
          name: "团名",
          prop: "teamname"
        },
        {
          name: "团长",
          minWidth: "65px",
          prop: "teamleader"
        },
        {
          name: "团长手机",
          minWidth: "100px",
          prop: "teamleaderphone"
        },
        {
          name: "预约/排房/入住人数",
          width: "150px",
          prop: "teamypcount",
          formatter(a, b, c) {
            return `${a.teamsjcount}/${a.teamypcount}/${a.teamrzcount}人`;
          }
        },
        {
          name: "排房/入住/剩余空房",
          width: "150px",
          prop: "teamyproomcount",
          formatter(a, b, c) {
            return `${a.teamyproomcount}/${a.teamrzroomcount ||
              0}/${a.teamsyroomcount || 0}间`;
          }
        },
        {
          name: "房费折扣",
          prop: "teamdiscount",
          width: "80px"
        },
        {
          name: "已交团费",
          prop: "teammoney",
          width: "80px"
        },
        {
          name: "团消费",
          width: "68px",
          prop: "teamusemoney"
        },
        {
          name: "操作员",
          minWidth: "70px",
          prop: "userlogin"
        },
        {
          name: "预订时间",
          sortable: "custom",
          minWidth: "90px",
          prop: "teamcdate"
        },
        {
          name: "状态",
          width: "65px",
          prop: "teamstate",
          template: {
            props: ["scope"],
            template: `<div><span v-if="scope.row.teamstate == 0" class="">已取消</span>
                <span v-else-if="scope.row.teamstate == 1" class="Success">已预定</span>
                <span v-else-if="scope.row.teamstate == 2" class="Danger">已退团</span></div>`
          }
        },
        {
          name: "操作",
          width: "190px",
          prop: "",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                if (
                  this.scope.row.teamstate == "0" ||
                  this.scope.row.teamstate == "2"
                ) {
                  return $this.listBut.filter(obj => {
                    return Boolean(obj.id != "626" && obj.id != "627");
                  });
                } else {
                  return $this.listBut;
                }
              }
            },
            methods: {
              onClick(key, val) {
                let obj = Object.assign({}, this.scope.row);
                $this.onClick(key, obj, "1", val);
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.id, v)">{{v.alias}}</el-button>
            </div>`
          }
        }
      ],
      refresh: 0,
      entity622: {},
      entity624: {},
      entity625: {},
      entity626: []
    };
  },
  created() {
    let $this = this;
    this.pickerOptions = {
      disabledDate(time) {
        return time.getTime() < new Date() - 86400000;
      }
    };
    this.getmenu().then(data => {
      let arr = data["tgl621"];
      if (arr) {
        arr.forEach(item => {
          let entity = item.entity;
          if (entity.id == "622") {
            $this.entity622 = entity;
            $this.topButs.push(entity);
            // this.ingetsonmenu(item.entity.id, result => {
            //   console.log("result", result);
            // });
          } else if (entity.id == "623") {
            $this.topButs.push(entity);
            $this.ingetsonmenu(entity.id, result => {
              result.forEach(item => {
                let entity = item.entity;
                if (entity.id == "637") {
                  $this.exportButs.push({
                    name: "预约列表导出",
                    url: "/team/upload/4/downteam",
                    data: $this.param
                  });
                } else if (entity.id == "636") {
                  $this.importButs = [
                    {
                      name: "预约信息导入",
                      url: "/team/upload/1/uploadteam",
                      errUrl: "/team/upload/2/downteam"
                    }
                  ];
                  $this.exportButs.push({
                    name: "预约信息模板导出",
                    url: "/team/upload/3/downmodel"
                  });
                }
              });
            });
          } else if (entity.id == "625") {
            $this.listBut.push(entity);
            $this.entity625 = {
              topButs: [],
              listBut: []
            };
            $this.ingetsonmenu(entity.id, result => {
              let arr = [];
              result.forEach(({ entity, childs }) => {
                if (entity.id == "645") {
                  entity.type = "3";
                  $this.entity625.listBut.push(entity);
                } else if (entity.id == "644") {
                  entity.type = "1";
                  $this.entity625.listBut.push(entity);
                } else if (entity.id == "639") {
                  arr.push({
                    id: "2",
                    icon: entity.icon,
                    alias: "删除团员"
                  });
                  entity.type = "4";
                  $this.entity625.listBut.push(entity);
                } else if (entity.id == "638") {
                  arr.push({
                    id: "1",
                    icon: entity.icon,
                    alias: "新增团员"
                  });
                } else if (entity.id == "640") {
                  entity.id = "5";
                  entity.childs = childs;
                  arr.push(entity);
                } else if (entity.id == "642") {
                  arr.push({
                    id: "4",
                    icon: entity.icon,
                    alias: "主账房"
                  });
                } else if (entity.id == "643") {
                  entity.id = "0";
                  arr.push(entity);
                } else if (entity.id == "641") {
                  arr.push({
                    id: "3",
                    icon: entity.icon,
                    alias: "团员排房"
                  });
                  entity.type = "2";
                  $this.entity625.listBut.push(entity);
                } else if (entity.id == "653") {
                  arr.push({
                    id: "6",
                    icon: entity.icon,
                    alias: "批量退房"
                  });
                  entity.type = "6";
                  entity.alias = "退房";
                  $this.entity625.listBut.push(entity);
                }
              });
              arr.sort(function(a, b) {
                return Number(a.id) - Number(b.id);
              });
              $this.entity625.topButs = arr;
            });
          } else if (entity.id == "626") {
            $this.listBut.push(entity);
            $this.ingetsonmenu(entity.id, result => {
              console.log("result626", result);
              $this.entity626 = result.map(item => item.entity);
            });
          } else if (entity.id == "624") {
            $this.listBut.push(entity);
            $this.entity624 = {
              alias: entity.alias,
              topButs: [],
              listBut: []
            };
            $this.ingetsonmenu(entity.id, result => {
              console.log("result624", result);
              result.forEach(({ entity, childs }) => {
                if (entity.id == "628") {
                  entity.type = "1";
                  $this.entity624.listBut.push(entity);
                } else if (entity.id == "629") {
                  entity.type = "2";
                  entity.childs = childs;
                  $this.entity624.listBut.push(entity);
                } else if (entity.id == "630") {
                  entity.type = "3";
                  $this.entity624.listBut.push(entity);
                } else if (entity.id == "631") {
                  entity.type = "4";
                  $this.entity624.listBut.push(entity);
                } else if (entity.id == "632") {
                  entity.type = "6";
                  entity.childs = childs;
                  $this.entity624.listBut.push(entity);
                }
              });
            });
          } else if (entity.id == "627") {
            $this.listBut.push(entity);
          }
        });
      }
    });
  },
  methods: {
    sortChange(obj) {
      if (obj.order) {
        if (obj.order == "descending") {
          this.param.seqtype = "1";
        } else if (obj.order == "ascending") {
          this.param.seqtype = "2";
        }
        let sortby = obj.prop;
        if (sortby == "teamsdate") {
          sortby = "1";
        } else if (sortby == "teamcdate") {
          sortby = "2";
        }
        this.param.seqclum = sortby;
      } else {
        this.param.seqtype = "";
        this.param.seqclum = "";
      }
      this.search();
    },
    ...mapActions(["getmenu"]),
    ingetsonmenu(fatherid, callback) {
      let sonmenu = 0;
      let Getsonmenu = () => {
        this.$ajax("/login/home/2/getsonmenu", { fatherid: fatherid }, "1")
          .then(res => {
            if (callback) {
              callback(res.result);
            }
            sonmenu = 4;
          })
          .catch(err => {
            if (sonmenu < 3) {
              setTimeout(() => {
                sonmenu++;
                Getsonmenu();
              }, 1000);
            }
          });
      };
      Getsonmenu();
    },
    onReturn() {
      this.changeNum = "0";
    },
    onClick(key, obj, type, entity) {
      if (type == "0") {
        if (key == "622") {
          this.dialogRoomtype = true;
        } else if (key == "623") {
          this.dialogGuideFile = true;
        }
      } else {
        this.appointmentParam = obj;
        if (key == "625") {
          this.changeNum = "1";
        } else if (key == "626") {
          this.changeNum = "2";
        } else if (key == "624") {
          this.administerShow = true;
        } else if (key == "627") {
          this.$confirm("确定要取消预约吗？", "提示", {
            confirmButtonText: "确定",
            cancelButtonText: "取消",
            type: "warning"
          }).then(() => {
            this.$ajax("/team/del/1/delteam", { teamid: obj.teamid }, "1")
              .then(res => {
                this.search();
                this.$message({
                  showClose: true,
                  message: "取消预约已下发!",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          });
        }
      }
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.search();
    },
    search() {
      if (this.dates && this.dates.length > 0) {
        this.param.sdate = this.dates[0] || "";
        this.param.edate = this.dates[1] || "";
      } else {
        this.param.sdate = "";
        this.param.edate = "";
      }
      this.refresh = new Date().getTime();
    }
  }
};
</script>