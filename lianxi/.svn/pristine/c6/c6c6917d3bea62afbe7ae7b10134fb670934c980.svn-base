<template>
  <el-dialog
    title="修改授权"
    top="8vh"
    width="60%"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    append-to-body
    :visible.sync="dialogVisible"
  >
    <fel-form
      class="quick-ruleForm"
      ref="felForm"
      :selects="selects"
      @submitForm="submitForm"
      @closeForm="beforeClose"
      width="150px"
      dynamic
      :defaultData="defaultData"
      :formData="formData"
    ></fel-form>
    <!-- <cardReading
      ref="cardReading"
      :close="dialogVisible"
      @onInstall="onInstall"
      @resultdata="resultdata"
    />-->
  </el-dialog>
</template>

<script>
// import { mapGetters } from "vuex";
// import judge from "@/utils/judge.js";
// import cardReading from "../kwgl/cardReading";
export default {
  components: {
    // cardReading
  },
  props: {
    param: Object,
    dialogVisible: Boolean
  },
  data() {
    let $this = this;
    return {
      oldData: {},
      selects: {
        infoType: [],
        position: [],
        changeTypes: [
          {
            value: "0",
            label: "无变更"
          },
          {
            value: "1",
            label: "授权"
          },
          {
            value: "2",
            label: "换房"
          },
          {
            value: "3",
            label: "解除授权"
          }
        ],
        types: [
          {
            value: "1",
            label: "是"
          },
          {
            value: "0",
            label: "否"
          }
        ],
        infoType: []
      },
      defaultData: {},
      formData: [
        {
          css: "type-title",
          name: "人员入住信息",
          type: "div"
        },
        {
          width: "50%",
          value: "cardtype",
          disabled: true,
          name: "卡片类型",
          type: "select",
          select: "infoType",
          slabel: "typename",
          svalue: "type"
        },
        {
          width: "50%",
          value: "cardcode",
          name: "卡号",
          onInput: this.onInput,
          type: "text"
        },
        {
          width: "50%",
          value: "isty",
          name: "停用原卡片",
          disabled: true,
          type: "select",
          select: "types"
        },
        {
          width: "50%",
          value: "cardedate",
          name: "卡片结束日期",
          type: "date",
          date: "datetime",
          format: "yyyy-MM-dd HH:mm:ss"
        },
        {
          noShow: true,
          width: "50%",
          close: "type1",
          value: "cardusecount",
          name: "授权可用次数",
          type: "text"
        },

        {
          noShow: true,
          width: "50%",
          close: "type1",
          value: "day",
          name: "授权天数",
          type: "text"
        },
        {
          noShow: true,
          width: "50%",
          value: "cardTimeSort",
          name: "授权可用时间段",
          type: "time",
          format: "HH:mm",
          date: "ftime"
        },
        {
          css: "type-title",
          name: "人员卡片信息",
          type: "div"
        },

        {
          width: "50%",
          value: "changetype",
          name: "变更类型",
          type: "select",
          select: "changeTypes"
        },
        {
          width: "50%",
          value: "count",
          name: "可开门次数",
          type: "text"
        },
        {
          width: "50%",
          value: "isjc",
          name: "继承原授权",
          type: "select",
          select: "types"
        },
        {
          width: "50%",
          value: "issync",
          name: "同步指纹",
          type: "select",
          select: "types"
        },

        {
          width: "50%",
          class: "roomid",
          value: "roomid",
          name: "授权房间",
          disabled: false,
          type: "cascader",
          options: "position",
          change: false,
          filterable: true,
          props: {
            label: "agname",
            value: "agid",
            // disabled: "isroom",
            children: "children"
          }
        },
        {
          width: "50%",
          value: "seTimes",
          name: "可开门开始结束时间",
          type: "time",
          format: "HH:mm",
          date: "ftime"
        }
      ],
      pgidObj: {},
      roomidObj: {}
    };
  }, 
  created() {
    this.$ajax("/quick/update/2/getbuildtree", {}, "1")
      .then(res => {
        this.selects.position = res.result;
      })
      .catch(err => {});
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.formData[1].disabled = true;
        this.formData[3].disabled = true;
        this.$ajax(
          "/quick/update/d/getupdatecardauth",
          { authcode: this.param.authcode, authid: this.param.authid },
          "1"
        )
          .then(res => {
            let result = res.result;
            let cinfo = res.result.cinfo;
            let ainfo = res.result.ainfo;
            this.oldData = { ...cinfo, ...ainfo };
            if(cinfo.cardtype=="5"){
              this.formData[5].noShow=false;
              this.formData[6].noShow=false;
            }else{
              this.formData[5].noShow=true;
              this.formData[6].noShow=true;
            }
            let obj = {
              cardcode: cinfo.cardcode,
              cardedate: cinfo.cardedate,
              cardTimeSort: [cinfo.cardstime || "", cinfo.cardetime || ""],
              cardtype: cinfo.cardtype,
              cardusecount: cinfo.cardusecount,
              count: ainfo.count,
              day: cinfo.day,
              issync: ainfo.issync,
              seTimes: [ainfo.openstime, ainfo.openetime]
            };
            obj = Object.assign(result,obj);
            this.defaultData = JSON.parse(JSON.stringify(obj));
            console.log('kj',this.defaultData);
            result.ct.forEach(item => {
              item.type = String(item.type);
            });
            this.selects.infoType = result.ct;
          })
          .catch(err => {
            console.log("err", err);
          });
      }
    }
  },
  methods: {
    onInput(val) {
      if (val[0] != this.oldData.cardcode) {
        this.formData[1].disabled = false;
        this.formData[3].disabled = false;
      }
      // else{
      //   this.formData[10].disabled=false;
      // }
    },
    submitForm(obj) {
      let roomid = obj.roomid[obj.roomid.length - 1];
      let data = {
        cardcode: obj.cardcode,
        cardedate: obj.cardedate,
        cardetime: obj.cardTimeSort[0],
        cardstime: obj.cardTimeSort[1],
        cardtype: obj.cardtype,
        openstime: obj.seTimes[0],
        openetime: obj.seTimes[1],
        cardusecount: obj.cardusecount,
        issync: obj.issync,
        day: obj.day,
        count: obj.count,
        changetype: obj.changetype,
        isjc: obj.isjc,
        isty: obj.isty,
        oldcardcode: this.oldData.cardcode,
        oldroomid: this.oldData.roomid,
        rcid: this.oldData.rcid,
        roomid: roomid
      };
      this.$ajax("/quick/update/e/updatequickcardauth", data, "1")
        .then(res => {
          this.$message({
            type: "success",
            message: "修改成功!"
          });
          this.beforeClose();
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    infoTypeChange() {},
    beforeClose() {
      this.defaultData = {};
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].resetForm();
      }
      this.$emit("beforeClose");
    }
  }
};
</script>