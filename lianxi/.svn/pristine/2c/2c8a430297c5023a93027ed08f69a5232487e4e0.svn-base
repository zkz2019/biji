<!-- 配置门禁 -->
<template>
  <el-dialog
    class="configureInfo"
    top="5%"
    title="配置门禁"
    width="70%"
    v-loading="loadingBody"
    :element-loading-text="loadText"
    element-loading-spinner="el-icon-loading"
    element-loading-background="rgba(0, 0, 0, 0.8)"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <el-tabs v-model="activeName" @tab-click="handleClick">
      <el-tab-pane class="firstPane" label="基础信息" name="first">
        <form-table
          v-loading="loading"
          thwidth="18%"
          tdwidth="32%"
          :column="2"
          :param="defaultData"
          :list="formData"
        ></form-table>
      </el-tab-pane>
      <el-tab-pane label="功能配置" name="second">
        <fel-form
          ref="felForm"
          class="single-row"
          :selects="selects"
          @submitForm="submitForm"
          @closeForm="beforeClose"
          width="140px"
          dynamic
          :defaultData="defaultDataGNPZ"
          :formData="formData1"
        ></fel-form>
        <div class="config_second_text">同一个门禁控制器最多设置12个时段</div>
      </el-tab-pane>
      <el-tab-pane label="自动开关门时段" name="third">
        <div v-if="autoData.length===0" class="config_null">暂无数据</div>
        <div v-else class="config_box">
          <template v-for="obj in autoData">
            <div class="config_box_top">
              <span class="config_text">{{obj.name}}</span>
              <fel-button :disabled="obj.start" @click="onReturn('1',obj)" type="text">启用</fel-button>
              <fel-button :disabled="obj.stop" @click="onReturn('0',obj)" type="text">停用</fel-button>
              <fel-button type="text" @click="onReturn('-1',obj)">删除</fel-button>
            </div>
            <el-form ref="form" :model="obj.form" label-width="110px" size="mini">
              <el-form-item label="自动开关门时段">
                <!-- <fel-date v-model="obj.form.dates"></fel-date> -->
                <el-time-picker
                  is-range
                  v-model="obj.form.dates"
                  range-separator="至"
                  format="HH:mm"
                  class="config_sel"
                  start-placeholder="开始时间"
                  end-placeholder="结束时间"
                  placeholder="选择时间范围"
                ></el-time-picker>
              </el-form-item>
              <el-form-item label="每周运行日期">
                <el-select multiple class="config_sel" v-model="obj.form.week" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataKGM.weeks"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="常开后控制">
                <el-select class="config_sel" v-model="obj.form.control" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataKGM.attypes"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="联动门">
                <el-select multiple class="config_sel" v-model="obj.form.linkage" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataKGM.doors"
                    :key="item.adid"
                    :label="item.adname"
                    :value="item.adid"
                  ></el-option>
                </el-select>
              </el-form-item>
            </el-form>
          </template>
        </div>
        <div>同一个门禁控制器最多设置12个时段</div>
        <div class="config_bottom">
          <fel-button class="qh_btn" @click="onAdd('0')">新增时段</fel-button>
          <fel-button class="qh_btn" @click="beforeClose">取消</fel-button>
          <fel-button class="qh_btn" type="primary" @click="onSubmit">确定</fel-button>
        </div>
      </el-tab-pane>
      <el-tab-pane label="门锁配置" name="fourth">
        <div v-if="autoDataMS.length===0" class="config_null">暂无数据</div>
        <div v-else class="config_box">
          <template v-for="obj in autoDataMS">
            <div class="config_box_top">
              <span class="config_text">{{obj.name}}</span>
              <!-- <fel-button :disabled="obj.start" @click="onReturn1('1')" type="text">启用</fel-button>
              <fel-button :disabled="obj.stop" @click="onReturn1('2')" type="text">停用</fel-button>
              <fel-button type="text" @click="onReturn1('3',obj.id)">删除</fel-button>-->
            </div>
            <el-form ref="form" :model="obj.form" label-width="110px" size="mini">
              <el-form-item label="门名称">
                <el-input class="config_sel" placeholder="请填写门名称" v-model="obj.form.name"></el-input>
              </el-form-item>
              <el-form-item label="门锁类型">
                <el-select class="config_sel" v-model="obj.form.type" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataMS.adtypes"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="门磁开关">
                <el-select class="config_sel" v-model="obj.form.off" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataMS.adcontactswiths"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="工作模式">
                <el-select class="config_sel" v-model="obj.form.mode" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataMS.adworkmodes"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="强制锁门">
                <el-select class="config_sel" v-model="obj.form.lock" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataMS.adforcelocks"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="联动读头">
                <el-select multiple class="config_sel" v-model="obj.form.hade" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataMS.heads"
                    :key="item.ahid"
                    :label="item.ahname"
                    :value="item.ahid"
                  ></el-option>
                </el-select>
              </el-form-item>
            </el-form>
          </template>
        </div>
        <div v-if="false">同一个门禁控制器最多设置12个时段</div>
        <div class="config_bottom">
          <fel-button class="qh_btn" @click="onAdd('1')">新增时段</fel-button>
          <fel-button class="qh_btn" @click="beforeClose">取消</fel-button>
          <fel-button class="qh_btn" type="primary" @click="onSubmit('1')">确定</fel-button>
        </div>
      </el-tab-pane>
      <el-tab-pane label="读头配置" name="fifth">
        <div v-if="autoDataDT.length===0" class="config_null">暂无数据</div>
        <div v-else class="config_box">
          <template v-for="obj in autoDataDT">
            <div class="config_box_top">
              <span class="config_text">{{obj.name}}</span>
              <fel-button :disabled="obj.start" @click="onReturn2('1',obj)" type="text">启用</fel-button>
              <fel-button :disabled="obj.stop" @click="onReturn2('0',obj)" type="text">停用</fel-button>
              <fel-button type="text" @click="onReturn2('-1',obj)">删除</fel-button>
            </div>
            <el-form ref="form" :model="obj.form" label-width="110px" size="mini">
              <el-form-item label="读头ID">
                <el-input class="config_sel" disabled v-model="obj.form.ahcode"></el-input>
              </el-form-item>
              <el-form-item label="读头支持授权">
                <el-input class="config_sel" disabled v-model="obj.form.ahauths"></el-input>
              </el-form-item>
              <el-form-item label="读头软件版本号">
                <el-input class="config_sel" disabled v-model="obj.form.ahver"></el-input>
              </el-form-item>
              <el-form-item label="读头状态">
                <el-input class="config_sel" disabled v-model="obj.form.ahstate"></el-input>
              </el-form-item>
              <el-form-item label="读头位置">
                <el-select class="config_sel" v-model="obj.form.ahlocation" placeholder="请选择">
                  <el-option
                    v-for="item in defaultDataDT.ahlocations"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  ></el-option>
                </el-select>
              </el-form-item>
            </el-form>
          </template>
        </div>
        <div class="config_bottom">
          <fel-button class="qh_btn" @click="onAdd('2')">探测读头</fel-button>
          <fel-button class="qh_btn" @click="beforeClose">取消</fel-button>
          <fel-button class="qh_btn" type="primary" @click="onSubmit('2')">确定</fel-button>
        </div>
      </el-tab-pane>
    </el-tabs>
  </el-dialog>
</template>

<script>
import { getAccessOrderResult } from "./getResult.js";
import { format } from "@/utils/utils.js";
export default {
  props: {
    param: Object,
    dialogVisible: Boolean
  },
  data() {
    let $this = this;
    return {
      num: 0,
      num1: 0,
      num3: 0,
      autoData: [],
      autoDataMS: [],
      autoDataDT: [],
      loading: false,
      loadingBody: false,
      count: 60,
      loadText: "正在加载中...",
      activeName: "first",
      selects: { amwarns: [], doors: [], amsyncs: [] },
      defaultData: {},
      defaultDataGNPZ: {},
      defaultDataKGM: {},
      defaultDataMS: {},
      defaultDataDT: {},
      formData1: [
        {
          noShow: false,
          value: "amsync",
          name: "同步模式",
          type: "select",
          select: "amsyncs",
          slabel: "name",
          svalue: "id"
        },
        {
          noShow: false,
          value: "amwarn",
          name: "消防报警",
          type: "select",
          select: "amwarns",
          slabel: "name",
          svalue: "id"
        },
        {
          value: "door",
          name: "消防联动门",
          type: "template",
          template: {
            computed: {
              options() {
                return $this.selects["doors"];
              },
              door: {
                get() {
                  return $this.defaultDataGNPZ.door;
                },
                set(val) {
                  $this.defaultDataGNPZ.door = val;
                }
              }
            },
            template: `<el-select size="small" v-model="door" :multiple="true" placeholder="请选择">
              <el-option
                v-for="item in options"
                :key="item.adid"
                :label="item.adname"
                :value="item.adid">
              </el-option>
            </el-select>`
          }
        }
      ],
      formData: [
        {
          value: "amname",
          name: "门禁控制器名称"
        },
        {
          value: "amcode",
          name: "门禁控制器ID"
        },
        {
          value: "amtype",
          name: "门禁控制器类型"
        },
        {
          value: "amver",
          name: "门禁控制器软件版本"
        },
        {
          value: "amstate",
          name: "门禁控制器状态"
        },
        {
          value: "",
          name: ""
        },
        {
          value: "adisopen1",
          name: "1号门开关门状态"
        },
        {
          value: "adisopen2",
          name: "2号门开关门状态"
        },
        {
          value: "ambdcard",
          name: "卡片授权数量"
        },
        // {
        //   value: "",
        //   name: "蓝牙授权数量"
        // },
        {
          value: "ambdpass",
          name: "密码授权数量"
        },
        {
          value: "ahbdface1",
          name: "1号读头人脸授权数量"
        },
        {
          value: "ahbdface1",
          name: "2号读头人脸授权数量"
        }
      ]
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.getAccessMainInfo();
      } else {
        this.activeName = "first";
      }
    }
  },
  methods: {
    //获取功能配置
    getAccessMainDeploy() {
      this.$ajax(
        "/access/v2.0/main/9/getAccessMainDeploy",
        { amid: this.param.amid },
        "9"
      )
        .then(res => {
          this.selects.amwarns = res.result.amwarns;
          this.selects.doors = res.result.doors;
          this.selects.amsyncs = res.result.amsyncs;
          this.defaultDataGNPZ = res.result;
          this.defaultDataGNPZ.door = this.defaultDataGNPZ.door.map(item => {
            return item.adid;
          });
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    //获取门禁基础信息
    getAccessMainInfo() {
      if (true) {
        this.loading = true;
        this.$ajax(
          "/access/v2.0/main/8/getAccessMainInfo",
          { amid: this.param.amid },
          "9"
        )
          .then(res => {
            this.defaultData = res.result;
            this.defaultData.adisopen1 = res.result.doors[0].adisopen;
            this.defaultData.adisopen2 = res.result.doors[1].adisopen;
            this.defaultData.ahbdface1 = res.result.heads[0].ahbdface;
            this.defaultData.ahbdface2 = res.result.heads[1].ahbdface;
            this.loading = false;
          })
          .catch(err => {
            this.loading = false;
            console.log("err", err);
          });
      }
    },
    // 获取自动开关门时段
    getAccessMainTime() {
      this.$ajax(
        "/access/v2.0/main/b/getAccessMainTime",
        { amid: this.param.amid },
        "9"
      )
        .then(res => {
          this.defaultDataKGM = res.result;
          this.autoData = res.result.times.map((item, index) => {
            // state: item.atstatus,
            this.num++;
            return {
              id: new Date().getTime(), //this.autoData.length,
              name: "自动开门时段" + this.num, //(this.autoData.length + 1),
              start: item.atstatus == 0 ? false : true,
              stop: item.atstatus == 1 ? false : true,
              form: {
                control: item.attype,
                dates: [
                  new Date(
                    0,
                    0,
                    0,
                    item.atstime.slice(0, 2),
                    item.atstime.slice(3, 5)
                  ),
                  new Date(
                    0,
                    0,
                    0,
                    item.atetime.slice(0, 2),
                    item.atetime.slice(3, 5)
                  )
                ],
                atid: item.atid,
                linkage: item.door.map(obj => {
                  return obj.adid;
                }),
                week: item.week.map(obj => {
                  return obj.id;
                })
              }
            };
          });
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    // 获取门锁配置
    getAccessDoor() {
      this.$ajax(
        "/access/v2.0/main/e/getAccessDoor",
        { amid: this.param.amid },
        "9"
      )
        .then(res => {
          this.defaultDataMS = res.result;
          this.autoDataMS = res.result.doors.map((item, index) => {
            this.num1++;
            return {
              id: new Date().getTime(), //this.autoData.length,
              name: this.num1 + "号门", //(this.autoData.length + 1),
              form: {
                lock: item.adforcelock,
                off: item.adcontactswith,
                hade: item.adheads.map(obj => {
                  return obj.ahid;
                }),
                adid: item.adid,
                name: item.adname,
                type: item.adtype,
                mode: item.adworkmode
              }
            };
          });
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    updateResult() {
      this.getAccessHead();
    },
    //获取读头配置
    getAccessHead() {
      this.$ajax(
        "/access/v2.0/main/g/getAccessHead",
        { amid: this.param.amid },
        "9"
      )
        .then(res => {
          this.defaultDataDT = res.result;
          console.log("getAccessHead", this.defaultDataDT, res);
          this.autoDataDT = res.result.heads.map((item, index) => {
            console.log("item", item);
            this.num3++;
            return {
              id: new Date().getTime(), //this.autoData.length,
              name: this.num3 + "读头", //(this.autoData.length + 1),
              start: item.atstatus == 0 ? false : true,
              stop: item.atstatus == 1 ? false : true,
              form: {
                ahauths: item.ahauths,
                ahcode: item.ahcode,
                ahid: item.ahid,
                ahdoors: item.ahdoors,
                ahlocation: item.ahlocation,
                ahstate: item.ahstate,
                ahname: item.ahname,
                ahver: item.ahver
              }
            };
          });
          console.log("this.autoDataDT", this.autoDataDT);
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    // 切换配置tab
    handleClick(data, obj) {
      if (data.name == "first") {
        this.getAccessMainInfo();
      } else if (data.name == "second") {
        this.getAccessMainDeploy();
      } else if (data.name == "third") {
        this.getAccessMainTime();
      } else if (data.name == "fourth") {
        this.getAccessDoor();
      } else if (data.name == "fifth") {
        this.getAccessHead();
      }
    },
    //开关门时间段启用/停用/删除
    onReturn(str, obj) {
      let url = "/access/v2.0/main/c/updateAccessMainTimeStatus";
      let data = { amid: this.param.amid, atid: obj.form.atid, atstatus: str };
      this.$ajax(url, data, "9")
        .then(res => {
          if (str === "1") {
            console.log("this.autoDataMS", this.autoDataMS);
          } else if (str === "0") {
            console.log("this.autoDataDT", this.autoDataDT);
          } else if (str === "-1") {
            let index = this.autoData.findIndex((item, ind) => {
              return item.id == obj.id;
            });
            this.autoData.splice(index, 1);
            this.autoData.forEach((item, index) => {
              item.name = "自动开门时段" + (index + 1);
            });
          }
          this.$message({
            type: "success",
            message:
              (str == "0" ? "停用" : str == "1" ? "启用" : "删除") + "成功!"
          });
          console.log("res", res);
          this.getAccessMainTime();
        })
        .catch(err => {
          this.$message({
            type: "error",
            message:
              `[${err.resultCode}] ` + err.resultMsg ||
              (str == "0" ? "停用" : str == "1" ? "启用" : "删除") + "成功!"
          });
          console.log("err", err);
        });
    },
    //门锁启用/停用/删除
    onReturn1() {},
    //读头启用/停用/删除
    onReturn2(str, obj) {
      let url = "/access/v2.0/main/h/updateAccessHeadStatus";
      let data = { amid: this.param.amid, ahid: obj.form.ahid, ahstatus: str };
      this.$ajax(url, data, "9")
        .then(res => {
          if (str === "-1") {
            let index = this.autoDataDT.findIndex((item, ind) => {
              return item.id == obj.id;
            });
            this.autoDataDT.splice(index, 1);
            this.autoDataDT.forEach((item, index) => {
              item.name = index + 1 + "号门";
            });
          }
          this.$message({
            type: "success",
            message:
              (str == "0" ? "停用" : str == "1" ? "启用" : "删除") + "成功!"
          });
          console.log("res", res);
          this.getAccessHead();
        })
        .catch(err => {
          this.$message({
            type: "error",
            message:
              `[${err.resultCode}] ` + err.resultMsg ||
              (str == "0" ? "停用" : str == "1" ? "启用" : "删除") + "成功!"
          });
          console.log("err", err);
        });
    },
    // 新增时间段/门锁/读头
    onAdd(str) {
      if (str == "0") {
        this.num++;
        this.autoData.push({
          form: {},
          id: new Date().getTime(), //this.autoData.length,
          name: "自动开门时段" + this.num, //(this.autoData.length + 1),
          start: true,
          stop: true
        });
      } else if (str == "1") {
        this.num1++;
        this.autoDataMS.push({
          form: {},
          id: new Date().getTime(),
          name: this.num1 + "号门"
        });
      } else if (str == "2") {
        this.$ajax(
          "/access/v2.0/main/j/testAccessHead",
          { amid: this.param.amid },
          "9"
        )
          .then(res => {
            this.loadingBody = true;
            this.loadText = `等待后台响应,预计${this.count}秒...`;
            getAccessOrderResult(res.result, this);
            console.log("res", res);
          })
          .catch(err => {
            console.log("err", err);
          });
        // this.autoDataDT.push({
        //   form: {},
        //   id: new Date().getTime(),
        //   name: this.num2 + "读头",
        //   start: true,
        //   stop: true
        // });
      }
    },
    // 提交表单事件 自动开关门时间段/门锁配置/读头配置参数处理
    onSubmit(str) {
      if (str == "1") {
        //门锁
        let data = this.autoDataMS.map((item, ind) => {
          let obj = {};
          obj.adcontactswith = String(item.form.off) ? item.form.off : "";
          obj.adforcelock = String(item.form.lock) ? item.form.lock : "";
          obj.adheads =
            item.form.hade && item.form.hade.length > 0
              ? this.objMaps(item.form.hade, this.defaultDataMS.heads, "ahid")
              : [];
          obj.adid = item.form.adid ? item.form.adid : 0;
          obj.adname = item.form.name ? item.form.name : "";
          obj.adtype = String(item.form.type) ? item.form.type : "";
          obj.adworkmode = String(item.form.mode) ? item.form.mode : "";
          return obj;
        });
        this.onPut(
          "/access/v2.0/main/f/updateAccessDoor",
          { doors: data },
          "1"
        );
      } else if (str == "2") {
        console.log("heads:data", this.autoDataDT);
        let data = this.autoDataDT.map((item, ind) => {
          let obj = {};
          console.log("itemkk", item);
          obj.ahid = item.form.ahid;
          obj.ahlocation = item.form.ahlocation;
          return obj;
        });
        console.log("heads:data", this.autoDataDT, data);
        this.onPut(
          "/access/v2.0/main/i/updateAccessHead",
          { heads: data },
          "2"
        );
      } else {
        let data = this.autoData.map((item, ind) => {
          let obj = {};
          obj.attype = String(item.form.control) ? item.form.control : "";
          obj.atstime =
            item.form.dates && item.form.dates.length > 0
              ? format(item.form.dates[0], "HH:mm")
              : "";
          obj.atetime =
            item.form.dates && item.form.dates.length > 0
              ? format(item.form.dates[1], "HH:mm")
              : "";
          obj.atid = item.form.atid ? item.form.atid : 0;
          obj.door = item.form.linkage
            ? this.objMaps(item.form.linkage, this.defaultDataKGM.doors, "adid")
            : [];
          obj.week = item.form.week
            ? this.objMaps(item.form.week, this.defaultDataKGM.weeks, "id")
            : [];
          return obj;
        });
        this.onPut(
          "/access/v2.0/main/d/updateAccessMainTime",
          { times: data },
          "3"
        );
      }
    },
    // 提交自动开关门时间段/门锁配置/读头配置参数处理
    onPut(url, data, str) {
      this.$ajax(url, data, "9", { amid: this.param.amid })
        .then(res => {
          this.$message({
            type: "success",
            message: "更新自动开关门时段成功!"
          });
          setTimeout(() => {
            if (str == "1") {
              this.getAccessDoor();
            } else if (str == "2") {
              this.getAccessHead();
            } else {
              this.getAccessMainTime();
            }
          }, 500);
        })
        .catch(err => {
          this.$message({
            type: "error",
            message:
              `[${err.resultCode}] ` + err.resultMsg ||
              "更新自动开关门时段失败!"
          });
          console.log("err", err);
        });
    },
    // 参数循环处理方法
    objMaps(data, obj, id) {
      let arr = [];
      data.forEach(val => {
        obj.forEach(item => {
          if (item[id] == val) {
            arr.push(item);
          }
        });
      });
      return arr;
    },
    // 功能配置提交方法
    submitForm(data) {
      let door = [];
      this.defaultDataGNPZ.door.forEach(val => {
        this.selects.doors.forEach(item => {
          if (item.adid == val) {
            door.push(item);
          }
        });
      });
      let obj = {
        amid: this.param.amid,
        amsync: data.amsync,
        amwarn: data.amwarn,
        door
      };
      this.$ajax("/access/v2.0/main/a/updateAccessMainDeploy", obj, "9")
        .then(res => {
          this.$message({
            type: "success",
            message: "修改门禁配置成功!"
          });
        })
        .catch(err => {
          this.$message({
            type: "error",
            message:
              `[${err.resultCode}] ` + err.resultMsg || "修改门禁配置失败!"
          });
          console.log("err", err);
        });
    },
    // 关闭弹框
    beforeClose() {
      if (this.$refs.felForm) {
        this.$refs.felForm.resetForm();
      }
      this.autoData = [];
      this.autoDataMS = [];
      this.autoDataDT = [];
      this.defaultData = {};
      this.defaultDataMS = {};
      this.defaultDataGNPZ = {};
      this.$emit("beforeClose");
    }
  }
};
</script>

<style lang="scss">
.configureInfo {
  .firstPane {
    height: 350px;
    padding-top: 15px;
  }
  .config_second_text {
    position: absolute;
    top: 385px;
  }
  .form-content {
    padding: 20px 0 120px;
  }
  .config_null {
    width: 100%;
    height: 450px;
    padding-top: 225px;
    text-align: center;
  }
  .config_box {
    // width: 600px;
    height: 450px;
    // margin: 0 auto;
    padding-left: 20%;
    overflow-y: auto;
    .config_box_top {
      margin-top: 15px;
      .config_text {
        margin-right: 30px;
      }
    }
    .config_sel {
      width: 400px;
    }
  }
  .config_bottom {
    padding: 10px 20px 0;
    margin-top: 10px;
    border-top: 1px solid #ccc;
    text-align: right;
    // .qh_btn {
    //   width: 64px;
    //   height: 27px;
    // }
  }
}
</style>
