<!-- 公共表格弹框 -->
<template>
  <div>
    <el-dialog
      v-on="$listeners"
      :title="title"
      :visible.sync="dialogVisible"
      :width="width||'70%'"
      :top="top"
      :before-close="handleClose"
      :close-on-click-modal="false"
      append-to-body
      class="el-dialogs"
    >
      <el-container class="el-containerbox contpucdialog">
        <el-aside
          v-if="is_tree"
          width="210px"
          style="background-color: rgb(238, 241, 246);"
          class="leftbox"
        >
          <fel-tree1
            v-on="$listeners"
            :interface="treeUrl"
            @handleNodeClick="handleNodeClick"
            @checkchange="checkchange"
            :refresh="treeRefresh"
            :param="param_tree"
            :defaultProps="defaultProps"
            :idArr="[0]"
          ></fel-tree1>
        </el-aside>
        <el-container>
          <el-header v-if="button.length>0" class="dialog-headerbox">
            <template v-for="(item,idx) of button">
              <el-button
                v-if="item.name=='刷新'"
                :key="idx"
                type="primary"
                size="small"
                @click="refreshclik"
              >
                <i class="el-icon-refresh"></i>刷新
              </el-button>
              <el-input
                v-else-if="item.name=='搜索'"
                :key="idx"
                @input="inSearch"
                v-model="param.search"
                class="search"
                placeholder="输入编号/名称进行检索"
                size="small"
              >
                <i slot="prefix" class="el-input__icon el-icon-search"></i>
              </el-input>
              <el-button
                v-else
                :key="idx"
                type="primary"
                size="small"
                @click="butsclik(item)"
              >{{item.name}}</el-button>
            </template>
          </el-header>
          <!-- <div style="height:380px;"> -->
          <paging-table
            ref="pagingTable"
            height="100%"
            :interface="tabelurl"
            :list="list"
            :param="param"
            :refresh="ptRefresh"
            v-on="$listeners"
          />
          <!-- </div> -->
        </el-container>
      </el-container>
      <div v-if="foot_buts.length>0" slot="footer" class="dialog-footer">
        <template v-for="(item,idx) of foot_buts">
          <template v-if="item.type=='勾选范围'">
            <el-select
              class="elselect select-gx"
              v-model="select_gxval"
              placeholder="请选择"
              :key="idx"
              size="small"
            >
              <el-option label="勾选范围" value="勾选范围"></el-option>
              <el-option label="全部列表" value="全部列表"></el-option>
            </el-select>
          </template>
          <template v-else>
            <el-button
              :key="idx"
              type="primary"
              size="small"
              @click="foot_butsclik(item)"
            >{{item.name}}</el-button>
          </template>
        </template>
      </div>
    </el-dialog>
  </div>
</template>

<script>
/***
 * paging-table组件的再次封装
 * button 数组按钮
 *  [{
 *    name: "数组名"
 *  }]
 * refresh 刷新
 ***/
export default {
  props: {
    top: String,
    treeUrl: String,
    param_tree: Object,
    defaultProps: Object,
    dialogVisible: Boolean,
    width: String,
    tabelurl: String,
    refresh: Number, //刷新
    title: String,
    param: Object,
    is_tree: {
      type: Boolean,
      default() {
        return false;
      }
    },
    list: {
      type: Array,
      default() {
        return [];
      }
    }, //默认展开的数组
    button: {
      type: Array,
      default() {
        return [];
      }
    },
    foot_buts: {
      type: Array,
      default() {
        return [];
      }
    },
    tableptRefresh: {
      type: Number,
      default() {
        return 0;
      }
    }
  },
  data() {
    return {
      ptRefresh: 0,
      treeRefresh: 0,
      select_gxval: "勾选范围"
    };
  },

  components: {},

  watch: {
    refresh() {
      this.refreshclik();
    },
    dialogVisible() {
      this.refreshclik();
    },
    tableptRefresh() {
      this.treeRefresh = new Date().getTime();
      this.ptRefresh = new Date().getTime();
    }
  },
  methods: {
    setCurrent(row) {
      this.$refs.pagingTable.setCurrent(row);
    },
    checkchange(data, Nodes) {
      if (Nodes.checkedKeys.includes(data.buildid)) {
        this.param.buildid = data.buildid;
        this.ptRefresh = new Date().getTime();
      }
      this.$emit("checkchange_tree2", data, Nodes);
    },
    handleNodeClick(val) {
      this.$emit("handleNodeClick", val);
      this.param.buildid = val.buildid;
      this.ptRefresh = new Date().getTime();
    },
    // 搜索数据
    inSearch() {
      this.ptRefresh = new Date().getTime();
      if (this.is_tree) this.treeRefresh = new Date().getTime();
    },
    //按钮点击事件
    butsclik(buts) {
      this.$emit("butsclik", buts);
    },
    handleClose() {
      //关闭
      this.$emit("handleClose");
    },
    refreshclik() {
      //刷新
      this.ptRefresh = new Date().getTime();
      if (this.is_tree) this.treeRefresh = new Date().getTime();
    },
    foot_butsclik(buts) {
      //确定
      this.$emit("foot_butsclik", buts);
    }
  }
};
</script>
<style lang='scss' scoped>
.dialog-headerbox {
  height: 45px;
  line-height: 45px;
  text-align: left;
  margin-right: 10px;
}
.search {
  width: 200px;
  margin-right: 10px;
}
.leftbox {
  height: 100%;
  overflow: auto;
}
.el-containerbox {
  height: 64vh;
  border: 1px solid #eee;
}
.elselect {
  margin-right: 10px;
}
.select-gx {
  width: 150px;
}
</style>
