<!-- 功能配置 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
    </el-header>
    <el-main class="query_main">
      <paging-table
        height="100%"
        interface="/system/parameter/function/1/getfunction"
        class="heig100"
        :list="list"
        :refresh="refresh"
        @onEjectChange="onEjectChange"
      />
    </el-main>
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
export default {
  props: ["toParam"],
  created() {
    this.inGetsonmenu();
  },
  data() {
    let $this = this;
    return {
      topButs: [],
      refresh: 0,
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "名称",
          prop: "functionname",
          width: "160px"
        },
        {
          name: "隶属板块",
          prop: "functionfather"
        },
        {
          name: "状态",
          prop: "functionstatus",
          width: "100px"
        },
        {
          name: "说明",
          prop: "functionremark"
        },
        {
          name: "最后变动账号",
          prop: "userlogin",
          width: "120px"
        },
        {
          name: "最后变动时间",
          prop: "functiondate",
          width: "160px"
        },
        {
          name: "操作",
          width: "100px",
          template: {
            props: ["scope"],
            computed: {
              topButs() {
                return $this.topButs;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, this.scope);
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,i) of topButs" :key="i" type="text" size="small" @click.stop="onClick(v.type)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      sonmenu: 0
    };
  },
  mounted() {
    this.getEject();
  },
  methods: {
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "423") {
              this.topButs.push({
                type: "0",
                name: alias
              });
            } else if (id == "424") {
              this.topButs.push({
                type: "1",
                name: alias
              });
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onClick(key, data) {
      if (key == 0) {
        this.$confirm("是否开启？", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/parameter/function/update/1/updatefunction",
              {
                functionid: data.row.functionid
              },
              "1"
            )
              .then(res => {
                this.onRefresh();
                this.$message({
                  message: "开启成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(err => {});
      } else if (key == 1) {
        this.$confirm("是否关闭?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/parameter/function/update/1/deletefunction",
              {
                functionid: data.row.functionid
              },
              "1"
            )
              .then(res => {
                this.onRefresh();
                this.$message({
                  message: "关闭成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(err => {});
      }
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "gnpz419");
    },
    getEject() {
      this.$common.getEject(this, "list", "gnpz419");
    }
  }
};
</script>