<!-- 楼层效果弹出框 -->
<template>
  <div class="effect-floor">
    <div v-if="roomlist.length > 0" class="roomBox_buts">
      <el-button @click="onReverse(1)" type="text" icon="ficon-diandou" size="small">颠倒顺序</el-button>
      <el-button @click="onReverse(4)" type="text" icon="ficon-diandou" size="small">名称排序</el-button>
    </div>
    <div class="roomBox_maxbox">
      <div class="region" :key="key">
        <template v-for="(item,key) of roomlist">
          <div :key="key" class="li regionBox">
            <div class="img">
              <img src="../../assets/image/quyu.jpg" alt />
            </div>
            <div class="name">
              <h4>{{item.areaname}}</h4>
            </div>
          </div>
        </template>
        <div v-if="roomlist.length == 0 && isLoad" class="listNull">暂无数据</div>
      </div>
    </div>
    <div class="room_buts">
      <span class="room_buts_left">可用鼠标拖拽项目进行位置调整</span>
      <el-button class="com-but-small" @click="onAdjustment(0)">取消</el-button>
      <el-button class="com-but-small" type="primary" @click="onAdjustment(2)">确定</el-button>
    </div>
  </div>
</template>

<script>
import Sortable from "sortablejs";
import { arrSort } from "@/utils/utils.js";
export default {
  name: "effect-floor",
  props: {
    param: Object
  },
  data() {
    return {
      isLoad: false,
      key: 0,
      roomlist: [],
      array: [],
      sorta: null
    };
  },
  created() {},
  mounted: function() {
    this.getroomlayout();
    // this.setSortable();
  },
  methods: {
    onAdjustment(key) {
      if (key == 0) {
        // this.setLiData();
        this.$emit("beforeClose");
      } else if (key == 2) {
        this.$confirm("是否确定把园区楼栋当前的位置?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.onSuccess();
          })
          .catch(err => {});
      }
    },
    onSuccess() {
      this.$ajax(
        "/arearoom/i/updateAreaLayout",
        {
          areaid: this.param.areaid,
          areas: this.array.map(o => o.areaid)
        },
        "9",
        {}, // 排序对象
        true
      )
        .then(res => {
          this.$emit("onRefresh");
          this.$message({
            message: "调整位置成功",
            type: "success"
          });
          this.$emit("beforeClose");
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    getroomlayout() {
      this.isLoad = false;
      if (this.param && this.param.areaid) {
        this.$ajax("/arearoom/g/getAreaLayout", {}, "9", this.param)
          .then(res => {
            this.roomlist = res.result || [];
            this.array = [...this.roomlist];
            this.isLoad = true;
            this.key = new Date().getTime();
            setTimeout(() => {
              this.setSortable();
            }, 0);
          })
          .catch(err => {});
      }
    },
    onReverse(key) {
      if (key == 1 && this.array.length > 1) {
        if (this.sorta) {
          this.sorta.destroy();
          this.sorta = null;
        }
        this.array.reverse();
        this.roomlist = this.array;
        this.array = [...this.roomlist];
        this.key = new Date().getTime();
        setTimeout(() => {
          this.setSortable();
        }, 0);
      } else if (key == 4 && this.array.length > 1) {
        if (this.sorta) {
          this.sorta.destroy();
          this.sorta = null;
        }
        this.roomlist = arrSort(this.array, "buildname");
        this.array = [...this.roomlist];
        this.key = new Date().getTime();
        setTimeout(() => {
          this.setSortable();
        }, 0);
      }
    },
    setSortable() {
      if (this.sorta) {
        this.sorta.destroy();
        this.sorta = null;
      }
      var _this = this;
      var $ul = this.$el.querySelector(".roomBox_maxbox .region");
      this.sorta = new Sortable($ul, {
        ghostClass: "blue-background-class",
        onUpdate: function(event) {
          var newIndex = event.newIndex,
            oldIndex = event.oldIndex;
          var item = _this.array.splice(oldIndex, 1);
          _this.array.splice(newIndex, 0, item[0]);
          // 下一个tick就会走patch更新
        },
        animation: 150
      });
    }
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.getroomlayout();
      }
    }
  }
};
</script>
<style lang='scss'>
.effect-floor {
  .room_buts {
    .room_buts_left {
      float: left;
    }
    margin-top: 10px;
    border-top: 1px solid #ccc;
    padding-top: 16px;
    text-align: right;
    .el-button {
      margin-left: 20px;
    }
  }
  position: relative;
  padding-top: 40px;
  .roomBox_buts {
    position: absolute;
    top: 24px;
    margin-top: -15px;
    right: 20px;
    .el-button {
      margin-left: 20px;
    }
  }
  .roomBox_maxbox {
    overflow-y: auto;
  }
  .region {
    min-height: 100px;
    margin: -1px 0;
    width: 100%;
    display: inline-flex;
    background: #fff;
    flex-wrap: wrap;
    text-align: center;
    .li {
      height: 90px;
      width: 100px;
      margin: 20px 10px;
      display: flex;
      flex-direction: column;
      .img {
        flex: 1;
        margin: auto;
        img {
          width: 102px;
          height: 63px;
        }
      }
      .name h4 {
        white-space: normal;
      }
      &.floorBox {
        img {
          margin-top: 12px;
          width: 44px;
          height: 53px;
        }
      }
    }
  }
}
</style>