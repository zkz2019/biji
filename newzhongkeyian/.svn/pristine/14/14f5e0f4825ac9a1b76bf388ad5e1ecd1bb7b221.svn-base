<!-- 有线联网锁升级 -->
<template>
  <el-container>
    <fel-left-tree leftTitle="建筑列表" class="nblots361">
      <div slot="left" class="left-tree">
        <fel-tree1
          :showCheckbox="false"
          class="tree1"
          :idArr="[0]"
          :refresh="refreshTree"
          interface="/system/onlineup/yxlockversion/1/getbuild"
          @handleNodeClick="handleNodeClick"
        ></fel-tree1>
      </div>
      <el-container>
        <el-header class="query_headbox">
          <com-title>{{ toParam.alias }}</com-title>
          <retrieval class="query_head">
            <inpbox inptext="传输状态">
              <el-select v-model="param.statustype" class="con-select qh_inp">
                <el-option
                  v-for="item in lustates"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </inpbox>
            <inpbox :inptext="'请输入'">
              <el-input
                clearable
                class="con-search qh_inp"
                v-model="param.search"
                placeholder="输入网关唯一ID/通讯ID进行检索"
              ></el-input>
            </inpbox>
            <inpbox inptext="请选择版本">
              <el-select
                class="con-select qh_inp"
                v-model="param.versiontype"
                filterable
                placeholder="请选择"
              >
                <el-option
                  v-for="item in options"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </inpbox>
            <inpbox :inptext="'请输入'">
              <el-input
                clearable
                class="con-search qh_inp"
                v-model="param.version"
                placeholder="输入版本号进行检索"
              ></el-input>
            </inpbox>
            <inpbox>
              <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
              <fel-button class="qh_btn" @click="onReset">重置</fel-button>
            </inpbox>
          </retrieval>
        </el-header>
        <el-main class="query_main">
          <paging-table
            class="tobleList"
            height="100%"
            noInit
            ref="paging-table"
            :paging="6"
            :sizes="[6, 10, 20, 30, 50]"
            :isAll="range == 2 ? true : false"
            :class="{ 'cover-up': range == 2 }"
            interface="/system/onlineup/yxlockversion/2/getyxlock"
            :list="list"
            @onSelection="onSelection"
            @sort-change="sortChange"
            :refresh="refresh"
            :param="param"
            :paramObj="paramObj"
            @onEjectChange="onEjectChange"
          >
            <span v-for="(v, k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
              <i v-if="v.icon" :class="'ficon-' + v.icon"></i>
              {{ v.alias }}
            </span>
            <template v-if="quantitytypes && quantitytypes.length > 0">
              <div class="full-list" v-show="!list[0].show">
                <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
              </div>
              <batch-but
                class="sli but-blue"
                :type="range"
                :list="listArr"
                :param="quantitytypes"
                @onClick="inSavegatewayorder"
              ></batch-but>
            </template>
            <span v-if="!upDownShow" @click="onUpDown('up')" title="高级操作" class="sli refresh">
              <i class="ficon-zhedie-up"></i>
            </span>
            <span v-else @click="onUpDown('down')" title="高级操作" class="sli refresh">
              <i class="ficon-zhedie-down"></i>
            </span>
          </paging-table>
        </el-main>
      </el-container>
    </fel-left-tree>
    <el-dialog
      title="选择上传版本"
      width="40%"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="versionVisible"
    >
      <fel-form
        ref="felForm"
        class="single-row"
        :selects="selects"
        @submitForm="submitForm"
        @closeForm="beforeClose"
        width="140px"
        dynamic
        :defaultData="defaultData"
        :formData="formData"
      ></fel-form>
    </el-dialog>
    <yxlockAutoup
      :stopBtns="stopBtns"
      :dialogVisible="autoVisible"
      @beforeClose="autoVisible = false"
    ></yxlockAutoup>
    <yxLockUp :dialogVisible="dialogVisible" @beforeClose="dialogVisible = false"></yxLockUp>
    <history :dialogVisible="histVisible" :roomid="roomid" @beforeClose="histVisible = false"></history>
  </el-container>
</template>

<script>
import Storages from "../../../utils/Storage.js"; //缓存工具
import yxLockUp from "./yxLockUp";
import history from "./history";
import yxlockAutoup from "./yxlockAutoup";
export default {
  components: { yxLockUp, history, yxlockAutoup },
  props: {
    toParam: Object,
    toRoute: Object,
  },
  data() {
    let $this = this;
    return {
      dialogVisible: false,
      histVisible: false,
      versionVisible: false,
      autoVisible: false,
      upDownShow: true,
      lustates: [{ id: "", name: "全部" }],
      refreshTree: 0,
      upType: "",
      options: [{ id: "", name: "全部" }],
      topButs: [],
      stopBtns: [],
      versionTypes: [],
      selects: { versionTypes: [] },
      defaultData: { times: ["00:00", "23:59"] },
      formData: [
        {
          noShow: false,
          value: "dvid",
          name: "请选择上传版本",
          type: "select",
          select: "versionTypes",
          // onChange: this.onChange,
          slabel: "deviceversion",
          svalue: "dvid",
          rules: [
            {
              required: true,
              message: "请选择上传版本",
            },
          ],
        },

        {
          noShow: true,
          value: "dates",
          name: "预订时间段",
          type: "date",
          date: "datetimerange",
          popperClass: "wid480 miniDate",
          dTime: ["00:00:00", "23:59:59"],
          options: {
            disabledDate(time) {
              return time.getTime() < new Date().getTime() - 86400000;
            },
          },
          format: "yyyy-MM-dd HH:mm:ss",
        },
        {
          noShow: true,
          close: "type1",
          value: "times",
          name: "开始结束时间",
          type: "time",
          format: "HH:mm",
          date: "ftime",
        },
      ],
      dvid: "",
      roomObj: {},
      range: "1",
      quantitytypes: [],
      refresh: 0,
      timeArr: [],
      dateArr: [],
      roomid: "",
      param: {
        agid: "0",
        statustype: "",
        search: "",
        versiontype: "",
        version: "",
        sequence: "",
        sortby: "",
      },
      paramObj: {},
      isSelectable: true,
      list: [
        {
          type: "selection",
          width: "40px",
          selectable: this.onSelectable,
        },
        {
          name: "序号",
          type: "$index",
          width: "50px",
        },

        // {
        //   name: "网关",
        //   prop: "gatewaycode",
        //   minWidth: "70px"
        // },

        {
          name: "门锁位置",
          prop: "roomlocation",
          sortable: "custom",
          minWidth: "170px",
        },
        {
          name: "门锁唯一ID",
          minWidth: "120px",
          sortable: "custom",
          prop: "roomcode2",
        },
        {
          name: "网关唯一ID",
          minWidth: "120px",
          sortable: "custom",
          prop: "gatewaycode2",
        },
        {
          name: "当前/本地储存/网关储存/后台上传版本号",
          minWidth: "160px",
          template: {
            props: ["scope"],
            computed: {
              row() {
                return this.scope.row;
              },
              lists() {
                let list = [];
                list.push("当前:" + this.row.lockver);
                list.push("存储:" + this.row.roomcacheversion);
                list.push("网关:" + this.row.deviceversion2);
                list.push("后台:" + this.row.deviceversion);
                return list;
              },
            },
            template: `<ul><li v-for="item in lists" :key="item">{{item}}</li></ul>`,
          },
        },
        {
          name: "历史记录",
          minWidth: "100px",
          sortable: "custom",
          prop: "deviceversion",
          template: {
            props: ["scope"],
            methods: {
              onClick(obj) {
                $this.onClick("T1", obj);
              },
            },
            template: `<ul @click="onClick(scope.row)" style="cursor:poInter;color:#3a8e"><li>{{scope.row.deviceversion}}</li><li>{{scope.row.gusdate?scope.row.gusdate.substr(0,10):""}}</li></ul>`,
          },
        },
        {
          name: "网关下载进度",
          sortable: "custom",
          minWidth: "75px",
          prop: "gurate",
        },
        {
          name: "门锁下载进度",
          minWidth: "75px",
          sortable: "custom",
          prop: "lurate",
        },
        {
          name: "升级状态",
          width: "90px",
          sortable: "custom",
          prop: "lustatename",
          template: {
            props: ["scope"],
            computed: {
              state() {
                let stateList = [];
                if (
                  this.scope.row.lustatename &&
                  this.scope.row.lustatename.length > 5
                ) {
                  stateList.push(this.scope.row.lustatename.substring(0, 2));
                  stateList.push(this.scope.row.lustatename.substring(2, 5));
                  stateList.push(this.scope.row.lustatename.substring(6));
                } else if (this.scope.row.lustatename.length == 3) {
                  stateList.push(this.scope.row.lustatename.substring(0));
                } else {
                  stateList.push(this.scope.row.lustatename.substring(0, 2));
                  stateList.push(this.scope.row.lustatename.substring(2));
                }
                return stateList;
              },
            },
            methods: {
              getClass() {
                let value = this.scope.row.lustatename;
                if (value.indexOf("已同步") != -1) {
                  return "puc-pg";
                } else if (value.indexOf("下载中") != -1) {
                  return "";
                } else if (
                  value.indexOf("待升级") != -1 &&
                  value.indexOf("待下载") != -1
                ) {
                  return "puc-px";
                } else {
                  return "puc-pw";
                }
              },
            },
            template: `<ul><li :class='getClass()' v-for="item in state">{{item}}</li></ul>`,
          },
        },
        {
          name: "操作",
          width: "270px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                let list = $this.listBut;
                let lists = [[], [], [], []]; //Array(4).fill([]);
                let show = this.scope.row.issupportup == "1" ? false : true;
                let wgShow = false;
                list.forEach((item) => {
                  item.show =
                    item.id == "718"
                      ? false
                      : item.id == "706" || item.id == "707" || item.id == "715"
                      ? wgShow
                      : show;
                  if (
                    item.id == "791" ||
                    item.id == "792" ||
                    item.id == "798"
                  ) {
                    lists[0].push(item);
                  } else if (
                    item.id == "793" ||
                    item.id == "794" ||
                    item.id == "799"
                  ) {
                    lists[1].push(item);
                  } else if (item.id == "795" || item.id == "796") {
                    lists[2].push(item);
                  } else if (item.id == "800" || item.id == "801") {
                    lists[3].push(item);
                  }
                });
                return lists;
              },
            },
            methods: {
              onClick(key, row) {
                if (key == "6" || key == "11") {
                  $this.upType = key;
                  $this.onVup(key, row);
                } else {
                  $this.onStartnblockup(key, row);
                }
              },
              showBtn(key) {
                if ((key == 0 || key == 1 || key == 2) && $this.upDownShow) {
                  return false;
                } else {
                  return true;
                }
              },
            },
            template: `<div class="operat-buts"> 
              <template v-for = "(item,ind) of listBut">
              <div v-if="showBtn(ind)">
                <el-button v-for="(v,i) of item" :disabled="v.show" :key="i" type="text" size="small" @click.stop="onClick(v.type,scope.row)">{{v.name}}</el-button>
             </div> 
             </template>
            </div>`,
          },
        },
      ],
      listBut: [],
      listArr: [],
      sonmenu: 0,
    };
  },
  watch: {
    toRoute(val) {
      if (val && val.roomcode2) {
        this.param.search = val.roomcode2;
      }
      this.onRefresh();
    },
    versionVisible(val) {
      if (val) {
        if (this.upType == "11") {
          this.formData[1].noShow = false;
          this.formData[2].noShow = false;
        } else {
          this.formData[1].noShow = true;
          this.formData[2].noShow = true;
        }
      } else {
        this.upType == "";
      }
    },
  },
  created() {
    this.inGetsonmenu(this.toParam.id);
    this.getType();
    this.getVersion();
  },
  mounted() {
    if (this.toRoute) {
      this.param.search = this.toRoute.roomcode2;
      this.onRefresh();
    }
    this.getEject();
  },
  methods: {
    onUpDown(str) {
      this.upDownShow = !this.upDownShow;
    },
    getType() {
      this.$ajax(
        "/system/onlineup/yxlockversion/5/getsearchtype",
        {},
        "1"
      ).then((res) => {
        this.lustates = [...this.lustates, ...res.result.statustype];
        this.options = [...this.options, ...res.result.versiontype];
      });
    },
    async onVup(key, row) {
      this.dvid = "";
      if (row) {
        this.roomObj = row;
      }
      if (row) {
        this.roomObj._types = "1";
      } else {
        this.roomObj._types = "2";
      }
      this.versionVisible = true;
    },
    submitForm(data) {
      if (this.upType == "11") {
        this.dateArr = data.dates.map((item) => {
          let str = item.substring(0, 17);
          return str + "00";
        });
        this.timeArr = data.times;
      }
      this.dvid = data.dvid;
      if (this.roomObj._types == "2") {
        this.onStartnblockup(this.upType);
      } else {
        this.onStartnblockup(this.upType, this.roomObj);
      }
      this.beforeClose();
    },
    onStartnblockup(type, row = null) {
      if ((type == "6" || type == "11") && this.dvid == "") {
        this.$message.error("请先选择上传版本!");
        return;
      }
      let url = "";
      let text = "";
      switch (type) {
        case "1":
          text = "门锁下载";
          url = "/system/onlineup/saveyxlockversion/1/startyxlockup"; //门锁下载
          break;
        case "2":
          text = "门锁续传";
          url = "/system/onlineup/saveyxlockversion/3/restartyxlockup"; // 门锁续传
          break;
        case "3":
          text = "更新升级";
          url = "/system/onlineup/saveyxlockversion/2/yxlocktoupversion"; //更新升级
          break;
        case "4":
          text = "强制升级";
          url = "/system/onlineup/saveyxlockversion/4/yxlockforceversion"; //强制升级
          break;
        case "6":
          text = "网关下载";
          url = "/system/onlineup/saveyxlockversion/7/startgatelockup"; //网关下载
          break;
        case "7":
          text = "网关续传";
          url = "/system/onlineup/saveyxlockversion/8/restartgatelockup"; //网关续传
          break;
        case "8":
          text = "停止网关下载";
          url = "/system/onlineup/saveyxlockversion/6/deletegatelockup"; //停止网关
          break;
        case "9":
          text = "停止门锁下载";
          url = "/system/onlineup/saveyxlockversion/5/deleteyxlockup"; //停止门锁
          break;
        case "10":
          text = "状态查询";
          url = "/system/onlineup/saveyxlockversion/a/getstatus"; //状态查询
          break;
        case "11":
          text = "自动升级";
          url = "/system/onlineup/saveyxlockversion/b/saveautoyxlockup"; //自动升级
          break;
      }
      let data = {
        actiontype: this.range == "1" ? "勾选范围" : "跨页全选",
        agid: this.param.agid,
        statustype: this.param.statustype,
        search: this.param.search,
        version: this.param.version,
        versiontype: this.param.versiontype,
      };
      let autoData = {
        autostartdate: this.dateArr[0],
        autostarttime: this.timeArr[0],
        autoenddate: this.dateArr[1],
        autoendtime: this.timeArr[1],
      };
      if (type == "11") {
        data = { ...data, ...autoData };
      }
      if (type == "6" || type == "11") {
        data.dvid = this.dvid;
      }
      let obj =
        this.listArr.length > 0
          ? this.listArr.map((item) => {
              return item.roomid;
            })
          : [];
      if (row && row.roomid) {
        obj = [row.roomid];
      }
      this.$confirm(
        (text.indexOf("停止") ? "确定要进行" : "确定要") + text + "吗?",
        "提示",
        {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning",
        }
      ).then(() => {
        this.$ajax(url, data, "1", obj, true)
          .then(() => {
            this.$message({
              type: "success",
              message: text + "成功!",
            });
            this.onRefresh();
          })
          .catch((err) => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error",
            });
          });
      });
    },
    handleNodeClick(data) {
      this.param.agid = data.buildid;
      this.onRefresh();
    },
    inSavegatewayorder(id /*obj*/) {
      if (id == "793") {
        this.onStartnblockup("1");
      } else if (id == "794") {
        this.onStartnblockup("2");
      } else if (id == "795") {
        this.onStartnblockup("3");
      } else if (id == "796") {
        this.onStartnblockup("4");
      } else if (id == "791") {
        this.upType = "6";
        this.onVup(id);
      } else if (id == "792") {
        this.onStartnblockup("7");
      } else if (id == "798") {
        this.onStartnblockup("8");
      } else if (id == "799") {
        this.onStartnblockup("9");
      } else if (id == "800") {
        this.onStartnblockup("10");
      } else if (id == "801") {
        this.upType = "11";
        this.onVup(id);
      }
    },
    inGetsonmenu(id) {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: id }, "1")
        .then((res) => {
          res.result.forEach((item) => {
            let entity = item.entity;
            if (entity.id == "793") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "1",
                id: entity.id,
                name: entity.alias,
              });
            } else if (entity.id == "794") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "2",
                id: entity.id,
                name: entity.alias,
              });
            } else if (entity.id == "795") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "3",
                id: entity.id,
                name: entity.alias,
              });
            } else if (entity.id == "796") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "4",
                id: entity.id,
                name: entity.alias,
              });
            } else if (entity.id == "797") {
              this.topButs.push(entity);
            } else if (entity.id == "791") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "6",
                id: entity.id,
                name: entity.alias,
              });
            } else if (entity.id == "792") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "7",
                id: entity.id,
                name: entity.alias,
              });
            } else if (entity.id == "798") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "8",
                id: entity.id,
                name: entity.alias + "下载",
              });
            } else if (entity.id == "799") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "9",
                id: entity.id,
                name: entity.alias + "下载",
              });
            } else if (entity.id == "800") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "10",
                id: entity.id,
                name: entity.alias,
              });
            } else if (entity.id == "801") {
              this.quantitytypes.push(entity);
              this.listBut.push({
                type: "11",
                id: entity.id,
                name: entity.alias,
              });
            } else if (entity.id == "802") {
              this.topButs.push(entity);
            } else if (entity.id == "934") {
              this.stopBtns.push(entity);
            }
          });
        })
        .catch((err) => {
          console.log("err", err);
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    getVersion(/*islock*/) {
      this.$ajax("/system/onlineup/saveyxlockversion/9/getversion", {}, "1")
        .then((res) => {
          this.versionTypes = res.result;
          this.selects.versionTypes = res.result;
        })
        .catch((err) => {
          console.log("err", err);
        });
    },
    onClick(key, obj) {
      if (key == "797") {
        this.dialogVisible = true;
      } else if (key == "802") {
        this.autoVisible = true;
      } else if (key == "T1") {
        this.histVisible = true;
        this.roomid = obj.roomid;
      }
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    onRefresh() {
      this.isSelectable = true;
      this.range = "1";
      if (this.$refs["paging-table"]) {
        this.$refs["paging-table"].clearSelection();
      }
      this.refresh = new Date().getTime();
    },
    onReset() {
      Object.keys(this.param).forEach((key) => {
        if (key == "agid") {
          // this.param[key] = "0";
        } else {
          this.param[key] = "";
        }
      });
      this.onRefresh();
    },
    sortChange(obj) {
      if (obj.order) {
        if (obj.order == "descending") {
          this.param.sequence = "2";
        } else if (obj.order == "ascending") {
          this.param.sequence = "1";
        }
        this.param.sortby = obj.prop;
      } else {
        this.param.sequence = "";
        this.param.sortby = "";
      }
      this.onRefresh();
    },
    onSelection(data) {
      this.listArr = data;
    },
    beforeClose() {
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].resetForm();
      }
      this.versionVisible = false;
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "wxlwssj709");
    },
    getEject() {
      this.$common.getEject(this, "list", "wxlwssj709");
    },
  },
};
</script>

<style lang="scss" scoped>
.checkUpVersion {
  padding: 10px 50px;
  .selBox {
    width: 100%;
    // margin: 10px 150px;
  }
  .butBox {
    // border-top: 1px solid #ccc;
    // margin: 10px 150px;
    height: 50px;
    button {
      float: right;
      margin-left: 10px;
    }
  }
}
</style>
