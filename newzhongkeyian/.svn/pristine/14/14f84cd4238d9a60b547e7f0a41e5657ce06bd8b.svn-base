<!-- 门禁 -->
<template>
  <el-container>
    <fel-left-tree leftTitle="建筑列表" class="msgl308">
      <div slot="left" class="left-tree">
        <fel-tree1
          :showCheckbox="false"
          class="tree1"
          :idArr="[0]"
          :refresh="refreshTree"
          interface="/system/device/deviceaccess/1/getbuildtree"
          @handleNodeClick="handleNodeClick"
        ></fel-tree1>
      </div>
      <el-container>
        <el-header class="query_headbox">
          <com-title>{{toParam.alias}}</com-title>
          <retrieval class="query_head">
            <inpbox :inptext="'读头数大于等于'">
              <el-input-number :min="0" clearable class="qh_inp wid150" v-model="param.dtnum"></el-input-number>
            </inpbox>
            <inpbox :inpb="true">
              <el-select v-model="param.accessstate" class="wid150 qh_inp">
                <el-option
                  v-for="item in lockstates"
                  :key="item.accessstate"
                  :label="item.statename"
                  :value="item.accessstate"
                ></el-option>
              </el-select>
            </inpbox>

            <inpbox>
              <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
              <fel-button class="qh_btn" @click="onReset">重置</fel-button>
            </inpbox>
          </retrieval>
        </el-header>
        <el-main class="query_main">
          <paging-table
            class="tobleList"
            height="100%"
            noInit
            ref="paging-table"
            :isAll="range == 2? true:false"
            :class="{'cover-up':range == 2}"
            interface="/system/device/deviceaccess/2/getdeviceaccess"
            :list="list"
            @onSelection="onSelection"
            :refresh="refresh"
            :param="param"
            :paramObj="paramObj"
            @onEjectChange="onEjectChange"
          >
            <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
              <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
              {{v.alias}}
            </span>
            <template v-if="quantitytypes && quantitytypes.length > 0">
              <div class="full-list" v-show="!list[0].show">
                <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
              </div>
              <batch-but
                class="sli but-blue"
                :type="range"
                :list="listArr"
                :param="quantitytypes"
                @onClick="inSavegatewayorder"
              ></batch-but>
            </template>
          </paging-table>
        </el-main>
      </el-container>
    </fel-left-tree>
    <modifyAccessControl
      @onRefresh="onRefresh"
      :param="modifyParam"
      :paramObj="modifyParamObj"
      @beforeClose="dialogModify=false"
      :dialogVisible="dialogModify"
    ></modifyAccessControl>
    <infoAccessControl
      :param="infoParam"
      @beforeClose="dialogInfo=false"
      :dialogVisible="dialogInfo"
    ></infoAccessControl>
    <replaceAccessControl
      @onRefresh="onRefresh"
      :param="replaceParam"
      @beforeClose="dialogReplace=false"
      :dialogVisible="dialogReplace"
    ></replaceAccessControl>
    <addAccessControl
      :dialogVisible="dialogVisibleAdd"
      :defaultData="defaultDataAdd"
      :param="paramADd"
      @beforeClose="beforeCloseAdd"
    ></addAccessControl>
  </el-container>
</template>

<script>
import Storages from "../../../utils/Storage.js"; //缓存工具
import axios from "axios";
import infoAccessControl from "./infoAccessControl";
import modifyAccessControl from "./modifyAccessControl";
import replaceAccessControl from "./replaceAccessControl";
import addAccessControl from "./addAccessControl";
export default {
  components: {
    modifyAccessControl,
    infoAccessControl,
    replaceAccessControl,
    addAccessControl
  },
  props: {
    toParam: Object
  },
  data() {
    let $this = this;
    return {
      dialogVisibleAdd: false,
      defaultDataAdd: {},
      paramADd: {},
      lockstates: [
        { accessstate: "", statename: "所有状态门锁" },
        { accessstate: "-1", statename: "离线" },
        { accessstate: "1", statename: "在线" },
        { accessstate: "-2", statename: "未安装" }
      ],
      dialogReplace: false,
      replaceParam: {},
      modifyParamObj: [],
      dialogInfo: false,
      infoParam: {},
      refreshTree: 0,
      topButs: [],
      dialogGuideFile: false,
      modifyParam: {},
      dialogQuery: false,
      dialogModify: false,
      range: "1",
      queryParam: {
        sendtype: "勾选范围"
        // gotype2: ""
      },
      quantitytypes: [],
      refresh: 0,
      param: {
        buildid: "",
        dtnum: "",
        accessstate: ""
      },
      paramObj: {},
      isSelectable: true,
      list: [
        {
          type: "selection",
          selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "名称",
          prop: "accessname"
        },
        {
          name: "IP地址",
          prop: "ip",
          template:{
            props:["scope"],
            methods:{
              topath(path){
                let topath="http://"+path;
                window.open(topath);
              }
            },
            template:`
            <div>
             <el-button type="text" size="small" @click.stop="topath(scope.row.ip)">{{scope.row.ip}}</el-button>
            </div>`
          }
        },
        {
          name: "唯一ID",
          prop: "accesscode"
        },
        {
          name: "绑定读头",
          prop: "readheads"
        },
        {
          name: "通讯状态",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.accessstate;
                if (value == "在线") {
                  return "puc-pg";
                } else if (value == "离线") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class='getClass()'>{{scope.row.accessstate}}</span>`
          }
        },
        {
          name: "操作",
          width: "170px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              }
            },
            methods: {
              onClick(key) {
                if (key == "1") {
                  $this.onReplace(this.scope.row);
                } else if (key == "2") {
                  $this.modify(this.scope.row);
                } else if (key == "3") {
                  $this.onInfo(this.scope.row);
                } else {
                  $this.delete([this.scope.row.accessid]);
                }
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.type)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      listBut: [],
      listArr: [],
      sonmenu: 0
    };
  },
  created() {
    this.inGetsonmenu();
  },
  mounted() {
    this.getEject();
  },
  methods: {
    //信息
    onInfo(data) {
      this.infoParam = data;
      this.dialogInfo = true;
    },
    // 更改
    onReplace(data) {
      this.replaceParam = data;
      this.dialogReplace = true;
    },
    onSelectable() {
      return this.isSelectable;
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        if (key != "buildid") {
          this.param[key] = "";
        }
      });
      this.onRefresh();
      this.isSelectable = true;
      this.range = "1";
    },
    onSelection(data) {
      this.listArr = data;
    },
    onClick(key, data) {
      if (key == 466) {
        this.dialogGuideFile = true;
      } else if (key == 353) {
        this.dialogQuery = true;
      } else if (key == 589) {
        this.dialogVisibleAdd = true;
      }
    },
    inSavegatewayorder(id, obj) {
      this.$confirm("此操作将删除选择门禁, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this.queryParam.sendtype = this.range == 2 ? "区域范围" : "勾选范围";
        // this.queryParam.gotype2 = obj.alias;
        // if (id == "563") {
        //   this.modify();
        // } else
        // if (!this.queryParam.gotype2) {
        //   this.$message({
        //     message: "请先选择指令类型",
        //     type: "warning"
        //   });
        // } else
        if (
          this.queryParam.sendtype == "勾选范围" &&
          (!this.listArr || this.listArr.length == 0)
        ) {
          this.$message({
            message: "请先选择要发指令的门锁",
            type: "warning"
          });
        } else {
          // this.queryParam.buildid = this.paramObj.buildid;
          let obj = Object.assign({}, this.param, this.queryParam);
          // if (this.queryParam.gotype != "勾选范围") {
          //   obj = Object.assign({}, this.param, this.queryParam);
          // }
          this.$ajax(
            "/system/device/deviceaccess/deleteaccess/1/deleteaccess",
            obj,
            "1",
            this.listArr.map(o => o.accessid),
            true
          )
            .then(res => {
              this.$message({
                message: "指令下发成功",
                type: "success"
              });
              this.onRefresh();
            })
            .catch(err => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] ` + err.resultMsg,
                type: "error"
              });
            });
        }
      });
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          res.result.forEach(value => {
            let obj = value.entity;
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == 585) {
              this.listBut.push({
                type: "1",
                name: "更换"
              });
            } else if (id == 586) {
              this.listBut.push({
                type: "2",
                name: "配置"
              });
            } else if (id == 587) {
              this.listBut.push({
                type: "3",
                name: "信息"
              });
            } else if (id == 588) {
              this.listBut.push({
                type: "4",
                name: "删除"
              });
              this.quantitytypes.push(obj);
            } else if (id == 589) {
              this.topButs.push(obj);
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    delete(arr) {
      let data = Object.assign({ sendtype: "勾选范围" }, this.param);
      this.$confirm("此操作将删除当前门锁, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.$ajax(
            "/system/device/deviceaccess/deleteaccess/1/deleteaccess",
            data,
            "1",
            arr,
            true
          )
            .then(res => {
              this.$message({
                message: "删除成功",
                type: "success"
              });
              this.onRefresh();
            })
            .catch(err => {
              this.$message({
                showClose: true,
                message: `[${err.resultCode}] `+err.resultMsg ,
                type: "error"
              });
            });
        })
        .catch(err => {});
    },
    modify(data) {
      this.modifyParam = data;
      this.dialogModify = true;
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    handleNodeClick(data) {
      this.paramObj = data;
      this.param.buildid = data.buildid;
      this.onRefresh();
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    beforeCloseAdd() {
      this.dialogVisibleAdd = false;
    },
    onEjectChange() {
      //将用户隐藏表格的信息存到localStorage
      let arr = this.list.map(o => o.show);
      Storages.setlocalStorage("mj584.eject", arr);
    },
    getEject() {
      //从localStorage获取用户隐藏表格的信息
      let arr = Storages.getlocalStorage("mj584.eject") || [];
      let lists = [];
      this.list.forEach((value, key) => {
        let obj = Object.assign({}, value);
        obj.show = arr[key];
        lists.push(obj);
      });
      this.list = lists;
    }
  }
};
</script>
