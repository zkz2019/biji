<template>
  <el-container class="kinguser">
    <el-header class="query_headbox">
      <retrieval class="query_head marpadbor0">
        <inpbox :inpb="true">
          <el-select class="wid150 qh_inp" v-model="param.statetype">
            <el-option
              v-for="item in states"
              :key="item.statetype"
              :label="item.statename"
              :value="item.statetype"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox :inpb="true">
          <el-input
            clearable
            class="qh_w270 qh_inp"
            v-model="param.search"
            :placeholder="'请输入'+getNumber()+'/身份证查询'"
          ></el-input>
        </inpbox>
        <inpbox>
          <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="padt0 query_main">
      <paging-table
        class="tobleList wh100"
        height="100%"
        interface="/lock/operate/hotel/j/getteamroomnew"
        :list="list"
        :refresh="refresh"
        :param="param"
        :paramObj="paramObj"
        ref="paging-table"
        :isAll="range == 2? true:false"
        :class="{'cover-up':range == 2}"
        @onRefreshTable="onRefreshTable"
        @onSelection="(d)=>{selecArr=d}"
      >
        <template v-if="batchButs.length > 0">
          <div class="full-list" v-show="!list[0].show">
            <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
          </div>
          <batch-but
            class="sli but-blue"
            :type="range"
            :list="selecArr"
            :param="batchButs"
            @onClick="onAction"
          ></batch-but>
        </template>
      </paging-table>
    </el-main>
  </el-container>
</template>

<script>
import { mapGetters } from "vuex";
export default {
  components: {},
  props: {
    checkedroom: Object
  },
  data() {
    let $this = this;
    return {
      param: { statetype: "", search: "" },
      states: [
        {
          statetype: "",
          statename: "全部"
        }
      ],
      refresh: 0,
      paramObj: {},
      range: "1",
      batchButs: [
        {
          id: "9",
          alias: "重载授权"
        },
        {
          id: "10",
          alias: "删除授权"
        }
      ],
      selecArr: [],
      list: [
        {
          type: "selection",
          selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "50px"
        },
        {
          name: "有效开始日期",
          width: "110px",
          prop: "trsdate"
        },
        {
          name: "有效结束日期",
          // prop: "tredate",
          template: {
            props: ["scope"],
            computed: {
              row() {
                return this.scope.row;
              },
              text() {
                if (
                  this.scope.row.tredate == "2099-12-31 00:00:00" ||
                  this.scope.row.tredate == ""
                ) {
                  return "长期";
                } else {
                  return this.scope.row.tredate;
                }
              }
            },
            template: `<el-tooltip class="item" effect="dark" :content="text" placement="top-start">
      <div style="overflow: hidden;white-space:nowrap;text-overflow:ellipsis">{{text}}</div>
    </el-tooltip>`
          },
          width: "110px"
        },
        {
          name: "授权类型",
          width: "80px",
          prop: "authtype"
        },
        {
          name: "卡号",
          prop: "cardcode"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },

        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: "手机",
          prop: "personphone"
        },
        {
          name: "指令状态",
          // prop: "statetypename"
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.statetypename;
                if (value == "下发成功") {
                  return "puc-pg";
                } else if (value == "下发失败") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class='getClass()'>{{scope.row.statetypename}}</span>`
          }
        },
        {
          name: "团名",
          prop: "teamname"
        },
        {
          name: "最后下发日期",
          prop: "trczdate",
          width: "110px"
        },

        {
          name: "授权账号",
          prop: "userlogin",
          width: "80px"
        },
        {
          name: "操作",
          width:"100px",
          template: {
            props: ["scope"],
            methods: {
              onClick(obj) {
                this.$confirm("是否重载授权", "提示", {
                  confirmButtonText: "确定",
                  cancelButtonText: "取消",
                  type: "warning"
                }).then(() => {
                  $this.inreadauths([this.scope.row]);
                });
              },
              onDelete(obj) {
                this.$confirm("是否删除授权", "提示", {
                  confirmButtonText: "确定",
                  cancelButtonText: "取消",
                  type: "warning"
                }).then(() => {
                  $this.onDelete([this.scope.row]);
                });
              }
            },
            template: `<div class="operat-buts"> 
             <el-button type="text" size="small" @click.stop="onClick()">重载</el-button>
             <el-button v-if="scope.row.atype!=1&&scope.row.authtype!='删除授权'" type="text" size="small" @click.stop="onDelete()">删除</el-button>
            </div>`
          }
        }
      ]
    };
  },
  created() {
    this.param.roomid = this.checkedroom.roomid;
    this.$ajax("/lock/operate/hotel/i/getauthstate", {}, "1")
      .then(res => {
        this.states = this.states.concat(res.result);
      })
      .catch(err => {
        console.log("err", err);
      });
  },
  mounted() {},
  methods: {
    ...mapGetters(["getNumber"]),
    onDelete(arr) {
      let data = Object.assign({}, this.param);
      data.actiontype = this.range == "2" ? "跨页全选" : "勾选范围";
      this.$ajax("/lock/operate/hotel/q/deleteauths", data, "1", arr, true)
        .then(res => {
          this.onRefresh();
          this.$message({
            message: "删除成功!",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onReset() {
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.param.roomid = this.checkedroom.roomid;
      this.onRefresh();
    },
    onRefreshTable() {
      this.$ajax(
        "/lock/operate/info/o/getauthanalysis",
        { roomid: this.checkedroom.roomid },
        "1"
      )
        .then(res => {
          this.statistics = res.result;
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    onAction(key) {
      if (key == "9") {
        this.$confirmCon("确定要当前重载当前选中授权吗？", () => {
          this.inreadauths(this.selecArr);
        });
      } else if (key == "10") {
        this.$confirmCon("确定要当前删除当前选中授权吗？", () => {
          this.onDelete(this.selecArr);
        });
      }
    },
    inreadauths(arr) {
      let data = Object.assign({}, this.param);
      data.actiontype = this.range == "2" ? "跨页全选" : "勾选范围";
      this.$ajax("/lock/operate/hotel/k/reloadteamroom", data, "1", arr, true)
        .then(res => {
          this.onRefresh();
          this.$message({
            message: "重载成功!",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    }
  }
};
</script>

<style lang="scss">
.kinguser {
  .query_headbox {
    .marpadbor0 {
      padding-left: 20px;
    }
  }
  .query_main {
    position: relative;
    .paging-statistics {
      position: absolute;
      bottom: 5px;
      left: 16px;
      display: flex;
      li {
        padding-right: 10px;
        span {
          padding: 2px;
        }
      }
    }
  }
}
</style>