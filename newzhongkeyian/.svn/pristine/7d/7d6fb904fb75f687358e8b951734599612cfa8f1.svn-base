<template>
  <el-popover
    class="disIB"
    @show="onShowPopover"
    @hide="onHidePopover"
    placement="bottom-start"
    trigger="click"
  >
    <el-tabs v-if="getIsClassify()" class="top-switch" stretch v-model="type">
      <el-tab-pane label="按位置显示" name="0"></el-tab-pane>
      <el-tab-pane label="按分组查找" name="1"></el-tab-pane>
    </el-tabs>
    <fel-tree5
      v-if="type==1"
      :showCheckbox="showCheckbox"
      ref="tree1"
      class="query tree1"
      interface="/arearoom/public/2/listAreaRoomTree"
      ajaxType="9"
      paramKey="areafatherid"
      :param="{
          arid:'0',
          areafatherid:'0'
        }"
      nodeKey="arid"
      iconName="artype"
      :defaultProps="{
          children: 'children',
          label: 'arname',
          isLeaf: 'isLeaf'
        }"
      @handleNodeClick="handleNodeClick5"
      @checkchange="checkchange5"
    ></fel-tree5>
    <fel-tree3
      v-else
      :showCheckbox="showCheckbox"
      ref="tree1"
      class="query tree1"
      :interface="interfaceUrl"
      @handleNodeClick="handleNodeClick"
      @checkchange="checkchange"
    ></fel-tree3>
    <div slot="reference" class="tree-select" @mouseout="onmouseout" @mouseover="onmouseover">
      <el-tooltip :disabled="disabled" class="item" effect="dark" :content="value" placement="top">
        <el-input
          ref="input"
          :suffix-icon="suffixIcon"
          readonly
          v-model="value"
          placeholder="请选择位置"
        >
          <i
            @click.stop="onClear"
            v-show="isClear"
            slot="suffix"
            class="el-input__icon el-icon-circle-close el-input__clear"
          ></i>
        </el-input>
      </el-tooltip>
    </div>
  </el-popover>
</template> 

<script>
import { mapGetters } from "vuex";
export default {
  props: {
    showCheckbox: {
      type: Boolean,
      default: true
    },
    interface: String
  },
  data() {
    return {
      type: "0",
      inputWin: 250,
      value: "",
      suffixIcon: "el-icon-arrow-down",
      isClear: false
    };
  },
  computed: {
    disabled() {
      return this.byteLength(this.value) < this.inputWin / 9;
    },
    interfaceUrl() {
      return this.interface;
    }
  },
  mounted() {
    this.inputWin = this.$refs["input"].$el.offsetWidth;
  },
  methods: {
    ...mapGetters(["getIsClassify"]),
    byteLength(val) {
      return val.replace(/[^x00-xFF]/g, "**").length;
    },
    onmouseout() {
      if (this.isClear) {
        this.isClear = false;
      }
    },
    onmouseover() {
      if (this.value) {
        this.isClear = true;
      }
    },
    onShowPopover() {
      this.suffixIcon = "el-icon-arrow-up";
    },
    onHidePopover() {
      this.suffixIcon = "el-icon-arrow-down";
    },
    onClear() {
      this.value = "";
      if (this.$refs.tree1) {
        this.$refs.tree1.resetChecked();
      }
      this.$emit("onSelection", {});
      this.$emit("onChoice", []);
    },
    handleNodeClick(data) {
      if (!this.showCheckbox) {
        this.value = data.buildname;
        this.$emit("onSelection", data, this.type);
      }
    },
    handleNodeClick5(data) {
      if (!this.showCheckbox) {
        this.value = data.arname;
        this.$emit("onSelection", data, this.type);
      }
    },
    checkchange(data, obj) {
      obj.checkedNodes.forEach((item, key) => {
        if (item.top == "0") {
          for (let i = obj.checkedNodes.length - 1; i >= 0; i--) {
            let x = obj.checkedNodes[i];
            if (x.num == item.num && x.top == "1") {
              obj.checkedNodes.splice(i, 1);
            }
          }
        }
      });
      let arr = obj.checkedNodes;
      this.value = arr.map(o => o.buildname).join(",");
      this.$emit("onChoice", arr, this.type);
    },
    checkchange5(data, obj) {
      obj.checkedNodes.forEach((item, key) => {
        if (item.top == "0") {
          for (let i = obj.checkedNodes.length - 1; i >= 0; i--) {
            let x = obj.checkedNodes[i];
            if (x.num == item.num && x.top == "1") {
              obj.checkedNodes.splice(i, 1);
            }
          }
        }
      });
      let arr = obj.checkedNodes;
      this.value = arr.map(o => o.arname).join(",");
      this.$emit("onChoice", arr, this.type);
    }
  }
};
</script>
