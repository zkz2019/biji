<!-- 账户管理 -->
<template>
  <el-container>
    <el-header class="heig30 query_headbox">
      <com-title>账户管理</com-title>
      <retrieval class="query_head">
        <inpbox inptext="状态">
          <el-select v-model="param.state" class="wid200 qh_inp">
            <el-option
              v-for="item in states"
              :key="item.value"
              :label="item.statename"
              :value="item.state"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox inptext="类型">
          <el-select v-model="param.type" class="wid200 qh_inp">
            <el-option
              v-for="item in types"
              :key="item.value"
              :label="item.statename"
              :value="item.state"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox :inptext="'选择组织'">
          <queryOrgan
            ref="queryOrgan"
            class="qh_inp qh_w270"
            @onChoice="onChoiceZZ"
            interface="/system/user/2/getpersontree"
          ></queryOrgan>
        </inpbox>
        <inpbox :inptext="'请输入'">
          <el-input
            v-model="param.search"
            class="wid250 qh_inp"
            clearable
            type="text"
            placeholder="输入姓名|账号|创建人进行检索"
          ></el-input>
        </inpbox>
        <inpbox :inptext="''">
          <el-button class="buta qh_btn" size="small" type="primary" @click="onRefresh">查询</el-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="pad0-10 query_main">
      <paging-table
        height="100%"
        interface="/system/user/1/getuser"
        class="heig100"
        @sort-change="sortChange"
        @onSelection="onSelection"
        :list="list"
        :refresh="refresh"
        :paramObj="paramObj"
        :param="param"
        @onEjectChange="onEjectChange"
      >
        <span v-for="(v, k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-' + v.icon"></i>
          {{ v.alias }}
        </span>
        <template v-if="batchButs && batchButs.length > 0">
          <batch-but
            class="sli but-blue"
            :list="listArrs"
            :param="batchButs"
            @onClick="onBatchClick"
          ></batch-but>
        </template>
      </paging-table>
    </el-main>
    <accountAdd
      @onRefresh="onRefresh"
      :param="addParam"
      :dialogVisible="dialogAdd"
      @beforeClose="dialogAdd = false"
    ></accountAdd>
    <addwz
      :dialogVisible="dialogPosition"
      @handleClose="dialogPosition = false"
      :buttons="buttonswz"
      :param="addParam"
    ></addwz>
    <addry
      :dialogVisible="dialogPerson"
      @handleClose="dialogPerson = false"
      :buttons="buttonsry"
      :param="addParam"
    ></addry>
    <addzz
      :dialogVisible="dialogOrgani"
      @handleClose="dialogOrgani = false"
      :buttons="buttonszz"
      :param="addParam"
    ></addzz>
    <!-- <guideFile
      :dialogVisible="dialogGuideFile"
      :importButs="importButs"
      :exportButs="exportButs"
      @handleClose="dialogGuideFile=false"
    ></guideFile>-->
    <guideFile
      :dialogVisible="dialogGuideFile"
      :importButs="importButs"
      :exportButs="exportButs"
      :exImportButs="exImportButs"
      :importShow="true"
      @handleClose="dialogGuideFile = false"
    ></guideFile>
    <subAccount :dialogVisible="subDialog" :param="addParam" @handleClose="subDialog=false"></subAccount>
  </el-container>
</template>

<script>
import subAccount from "./subAccount";
import Storages from "../../utils/Storage.js"; //缓存工具
import accountAdd from "./accountAdd";
import addwz from "./addwz";
import addry from "./addry";
import addzz from "./addzz";
import queryOrgan from "./../query/queryOrgan";
// import guideFile from "@/views/common/guideFile.vue";
import guideFile from "./dialog/zhguideFile.vue";
export default {
  name: "yhgl103",
  components: {
    accountAdd,
    guideFile,
    queryOrgan,
    addry,
    addwz,
    addzz,
    subAccount
  },
  data() {
    let $this = this;
    return {
      importButs: [],
      exportButs: [],
      exImportButs: [],
      subDialog: false,
      dialogGuideFile: false,
      buttonszz: [],
      buttonsry: [],
      buttonswz: [],
      isSuper: false,
      batchButs: [],
      topButs: [],
      dialogOrgani: false,
      dialogPosition: false,
      dialogPerson: false,
      addParam: {},
      refresh: 0,
      states: [
        {
          statename: "全部",
          state: ""
        },
        {
          statename: "正常",
          state: "1"
        },
        {
          statename: "停用",
          state: "0"
        }
      ],
      types: [
        {
          statename: "全部",
          state: ""
        },
        {
          statename: "使用者",
          state: "2"
        },
        {
          statename: "管理者",
          state: "1"
        },
        {
          statename: "售后者",
          state: "3"
        },
        {
          statename: "售后管理者",
          state: "4"
        }
      ],
      param: {
        state: "",
        search: "",
        sortby: "",
        sequence: "",
        // buildid: '',
        type: ""
      },
      paramObj: [],
      dialogJurisdiction: false,
      dialogAdd: false,
      listBut: [[], [], []],
      list: [
        {
          type: "selection"
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "账户名",
          sortable: "custom",
          minWidth: "80px",
          prop: "userlogin"
        },
        {
          name: "账户类型",
          sortable: "custom",
          minWidth: "70px",
          prop: "usertype"
        },
        {
          name: "账户角色",
          sortable: "custom",
          prop: "userrole"
        },
        {
          name: "数据字典",
          sortable: "custom",
          prop: "dictionaryname"
        },
        {
          name: "姓名",
          sortable: "custom",
          prop: "username"
        },
        {
          name: "手机号",
          sortable: "custom",
          prop: "usermobile"
        },
        {
          name: "创建人",
          sortable: "custom",
          prop: "userlogin2"
        },
        {
          name: "创建时间",
          sortable: "custom",
          prop: "userdate",
          template: {
            props: ["scope"],
            methods: {
              getdate(data) {
                if (this.scope.row.userdate.length == 0) {
                  return false;
                }
                if (data) {
                  return this.scope.row.userdate.substr(0, 10);
                } else {
                  return this.scope.row.userdate.substr(11);
                }
              }
            },
            template: `<ul v-if="getdate()"><li>{{getdate(true)}}</li><li>{{getdate(false)}}</li></ul>`
          }
        },
        {
          name: "最后变动时间",
          prop: "userlastdate",
          sortable: "custom",
          width: "125px",
          template: {
            props: ["scope"],
            methods: {
              getdate(data) {
                if (this.scope.row.userlastdate.length == 0) {
                  return false;
                }
                if (data) {
                  return this.scope.row.userlastdate.substr(0, 10);
                } else {
                  return this.scope.row.userlastdate.substr(11);
                }
              }
            },
            template: `<ul v-if="getdate()"><li>{{getdate(true)}}</li><li>{{getdate(false)}}</li></ul>`
          }
        },
        {
          name: "状态",
          sortable: "custom",
          template: {
            props: ["scope"],
            template: `<span :class='scope.row.userstate=="正常"?"puc-pg":"puc-px"'>{{scope.row.userstate}}</span>`
          }
        },
        {
          noClose: true,
          show: true,
          sortable: "custom",
          name: "超级权限",
          template: {
            props: ["scope"],
            template: `<span :class='scope.row.userisadmin=="是"?"puc-pg":"puc-px"'>{{scope.row.userisadmin}}</span>`
          }
        },
        {
          name: "备注",
          sortable: "custom",
          prop: "userremark"
        },
        {
          name: "操作",
          width: "220px",
          template: {
            props: ["scope"],
            computed: {
              isdisable() {
                if (this.scope.row.usertype == "售后者") {
                  return true;
                } else {
                  return false;
                }
              },
              listBut() {
                let listBut = [];
                let userstate = this.scope.row.userstate;
                if (userstate == "正常") {
                  userstate = 1;
                } else if (userstate == "停用") {
                  userstate = 2;
                }
                if ($this.isSuper) {
                  let isSuper = this.scope.row.userisadmin;
                  if (isSuper == "是") {
                    isSuper = 1;
                  } else if (isSuper == "否") {
                    isSuper = 2;
                  }
                  listBut[2] = $this.listBut[2].filter(obj => {
                    if (isSuper == 2 && obj.type == 17) {
                      return false;
                    } else if (isSuper == 1 && obj.type == 16) {
                      return false;
                    } else {
                      return true;
                    }
                  });
                }
                listBut[0] = $this.listBut[0].filter(obj => {
                  if (userstate == 2 && obj.type == 7) {
                    return false;
                  } else if (userstate == 1 && obj.type == 6) {
                    return false;
                  } else {
                    return true;
                  }
                });
                listBut[1] = $this.listBut[1];
                return listBut;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, Object.assign({}, this.scope.row));
              }
            },
            template: `<div class="operat-buts">
            <template v-for="(val,key) of listBut">
              <span class="buts-div" v-if="val && val.length > 0" :key="key">
              <el-button v-for="(v,i) of val" :disabled="isdisable" :key="i" type="text" size="small" @click.stop="onClick(v.type||v.id)">{{v.name||v.alias}}</el-button>
              </span>
            </template>
            </div>`
          }
        }
      ],
      listArrs: [],
      sonmenu: 0
    };
  },
  created() {
    this.inGetsonmenu();
  },
  mounted() {
    this.getEject();
  },
  methods: {
    onChoiceZZ(obj) {
      let data = JSON.parse(JSON.stringify(obj));
      data.forEach(item => {
        delete item.isLeaf;
      });
      this.paramObj = data;
      console.log("data,obj", data, obj);
    },
    sortChange(obj) {
      if (obj.order) {
        if (obj.order == "descending") {
          this.param.sequence = "2";
        } else if (obj.order == "ascending") {
          this.param.sequence = "1";
        }
        let sortby = obj.prop;
        this.param.sortby = sortby;
      } else {
        this.param.sequence = "";
        this.param.sortby = "";
      }
      this.onRefresh();
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.$refs.queryOrgan.onClear();
      this.onRefresh();
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", {
        fatherid: "103"
      })
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "104") {
              this.topButs.push(value.entity);
            } else if (id == "105") {
              this.listBut[0].push({
                type: "2",
                name: "修改"
              });
            } else if (id == "378") {
              this.batchButs.push(value.entity);
              this.listBut[0].push({
                type: "7",
                name: "停用"
              });
            } else if (id == "514") {
              this.batchButs.push(value.entity);
              this.listBut[0].push({
                type: "6",
                name: "启用"
              });
            } else if (id == "-1") {
              this.isSuper = true;
              this.batchButs.push(value.entity);
              this.listBut[2].push({
                type: "16",
                name: alias
              });
            } else if (id == "-2") {
              this.isSuper = true;
              this.batchButs.push(value.entity);
              this.listBut[2].push({
                type: "17",
                name: alias
              });
            } else if (id == "106") {
              this.batchButs.push(value.entity);
              this.listBut[0].push({
                type: "4",
                name: "删除"
              });
            } else if (id == "376") {
              this.listBut[1].push(value.entity);
              value.childs.forEach(item => {
                this.buttonswz.push(item.entity);
              });
            } else if (id == "377") {
              this.listBut[1].push(value.entity);
              value.childs.forEach(item => {
                this.buttonsry.push(item.entity);
              });
            } else if (id == "604") {
              this.listBut[1].push(value.entity);
              value.childs.forEach(item => {
                this.buttonszz.push(item.entity);
              });
            } else if (id == "658") {
              let arr = value.childs;
              if (arr && arr.length > 0) {
                this.topButs.push(value.entity);
                arr.forEach(obj => {
                  let vid = obj.entity.id;
                  let valias = obj.entity.alias;
                  if (vid == "659") {
                    this.importButs.push({
                      name: valias,
                      tempUrl: "/system/user/upload/3/downmodel",
                      url: "/system/user/upload/1/uploaduser",
                      errUrl: "/system/user/upload/2/downuser"
                    });
                  } else if (vid == "660") {
                    this.importButs.push({
                      name: valias,
                      tempUrl: "",
                      url: "/system/user/uploadauth/1/uploaduserauth",
                      errUrl: "/system/user/uploadauth/1/uploaduserauth"
                    });
                  } else if (vid == "661") {
                    this.importButs.push({
                      name: valias,
                      tempUrl: "",
                      url: "/system/user/uploadtype/1/uploadusertype",
                      errUrl: "/system/user/uploadtype/5/downuploadusertypefail"
                    });
                  } else if (vid == "662") {
                    this.exImportButs.push({
                      name: valias,
                      url: "/system/user/upload/3/downmodel"
                      // data: this.param
                    });
                  } else if (vid == "663") {
                    this.exImportButs.push({
                      name: valias,
                      url: "/system/user/uploadauth/2/downuserauthmodel"
                    });
                  } else if (vid == "664") {
                    this.exImportButs.push({
                      name: valias,
                      url: "/system/user/uploadtype/2/downusertypemodel"
                    });
                  } else if (vid == "665") {
                    this.exportButs.push({
                      name: valias,
                      url: "/system/user/upload/4/downuser",
                      data: this.param
                    });
                  }
                });
              }
            } else if (id == "743") {
              this.listBut[1].push({
                type: "8",
                name: "子账号"
              });
            }
          });
          if (this.isSuper) {
            this.list[12].show = false;
            this.list[12].noClose = false;
            // this.list[14].width = "200px";
          } else {
            this.list[12].show = true;
            this.list[12].noClose = true;
            // this.list[14].width = "200px";
          }
          this.sonmenu = 4;
        })
        .catch(err => {
          console.log("err", err);
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onRefresh() {
      this.listArrs = [];
      //刷新表格
      this.refresh = new Date().getTime();
    },
    onBatchClick(key) {
      if (this.listArrs.length != 0) {
        if (key == "378") {
          this.inStopuser();
        } else if (key == "106") {
          this.inDeleteuser();
        } else if (key == "514") {
          this.inRegainuser();
        } else if (key == "-1") {
          this.inSavesuperuser();
        } else if (key == "-2") {
          this.inDeletesuperuser();
        }
      } else {
        this.$message({
          showClose: true,
          message: "请先选中账户",
          type: "warning"
        });
      }
    },
    onClick(key, data) {
      console.log("key", key, data);
      if (key == 104) {
        this.addParam = {};
        this.dialogAdd = true;
      } else if (key == 2) {
        this.addParam = {
          userlogin: data.userlogin
        };
        this.dialogAdd = true;
      } else if (key == "376") {
        //位置权限
        this.addParam = {
          userlogin: data.userlogin
        };
        this.dialogPosition = true;
      } else if (key == "377") {
        //人员权限
        this.addParam = {
          userlogin: data.userlogin
        };
        this.dialogPerson = true;
      } else if (key == "604") {
        //组织权限
        this.addParam = {
          userlogin: data.userlogin
        };
        this.dialogOrgani = true;
      } else if (key == 7) {
        this.inStopuser([data]);
      } else if (key == 4) {
        this.inDeleteuser([data]);
      } else if (key == 6) {
        this.inRegainuser([data]);
      } else if (key == 16) {
        this.inSavesuperuser([data]);
      } else if (key == 17) {
        this.inDeletesuperuser([data]);
      } else if (key == 8) {
        this.addParam = {
          userlogin: data.userlogin
        };
        this.subDialog = true;
      } else if (key == "658") {
        this.dialogGuideFile = true;
      }
    },
    inRegainuser(data) {
      let arrs = this.listArrs;
      if (arrs.length > 0 || data.length > 0) {
        let ctext = "此操作将启用勾选的账户, 是否继续?";
        if (data) {
          arrs = data;
          ctext = "此操作将启用当前的账户, 是否继续?";
        }
        this.$confirm(ctext, "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/user/delete/3/regainuser",
              {},
              "1",
              arrs.map(o => o.userlogin),
              true
            )
              .then(() => {
                this.onRefresh();
                this.$message({
                  showClose: true,
                  message: "启用成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      } else {
        this.$message({
          message: "请选择要启用的账户!",
          type: "warning"
        });
      }
    },
    inStopuser(data) {
      let arrs = this.listArrs;
      if (arrs.length > 0 || data.length > 0) {
        let ctext = "此操作将停用勾选的账户, 是否继续?";
        if (data) {
          arrs = data;
          ctext = "此操作将停用当前的账户, 是否继续?";
        }
        this.$confirm(ctext, "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/user/delete/1/stopuser",
              {},
              "1",
              arrs.map(o => o.userlogin),
              true
            )
              .then(() => {
                this.onRefresh();
                this.$message({
                  showClose: true,
                  message: "停用成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      } else {
        this.$message({
          message: "请选择要停用的账户!",
          type: "warning"
        });
      }
    },
    inSavesuperuser(data) {
      let arrs = this.listArrs;
      if (arrs.length > 0 || data.length > 0) {
        let ctext = "此操作将添加勾选账户的超级权限, 是否继续?";
        if (data) {
          arrs = data;
          ctext = "此操作将添加当前账户的超级权限, 是否继续?";
        }
        this.$confirm(ctext, "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/user/super/1/savesuperuser",
              {},
              "1",
              arrs.map(o => o.userlogin),
              true
            )
              .then(() => {
                this.onRefresh();
                this.$message({
                  showClose: true,
                  message: "添加超级权限成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      } else {
        this.$message({
          message: "请选择要添加超级权限的账户!",
          type: "warning"
        });
      }
    },
    inDeletesuperuser(data) {
      let arrs = this.listArrs;
      if (arrs.length > 0 || data.length > 0) {
        let ctext = "此操作将删除勾选账户的超级权限, 是否继续?";
        if (data) {
          arrs = data;
          ctext = "此操作将删除当前账户的超级权限, 是否继续?";
        }
        this.$confirm(ctext, "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/user/super/2/deletesuperuser",
              {},
              "1",
              arrs.map(o => o.userlogin),
              true
            )
              .then(() => {
                this.onRefresh();
                this.$message({
                  showClose: true,
                  message: "删除超级权限成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      } else {
        this.$message({
          message: "请选择要删除超级权限的账户!",
          type: "warning"
        });
      }
    },
    inDeleteuser(data) {
      let arrs = this.listArrs;
      if (arrs.length > 0 || data.length > 0) {
        let ctext = "此操作将删除勾选的账户, 是否继续?";
        if (data) {
          arrs = data;
          ctext = "此操作将删除当前的账户, 是否继续?";
        }
        this.$confirm(ctext, "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/user/delete/2/deleteuser",
              {},
              "1",
              arrs.map(o => o.userlogin),
              true
            )
              .then(() => {
                this.onRefresh();
                this.$message({
                  showClose: true,
                  message: "删除成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      } else {
        this.$message({
          message: "请选择要删除的账户!",
          type: "warning"
        });
      }
    },
    onSelection(data) {
      this.listArrs = data;
    },
    onEjectChange() {
      //将用户隐藏表格的信息存到localStorage
      let arr = this.list.map(o => o.show);
      Storages.setlocalStorage("yhgl103.eject", arr);
    },
    getEject() {
      //从localStorage获取用户隐藏表格的信息
      let arr = Storages.getlocalStorage("yhgl103.eject") || [];
      let lists = [];
      this.list.forEach((value, key) => {
        let obj = Object.assign({}, value);
        obj.show = arr[key];
        lists.push(obj);
      });
      this.list = lists;
    }
  }
};
</script>
