<!-- 团消费明细 -->
<template>
  <el-dialog
    :title="buts.alias"
    width="70%"
    append-to-body
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <div class="costDetails heig400">
      <paging-table
        class="tobleList wh100"
        height="100%"
        interface="/team/update/8/getteampersonmoney"
        :list="list"
        :refresh="refresh"
        :param="paramObj"
      >
        <span class="sli full-list">
          <el-date-picker
            v-model="dates"
            class="wid300 maR10 costDate"
            size="mini"
            type="datetimerange"
            range-separator="至"
            format="yyyy-MM-dd HH:mm:ss"
            value-format="yyyy-MM-dd HH:mm:ss"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            :default-time="['00:00:00','23:59:59']"
            :picker-options="pickerOptions"
          ></el-date-picker>
          <el-input
            clearable
            class="wid200 maR10"
            placeholder="通过姓名或身份证搜索"
            v-model="paramObj.search"
          ></el-input>
          <fel-button type="primary" @click="inSearch">查询</fel-button>
          <fel-button @click="onReset">重置</fel-button>
        </span>
        <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v,'0')">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>
      </paging-table>
    </div>
  </el-dialog>
</template>

<script>
import { format, download } from "@/utils/utils.js";
export default {
  props: {
    param: {
      type: Object,
      default() {
        return {};
      }
    },
    buts: Object,
    dialogVisible: Boolean
  },
  data() {
    let $this = this;
    return {
      refresh: 0,
      dates: [],
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "入住开始时间",
          prop: "trsdate"
        },
        {
          name: "入住结束时间",
          prop: "tredate"
        },
        {
          name: "房间",
          prop: "roomlocation"
        },
        {
          name: "姓名",
          minWidth: "80px",
          prop: "personname"
        },
        {
          name: "入住人身份证",
          prop: "personcode"
        },
        {
          name: "产生房费",
          width: "80px",
          prop: "trmoney"
        },
        {
          name: "备注",
          prop: "trremark"
        },
        {
          name: "状态",
          width: "80px",
          prop: "trstate"
        }
      ],
      pickerOptions: {
        disabledDate(time) {
          return (
            time.getTime() >
            new Date(format(new Date(), "yyyy-MM-dd") + " 23:59:59").getTime()
          );
        }
      },
      paramObj: {
        teamid: this.param.teamid,
        search: "",
        sdate: "",
        edate: ""
      }
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.paramObj = {
          teamid: this.param.teamid,
          search: "",
          sdate: "",
          edate: ""
        };
        this.inSearch();
      }
    }
  },
  computed: {
    topButs() {
      let arr = [];
      if (this.buts.childs) {
        arr = this.buts.childs.map(o => o.entity);
      }
      return arr;
    }
  },
  created() {},
  methods: {
    onReset() {
      this.dates = [];
      this.paramObj.sdate = "";
      this.paramObj.edate = "";
      this.paramObj.search = "";
      this.inSearch();
    },
    inSearch() {
      if (this.dates && this.dates.length > 0) {
        this.paramObj.sdate = this.dates[0] || "";
        this.paramObj.edate = this.dates[1] || "";
      } else {
        this.paramObj.sdate = "";
        this.paramObj.edate = "";
      }
      this.refresh = new Date().getTime();
    },
    onClick(key, obj) {
      if (key == "635") {
        this.exportBut();
      }
    },
    exportBut() {
      let url = "/team/update/9/downteampersonmoney";
      let name = "团消费明细";
      this.inExport(url, name, this.param);
    },
    inExport(url, name, data = {}, obj = {}) {
      this.$ajax(url, data, "8", obj, "文件导出中...", 60000)
        .then(res => {
          if (res.size) {
            download(res, name);
            this.$notify({
              title: "成功",
              message: name + "文件导出成功！",
              type: "success"
            });
          }
        })
        .catch(err => {
          this.$message.error("文件导出失败！失败原因：" + err.resultMsg);
        });
    },
    beforeClose() {
      this.$emit("beforeClose");
    }
  }
};
</script>