<template>
  <el-dialog
    :title="titleText"
    width="60%"
    top="10vh"
    :close-on-click-modal="false"
    append-to-body
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <el-container class="dialog-table6 query_main">
      <paging-table
        :interface="titleText=='网关明细'?'/login/home/e/getgatewayinfo':'/login/home/f/getlockinfo'"
        :param="param"
        @onSelect="onSelect"
        :refresh="refresh"
        :list="titleText=='网关明细'?list:list1"
      >
        <span class="sli">
          <el-select class="maR10 wid150" v-model="param.type" placeholder="请选择">
            <el-option
              v-for="item in options"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            ></el-option>
          </el-select>

          <el-input
            clearable
            class="search con-search"
            v-model="param.search"
            :placeholder="titleText=='网关明细'?'输入网关位置/通讯ID/唯一ID进行检索':'输入门锁唯一ID/门锁位置进行检索'"
          ></el-input>
          <fel-button type="primary" @click="onRefresh">查询</fel-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </span>
      </paging-table>
    </el-container>
  </el-dialog>
</template>

<script>
import { mapGetters } from "vuex";
export default {
  props: {
    titleText: String,
    dialogVisible: Boolean
  },
  data() {
    return {
      param: {
        search: "",
        type: ""
      },
      options: [
        {
          value: "",
          label: "全部"
        },
        {
          value: "1",
          label: "在线"
        },
        {
          value: "0",
          label: "离线"
        }
      ],
      refresh: 0,
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "通讯ID",
          prop: "gatewaycode"
        },
        {
          name: "唯一ID",
          prop: "gatewaycode2"
        },
        {
          name: "网关位置",
          prop: "gatewaylocation"
        },
        {
          name: "分配门锁",
          prop: "gatewaylock"
        },
        {
          name: "网关状态",
          prop: "gatewaystate",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.gatewaystate;
                if (value == "在线") {
                  return "puc-pg";
                } else if (value == "离线") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class="getClass()">{{scope.row.gatewaystate}}</span>`
          }
        }
      ],
      list1: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "网关通讯ID",
          prop: "gatewaycode"
        },
        {
          name: "门锁通讯ID",
          prop: "roomcharge"
        },
        {
          name: "门锁唯一ID",
          prop: "roomcode2"
        },
        {
          name: "门锁位置",
          prop: "roomlocation"
        },
        {
          name: "门锁状态",
          prop: "roomstate",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.roomstate;
                if (value == "在线") {
                  return "puc-pg";
                } else if (value == "离线") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class="getClass()">{{scope.row.roomstate}}</span>`
          }
        },
        {
          name: "门锁类型",
          prop: "roomtxtype"
        }
      ]
    };
  },
  watch: {
    dialogVisible() {
      if (this.dialogVisible) {
        this.onReset();
      }
    }
  },
  methods: {
    ...mapGetters(["getNumber"]),
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    beforeClose() {
      this.$emit("beforeClose");
    },
    onSelect(data) {
      this.$emit("onSelect", data);
    },
    //重置事件
    onReset() {
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.onRefresh();
    }
  }
};
</script>