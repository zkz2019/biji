<!-- 自组网运行监控  无线网锁运行监控 -->
<template>
  <el-container class="zzwyxjk">
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
      <retrieval class="query_head">
        <inpbox :inpb="true">
          <el-select
            class="con-select qh_inp"
            @change="search"
            v-model="param.llstate"
            placeholder="请选择"
          >
            <el-option
              v-for="item in selectarr"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox :inpb="true">
          <el-input
            clearable
            class="con-search qh_inp"
            v-model="param.search"
            placeholder="输入门锁唯一ID/创建人进行查询"
          ></el-input>
        </inpbox>
        <inpbox>
          <el-button class="buta qh_btn" type="primary" @click="search">查询</el-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="elmin query_main">
      <paging-table
        height="100%"
        @onSelection="(d)=>{this.rcids = d}"
        interface="/system/control/locklog/1/getlocklog"
        class="heig100"
        :param="param"
        :refresh="refresh"
        :refreshTable="refreshTable"
        :list="list"
        @onEjectChange="onEjectChange"
      >
        <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>
        <template v-if="batchButs && batchButs.length > 0">
          <batch-but class="sli but-blue" :list="rcids" :param="batchButs" @onClick="onBatchClick"></batch-but>
        </template>
      </paging-table>
    </el-main>
    <el-dialog
      title="监控门锁列表"
      width="70%"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="dialogVisible"
    >
      <el-container class="dialog-table6 query_main">
        <paging-table
          interface="/system/control/locklog/info/1/getlocklogdevice"
          :param="grantParam"
          :refresh="grantRefresh"
          :list="grantList"
        />
      </el-container>
    </el-dialog>
    <el-dialog
      ref="formDialog"
      title="添加日志"
      top="10vh"
      width="60%"
      :close-on-click-modal="false"
      :before-close="closeForm"
      :visible.sync="dialogForm"
    >
      <el-container class="dialog-table6 query_main">
        <paging-table
          height="100%"
          interface="/system/control/locklog/save/1/getlock"
          class="card-paging"
          @onSelection="onSelect"
          :list="cardList"
          :refresh="cardRefresh"
          :param="cardParam"
        >
          <span class="sli">
            <el-input
              class="search con-search"
              placeholder="输入唯一ID/通讯ID进行查询"
              v-model="cardParam.search"
            ></el-input>
            <fel-button type="primary" @click="inSearch">查询</fel-button>
          </span>
        </paging-table>
      </el-container>
      <div slot="footer" class="dialog-form-but">
        <el-button class="com-but-small" @click="closeForm">取消</el-button>
        <el-button class="com-but-small" type="primary" @click="submitForm">确定</el-button>
      </div>
    </el-dialog>
    <el-dialog
      title="监控日志列表"
      width="70%"
      top="8vh"
      class="grantDialog"
      :close-on-click-modal="false"
      :before-close="beforeJournalClose"
      :visible.sync="dialogJournal"
    >
      <el-container class="dialog-table6 query_main">
        <paging-table
          noInti
          interface="/system/control/locklog/info/3/getlockloginfo"
          :param="journalParam"
          :refresh="journalRefresh"
          :list="journalList"
        >
          <span class="sli">
            <span class="maR5">门锁唯一ID</span>
            <el-select @change="onChangeJournal" class="wid150" v-model="journalParam.roomid">
              <el-option
                v-for="item in roomids"
                :key="item.roomid"
                :label="item.roomcode2"
                :value="item.roomid"
              ></el-option>
            </el-select>
          </span>
        </paging-table>
      </el-container>
    </el-dialog>
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
export default {
  props: ["toParam"],
  data() {
    let $this = this;
    return {
      topButs: [],
      batchButs: [],
      cardRefresh: 0,
      cardParam: {
        search: "",
      },
      roomids: [],
      journalRefresh: 0,
      journalParam: {},
      dialogJournal: false,
      journalList: [
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "指令类型",
          prop: "lldtype2",
          width: "100px",
        },
        {
          name: "指令内容",
          prop: "lldcontent",
        },
        {
          name: "指令时间",
          prop: "llddate",
          width: "160px",
        },
        {
          name: "日志类型",
          prop: "lldtype",
          width: "80px",
        },
      ],
      dialogForm: false,
      cardList: [
        {
          type: "selection",
        },
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "门锁ID",
          prop: "roomid",
        },
        {
          name: "门锁唯一ID",
          prop: "roomcode2",
        },
        {
          name: "门锁通讯ID",
          prop: "roomcode",
        },
        {
          name: "门锁位置",
          prop: "roomlocation",
        },
        {
          name: "门锁型号",
          prop: "roommodel",
        },
        {
          name: "门锁状态",
          prop: "roomstate",
        },
      ],
      olremark: "",
      gateway: [],
      grantRefresh: 0,
      grantParam: { olid: "" },
      grantList: [
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "房间位置",
          prop: "roomlocation",
        },
        {
          name: "归属网关",
          prop: "gatewaylocation",
        },
        {
          name: "门锁通讯ID",
          prop: "roomcode",
        },
        {
          name: "门锁唯一ID",
          prop: "roomcode2",
        },
        {
          name: "门锁型号",
          prop: "roommodel",
        },
        {
          name: "通讯状态",
          prop: "roomstate",
        },
      ],
      rcids: [],
      dialogVisible: false,
      selectarr: [
        { label: "全部门锁", value: "" },
        { label: "监控中门锁", value: "1" },
      ],
      param: {
        llstate: "",
        search: "",
      },
      listBut: [],
      refresh: 0,
      refreshTable: 0,
      list: [
        // {
        //   type: "selection"
        // },
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "监控数量",
          prop: "llcount",
          width: "80px",
          template: {
            props: ["scope"],
            methods: {
              isNumber(num) {
                if (num) {
                  return /^[0-9]*$/.test(num);
                }
                return false;
              },
              onClick() {
                if (this.scope.row.llcount) {
                  $this.grantParam.llid = this.scope.row.llid;
                  $this.grantRefresh = new Date().getTime();
                  $this.dialogVisible = true;
                }
              },
            },
            template: `<div>
              <span v-if="isNumber(scope.row.llcount)"><a class="a-click" @click.stop="onClick">{{scope.row.llcount}}</a></span>
              <span v-else>{{scope.row.llcount}}</span>
            </div>`,
          },
        },
        {
          name: "门锁位置",
          prop: "roomlocation",
        },
        {
          name: "门锁唯一ID",
          prop: "roomcode2",
        },
        {
          name: "门锁通讯ID",
          prop: "roomcode",
        },
        {
          name: "开始监控时间",
          prop: "llsdate",
        },
        {
          name: "结束监控时间",
          prop: "lledate",
        },
        {
          name: "监控状态",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.llstate;
                if (value == "1") {
                  return "puc-pg";
                } else if (value == "0") {
                  return "puc-px";
                } else {
                  return "";
                }
              },
            },
            template: `<span :class='getClass()'>{{scope.row.llstatename}}</span>`,
          },
        },
        {
          name: "监控创建人",
          prop: "userlogin",
        },
        {
          name: "操作",
          width: "140px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              },
              row() {
                return this.scope.row;
              },
            },
            methods: {
              onClick(key, obj) {
                $this.onClick(key, Object.assign({}, this.scope.row), obj);
              },
              isShow(state, type) {
                if (state == "1" && type == "6") {
                  return false;
                } else if (state == "0" && type == "7") {
                  return false;
                } else {
                  return true;
                }
              },
            },
            template: `<div class="operat-buts">
            <template v-for="(v,i) of listBut">
             <el-button v-show="isShow(row.llstate,v.type)" :key="i" type="text" size="small" @click.stop="onClick(v.type, v)">{{v.name}}</el-button>
            </template>
            </div>`,
          },
        },
      ],
      sonmenu: 0,
    };
  },
  created() {
    this.inGetsonmenu();
  },
  mounted() {
    this.getEject();
  },
  methods: {
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then((res) => {
          res.result.forEach((value) => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "414") {
              this.topButs.push(value.entity);
            } else if (id == "415") {
              this.listBut.push({
                type: "7",
                name: "停止",
                alias,
              });
              // this.batchButs.push(value.entity);
            } else if (id == "417") {
              this.listBut.push({
                type: "6",
                name: "启用",
                alias,
              });
            } else if (id == "416") {
              this.listBut.push({
                type: "3",
                name: "查看",
                alias,
              });
            }
          });
          this.sonmenu = 4;
        })
        .catch((err) => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach((key) => {
        this.param[key] = "";
      });
      this.search();
    },
    inSearch() {
      this.cardRefresh = new Date().getTime();
    },
    onChangeJournal() {
      this.journalRefresh = new Date().getTime();
    },
    beforeJournalClose() {
      this.dialogJournal = false;
    },

    onSelect(obj) {
      this.gateway = obj;
    },
    closeForm() {
      this.gateway = [];
      this.olremark = "";
      this.dialogForm = false;
    },
    submitForm() {
      if (this.gateway && this.gateway.length > 0) {
        this.$ajax(
          "/system/control/locklog/save/2/savelocklog",
          {
            // olremark: this.olremark
          },
          "1",
          this.gateway.map((o) => o.roomid),
          true
        )
          .then((res) => {
            this.closeForm();
            this.onRefreshTable();
            this.$message({
              message: "添加成功",
              type: "success",
            });
          })
          .catch((err) => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error",
            });
          });
      } else {
        this.$message({
          message: "请先选择要添加日志的门锁",
          type: "warning",
        });
      }
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    onBatchClick(key, obj) {
      if (this.rcids.length != 0) {
        if (key == "415") {
          let arr = this.rcids.map((o) => o.olid);
          this.deleteJournal(arr, obj.alias);
        }
      } else {
        this.$message({
          showClose: true,
          message: "请先选中日志",
          type: "warning",
        });
      }
    },
    onClick(key, data, obj) {
      if (key == "6") {
        this.$confirm("此操作将启用此日志,是否继续？", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning",
        })
          .then(() => {
            this.$ajax(
              "/system/control/locklog/regain/1/regainlocklog",
              {
                llid: data.llid,
              },
              "1",
              [data.llid],
              true
            )
              .then((res) => {
                this.$message({
                  message: "启动成功",
                  type: "success",
                });
                this.onRefreshTable();
              })
              .catch((err) => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error",
                });
              });
          })
          .catch((err) => {});
      } else if (key == "7") {
        this.$confirm("此操作将停用此日志,是否继续？", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning",
        })
          .then(() => {
            this.deleteJournal([data.llid], obj.alias);
          })
          .catch((err) => {});
      } else if (key == "3") {
        this.$ajax(
          "/system/control/locklog/info/2/getalllocklogdevice",
          {
            llid: data.llid,
          },
          "1"
        )
          .then((res) => {
            this.roomids = res.result;
            this.journalParam.llid = data.llid;
            this.journalParam.roomid = this.roomids[0].roomid || "";

            this.journalRefresh = new Date().getTime();
            this.dialogJournal = true;
          })
          .catch((err) => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error",
            });
          });
      } else if (key == "414") {
        this.inSearch();
        this.dialogForm = true;
      }
    },
    deleteJournal(data, ts) {
      this.$ajax(
        "/system/control/locklog/delete/1/deletelocklog",
        { llid: data },
        "1",
        {},
        true
      )
        .then((res) => {
          this.$message({
            message: ts + "成功",
            type: "success",
          });
          this.onRefreshTable();
        })
        .catch((err) => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error",
          });
        });
    },
    //查询
    search() {
      this.refresh = new Date().getTime();
    },
    onRefreshTable() {
      this.refreshTable = new Date().getTime();
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "zzwyxjk");
    },
    getEject() {
      this.$common.getEject(this, "list", "zzwyxjk");
    },
  },
};
</script>