<!-- 树形控件 对象接口-->
<template>
  <div class="fel-tree">
    <el-tree
      :data="treedatas"
      :props="defaultProps"
      render-after-expand
      @node-click="handleNodeClick"
      @node-expand="nodeExpand"
      @node-collapse="nodeCollapse"
      :load="loadin"
      lazy
      show-checkbox
      @check="checkchange"
      :node-key="nodeKey"
      highlight-current
      :default-expanded-keys="idSets"
    >
      <span class="custom-tree-node" slot-scope="scope">
        <span class="tree-icon">
          <i v-if="scope.data.buildtype == 1" class="ficon-quyu"></i>
          <i v-else-if="scope.data.buildtype == 2" class="ficon-jianzhu"></i>
          <i v-else-if="scope.data.buildtype == 3" class="ficon-louceng"></i>
          {{ scope.node.label}}
        </span>
      </span>
    </el-tree>
  </div>
</template>

<script>
export default {
  props: {
    refresh: Number, //刷新
    interface: String,
    param: {
      type: Object,
      default() {
        return {};
      }
    },
    idArr: {
      type: Array,
      default() {
        return [];
      }
    },
    //默认展开的数组
    defaultProps: {
      type: Object,
      default() {
        return {
          children: "children",
          label: "pgname",
          isLeaf: "isnext"
        };
      }
    }
  },
  data() {
    return {
      nodeKey: "buildid",
      pagesids: this.pagesid,
      thistab: "",
      treedatas: [],
      idSets: this.idArr
    };
  },
  methods: {
    //多选节点击
    checkchange(data, Nodes) {
      //console.log(data, Nodes)
      this.$emit("checkchange_tree2", data, Nodes);
    },
    nodeExpand(data) {
      this.idSets.push(data[this.nodeKey]);
    },
    nodeCollapse(data) {
      const index = this.idSets.indexOf(data[this.nodeKey]);
      if (index > -1) {
        this.idSets.splice(index, 1);
      }
    },
    //点击切换表格
    handleNodeClick(data) {
      this.$emit("handleNodeClick", data);
    },
    //获取树形菜单数据
    getTreeData(node, resolve) {
      let is_get = false;
      let data = {};
      if (node && node.data) {
        let ob = node.data;
        if (typeof ob.buildid != "undefined") {
          data = ob;
          is_get = true;
        }
      }
      this.$ajax(this.interface, this.param, "1", data).then(res => {
        let aa = res.result.map(item => {
          if (item.isnext == 1) {
            item.isLeaf = false;
          } else {
            item.isLeaf = true;
          }
          return item;
        }); //过滤
        if (!is_get) {
          this.treedatas = aa;
        } else {
          return resolve(aa);
        }
      });
    },
    //生成子菜单
    loadin(node, resolve) {
      console.log(node);
      this.getTreeData(node, resolve);
    }
  },
  created() {
    this.getTreeData();
  },
  watch: {
    refresh() {
      this.getTreeData();
    }
  }
};
</script>
