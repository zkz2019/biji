<!-- 无线网关升级记录 -->
<template>
  <el-dialog
    title="无线网关升级记录"
    width="70%"
    class="importHistory"
    :close-on-click-modal="false"
    append-to-body
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <el-container class="dialog-table6 wh100">
      <!-- <el-header class="query_headbox">
        <retrieval class="query_head">
          <inpbox :inpb="true">
            <el-input
              clearable
              class="qh_w270 qh_inp maR24"
              v-model="param.search"
              :placeholder="'输入唯一ID/房间名进行查询'"
            ></el-input>
          </inpbox>
          <inpbox>
            <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
            <fel-button class="qh_btn" @click="onReset">重置</fel-button>
          </inpbox>
        </retrieval>
      </el-header>-->
      <paging-table
        interface="/system/onlineup/wxgateversionup/1/getwxgateversionup"
        ref="paging-table"
        :list="list"
        :param="param"
        :refresh="refresh"
      >
        <retrieval class="query_head">
          <inpbox inptext="请输入">
            <el-input
              clearable
              class="qh_w270 qh_inp maR24"
              v-model="param.search"
              :placeholder="'输入唯一ID/房间名进行查询'"
            ></el-input>
          </inpbox>
          <inpbox>
            <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
            <fel-button class="qh_btn" @click="onReset">重置</fel-button>
          </inpbox>
        </retrieval>
      </paging-table>
    </el-container>
    <wxVupDetails :dialogVisible="DetailsVisible" :duid="duid" @beforeClose="DetailsVisible=false"></wxVupDetails>
  </el-dialog>
</template>

<script>
import wxVupDetails from "./wxVupDetails";
export default {
  props: {
    dialogVisible: Boolean
  },
  components: {
    wxVupDetails
  },
  data() {
    let $this = this;
    return {
      DetailsVisible: false,
      param: { search: "" },
      duid: "",
      refresh: 0,
      list: [
        {
          name: "序号",
          type: "$index",
          width: "80px"
        },
        // {
        //   name:"设备类型",
        //   prop:"devicetypename",
        //   minWidth:"100px"
        // },
        {
          name: "操作时间",
          prop: "ducdate",
          width: "160px"
        },
        {
          name: "升级版本号",
          prop: "deviceversion",
          minWidth: "110px"
        },
        {
          name: "操作类型",
          prop: "dutype",
          minWidth: "90px"
        },
        {
          name: "操作账号",
          minWidth: "100px",
          prop: "userlogin"
        },
        {
          name: "进度",
          prop: "padallcount",
          width: "70px",
          formatter(row, b, c, d) {
            if (row) {
              let newtotal =
                Number(row.dufailcount) + Number(row.dusuccesscount);
              let total = Number(row.ducount);
              return Math.floor((newtotal / total) * 100) + "%";
            } else {
              return "";
            }
          }
        },
        {
          name: "总记录数",
          prop: "ducount",
          width: "80px"
        },
        // {
        //   name: "正在处理数",
        //   prop: "padcount",
        //   minWidth: "100px"
        // },
        {
          name: "处理成功数",
          prop: "dusuccesscount",
          width: "80px"
        },
        {
          name: "处理失败数",
          prop: "dufailcount",
          width: "80px"
        },
        // {
        //   name: "总包数",
        //   prop: "dvmaxno"
        // },
        {
          name: "指令类型",
          prop: "duordertypename"
        },
        {
          name: "操作",
          width: "100px",
          template: {
            props: ["scope"],
            methods: {
              onClick(key) {
                $this.onClick(this.scope.row);
              }
            },
            template: `<div class="operat-buts"> 
             <el-button type="text" size="small" @click.stop="onClick">详情</el-button>
            </div>`
          }
        }
      ]
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.onRefresh();
      } else {
      }
    }
  },
  methods: {
    onClick(data) {
      this.duid = data.duid;
      this.DetailsVisible = true;
    },
    onReset() {
      this.param.search = "";
      this.onRefresh();
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    beforeClose() {
      this.$emit("beforeClose");
    }
  }
};
</script>
