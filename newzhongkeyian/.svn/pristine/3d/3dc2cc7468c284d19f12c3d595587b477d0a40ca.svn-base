<!-- 基础参数 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
    </el-header>
    <el-main class="query_main">
      <el-tabs v-model="activeName">
        <el-tab-pane v-if="listShow1" label="初始化参数列表" name="first"></el-tab-pane>
        <el-tab-pane v-if="listShow" label="应用参数列表" name="second"></el-tab-pane>
      </el-tabs>
      <paging-table
        v-if="activeName=='first'"
        height="100%"
        interface="/system/parameter/basic/2/getparameter2"
        class="heig100"
        :list="list2"
        :refresh="refresh2"
        @onEjectChange="onEjectChange(true)"
      />
      <paging-table
        v-if="activeName=='second'"
        height="100%"
        interface="/system/parameter/basic/1/getparameter"
        class="heig100"
        :list="list"
        :refresh="refresh"
        @onEjectChange="onEjectChange()"
      />
    </el-main>
    <el-dialog
      title="修改参数"
      width="50%"
      class="jccs418-dialog"
      :close-on-click-modal="false"
      :before-close="closeForm"
      :visible.sync="dialogForm"
    >
      <div v-if="czkey == 0 || czkey == 2">
        <fel-form
          :formData="formData"
          ref="basicFelForm"
          class
          width="100px"
          dynamic
          :selects="selects"
          @closeForm="closeForm"
          @submitForm="submitForm"
          :defaultData="defaultData"
        ></fel-form>
      </div>
      <div v-else class="textcen">
        <fel-upload
          :showFileList="false"
          @uploadFile="uploadFile"
          url="/system/parameter/basic/upload/1/uploadlogo"
        />
      </div>
    </el-dialog>
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
import { mapMutations, mapActions } from "vuex";
export default {
  props: ["toParam"],
  created() {
    this.inGetsonmenu();
  },
  data() {
    let $this = this;
    return {
      listShow: false,
      listShow1: false,
      activeName: "",
      butJui: true,
      butJui1: true,
      blobURL: "",
      czkey: 0,
      selects: {
        paramvalue: []
      },
      dialogForm: false,
      formData: [
        {
          name: "名称",
          disabled: true,
          type: "text",
          value: "parameter"
        },
        {
          name: "参数值",
          type: "text",
          value: "paramvalue",
          select: "paramvalue",
          vkey: "id",
          slabel: "name",
          svalue: "",
          multiple: false,
          rules: [
            { required: true, message: "请输入参数值", trigger: "blur" },
            { required: true, message: "请输入参数值", trigger: "change" }
          ]
        },
        {
          name: "说明",
          type: "textarea",
          value: "paramremark"
          // rules: [{ required: true, message: "请输入说明", trigger: "blur" }]
        }
      ],
      button: [{ type: 2, name: "确认" }],
      defaultData: {},
      refresh: 0,
      refresh2: 0,
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "名称",
          prop: "parameter",
          width: "180px"
        },
        {
          name: "参数",
          prop: "paramvalue",
          template: {
            props: ["scope"],
            data() {
              return { blobURL: "" };
            },
            created() {
              if (this.scope.row.paramname == "logo") {
                this.queryLogo();
              }
            },
            watch: {
              "scope.row.paramvalue": function(v) {
                if (this.scope.row.paramname == "logo") {
                  this.queryLogo();
                }
              }
            },

            methods: {
              queryLogo() {
                this.$ajax(
                  "/system/parameter/basic/upload/2/downlogo",
                  {
                    filepath: this.scope.row.paramvalue
                  },
                  "3"
                )
                  .then(res => {
                    if (res.size) {
                      this.blobURL = window.URL.createObjectURL(res);
                    }
                  })
                  .catch(err => {
                    // if (err.size) {
                    //   this.blobURL = window.URL.createObjectURL(err);
                    // }
                  });
              }
            },
            template: `<div class="param">
             <span v-if="scope.row.paramname == 'logo'"><img class="paramImg" :src="blobURL"></span>
             <span v-else>{{scope.row.paramvalue}}</span>
            </div>`
          }
        },
        {
          name: "说明",
          prop: "paramremark"
        },
        {
          name: "最后变动账号",
          prop: "userlogin",
          width: "110px"
        },
        {
          name: "最后变动时间",
          prop: "paramdate",
          width: "160px"
        },
        {
          name: "操作",
          width: "60px",
          template: {
            props: ["scope"],
            computed: {
              butJui() {
                return $this.butJui;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, this.scope);
              }
            },
            template: `<div  v-if="butJui" class="operat-buts">
             <el-button v-if="scope.row.paramname == 'logo'" type="text" size="small" @click.stop="onClick(1)">上传</el-button>
             <el-button v-else type="text" size="small" @click.stop="onClick(0)">修改</el-button>
            </div>`
          }
        }
      ],
      list2: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "名称",
          prop: "parameter",
          width: "180px"
        },
        {
          name: "参数",
          prop: "paramname",
          template: {
            props: ["scope"],
            data() {
              return { blobURL: "" };
            },
            created() {
              if (this.scope.row.paramname == "logo") {
                this.queryLogo();
              }
            },
            watch: {
              "scope.row.paramname": function(v) {
                if (this.scope.row.paramname == "logo") {
                  this.queryLogo();
                }
              }
            },

            methods: {
              queryLogo() {
                this.$ajax(
                  "/system/parameter/basic/upload/2/downlogo",
                  {
                    filepath: this.scope.row.paramvalue
                  },
                  "3"
                )
                  .then(res => {
                    if (res.size) {
                      this.blobURL = window.URL.createObjectURL(res);
                    }
                  })
                  .catch(err => {
                    // if (err.size) {
                    //   this.blobURL = window.URL.createObjectURL(err);
                    // }
                  });
              }
            },
            template: `<div class="param">
             <span v-if="scope.row.paramname == 'logo'"><img class="paramImg" :src="blobURL"></span>
             <span v-else>{{scope.row.paramvalue}}</span>
            </div>`
          }
        },
        {
          name: "说明",
          prop: "paramremark"
        },
        {
          name: "最后变动账号",
          prop: "userlogin",
          width: "110px"
        },
        {
          name: "最后变动时间",
          prop: "paramdate",
          width: "160px"
        },
        {
          name: "操作",
          width: "60px",
          template: {
            props: ["scope"],
            computed: {
              butJui1() {
                return $this.butJui1;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, this.scope);
              }
            },
            template: `<div  v-if="butJui1" class="operat-buts">
             <el-button v-if="scope.row.paramname == 'logo'" type="text" size="small" @click.stop="onClick(3)">上传</el-button>
             <el-button v-else type="text" size="small" @click.stop="onClick(2)">修改</el-button>
            </div>`
          }
        }
      ],
      sonmenu: 0
    };
  },
  watch: {
    activeName(val) {
      if (val == "first") {
        this.refresh2 = new Date().getTime();
      } else {
        this.refresh = new Date().getTime();
      }
    }
  },
  mounted() {
    this.getEject();
  },
  methods: {
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            if (id == "602") {
              if (value.childs[0].entity.id == "422") {
                this.butJui = true;
              }
              this.activeName = "second";
              this.listShow = true;
            } else if (id == "601") {
              if (value.childs[0].entity.id == "603") {
                this.butJui1 = true;
              }
              this.activeName = "first";
              this.listShow1 = true;
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    ...mapMutations(["setSystemlogo"]),
    ...mapActions(["clearAccount"]),
    uploadFile(file, data) {
      this.onRefresh();
      this.dialogForm = false;
      this.$message({
        message: "logo上传成功",
        type: "success"
      });
      this.setSystemlogo({
        filepath: data
      });
    },
    resetForm() {
      if (this.$refs["basicFelForm"]) {
        this.$refs["basicFelForm"].resetForm();
      }
    },
    onRefresh() {
      this.refresh = new Date().getTime();
      this.refresh2 = new Date().getTime();
    },
    closeForm() {
      this.dialogForm = false;
      this.resetForm();
    },
    submitForm(data) {
      let paramvalue = data.paramvalue;
      if (data.isselectone === "0") {
        paramvalue = data.paramvalue.map(obj => obj.id).join(",");
      } else if (data.isselectone === "1") {
        paramvalue = data.paramvalue.id;
      }
      delete data.parameter;
      delete data.isselectone;
      data.paramvalue = paramvalue;
      if (this.czkey == 0) {
        this.$ajax(
          "/system/parameter/basic/update/2/updateparameter",
          data,
          "1",
          {},
          true
        )
          .then(res => {
            if (data.paramname == "systemcode") {
              this.$alert("软件序列号修改成功，请在10秒后再重新登录", "提示", {
                confirmButtonText: "确定",
                type: "success",
                showClose: false,
                callback: action => {
                  this.dialogForm = false;
                  this.clearAccount();
                  this.$router.push({
                    path: "/login"
                  });
                }
              });
            } else {
              this.onRefresh();
              this.dialogForm = false;
              this.$message({
                message: "修改成功",
                type: "success"
              });
            }
          })
          .catch(err => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      } else if (this.czkey == 2) {
        this.$ajax(
          "/system/parameter/basic/update/4/updateparameter2",
          data,
          "1",
          {},
          true
        )
          .then(res => {
            if (data.paramname == "systemcode") {
              this.$alert("软件序列号修改成功，请在10秒后再重新登录", "提示", {
                confirmButtonText: "确定",
                type: "success",
                showClose: false,
                callback: action => {
                  this.dialogForm = false;
                  this.clearAccount();
                  this.$router.push({
                    path: "/login"
                  });
                }
              });
            } else {
              this.onRefresh();
              this.dialogForm = false;
              this.$message({
                message: "修改成功",
                type: "success"
              });
            }
          })
          .catch(err => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      }
    },
    onClick(key, data) {
      this.czkey = key;
      if (key == 0) {
        this.formData[1].multiple = false;
        this.formData[1].type = "text";
        this.$ajax(
          "/system/parameter/basic/update/1/getparameterinfo",
          {
            paramname: data.row.paramname
          },
          "1"
        )
          .then(res => {
            let obj = res.result;
            let paramvalue = obj.paramvalue;
            if (obj.isselectone === "0") {
              this.formData[1].type = "select";
              this.formData[1].multiple = true;
              this.formData[1].vkey = "id";
              this.selects.paramvalue = obj.pcs;
              let arr = obj.paramvalue.split(",");
              paramvalue = obj.pcs.filter(obj => {
                return obj.isselect == "1";
              });
            } else if (obj.isselectone === "1") {
              this.formData[1].type = "select";
              this.selects.paramvalue = obj.pcs;
              this.formData[1].vkey = "id";
              paramvalue = {
                id: obj.paramvalue,
                name: ""
              };
            }
            this.defaultData = {
              paramname: obj.paramname,
              parameter: data.row.parameter,
              paramremark: obj.paramremark,
              paramvalue: paramvalue,
              isselectone: obj.isselectone
            };
            this.dialogForm = true;
          })
          .catch(err => {});
      } else if (key == 2) {
        this.formData[1].multiple = false;
        this.formData[1].type = "text";
        this.$ajax(
          "/system/parameter/basic/update/5/getparameterinfo2",
          {
            paramname: data.row.paramname
          },
          "1"
        )
          .then(res => {
            let obj = res.result;
            let paramvalue = obj.paramvalue;
            if (obj.isselectone === "0") {
              this.formData[1].type = "select";
              this.formData[1].multiple = true;
              this.formData[1].vkey = "id";
              this.selects.paramvalue = obj.pcs;
              let arr = obj.paramvalue.split(",");
              paramvalue = obj.pcs.filter(obj => {
                return obj.isselect == "1";
              });
            } else if (obj.isselectone === "1") {
              this.formData[1].type = "select";
              this.selects.paramvalue = obj.pcs;
              this.formData[1].vkey = "id";
              paramvalue = {
                id: obj.paramvalue,
                name: ""
              };
            }
            this.defaultData = {
              paramname: obj.paramname,
              parameter: data.row.parameter,
              paramremark: obj.paramremark,
              paramvalue: paramvalue,
              isselectone: obj.isselectone
            };
            this.dialogForm = true;
          })
          .catch(err => {});
      } else if (key == 1 || key == 3) {
        this.dialogForm = true;
      }
    },
    onEjectChange(bool = false) {
      //将用户隐藏表格的信息存到localStorage
      if (bool) {
        this.$common.onEjectChange(this.list2, "jccs418-A");
      } else {
        this.$common.onEjectChange(this.list, "jccs418-B");
      }
    },
    getEject() {
      this.$common.getEject(this, "list2", "jccs418-A");
      this.$common.getEject(this, "list", "jccs418-B");
    }
  }
};
</script>