<!-- 无线网关升级 -->
<template>
  <el-container>
    <fel-left-tree class="nblots361">
      <div slot="left" class="left-tree">
        <fel-tree1
          :showCheckbox="false"
          class="tree1"
          :idArr="[0]"
          :refresh="refreshTree"
          interface="/system/onlineup/wxgateversion/1/getbuild"
          @handleNodeClick="handleNodeClick"
        ></fel-tree1>
      </div>
      <el-container>
        <el-header class="query_headbox">
          <com-title>{{toParam.alias}}</com-title>
          <retrieval class="query_head">
            <inpbox inptext="网关版本传输状态">
              <el-select v-model="param.gustate" class="wid150 qh_inp">
                <el-option
                  v-for="item in nustates"
                  :key="item.gustate"
                  :label="item.guname"
                  :value="item.gustate"
                ></el-option>
              </el-select>
            </inpbox>
            <!-- <inpbox inptext="选择上传版本">
              <el-select v-model="dvid" class="wid150 qh_inp">
                <el-option
                  v-for="item in versionTypes"
                  :key="item.dvid"
                  :label="item.deviceversion"
                  :value="item.dvid"
                ></el-option>
              </el-select>
            </inpbox>-->
            <inpbox :inptext="'请输入'">
              <el-input
                clearable
                class="wid300 qh_inp"
                v-model="param.search"
                placeholder="输入网关唯一ID/通讯ID进行检索"
              ></el-input>
            </inpbox>
            <inpbox>
              <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
              <fel-button class="qh_btn" @click="onReset">重置</fel-button>
            </inpbox>
          </retrieval>
        </el-header>
        <el-main class="query_main">
          <paging-table
            class="tobleList"
            height="100%"
            noInit
            ref="paging-table"
            :isAll="range == 2? true:false"
            :class="{'cover-up':range == 2}"
            interface="/system/onlineup/wxgateversion/2/getwxgateway"
            :list="list"
            @onSelection="onSelection"
            :refresh="refresh"
            :param="param"
            :paramObj="paramObj"
            @onEjectChange="onEjectChange"
          >
            <!-- @sort-change="sortChange" 排序-->
            <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
              <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
              {{v.alias}}
            </span>
            <template v-if="quantitytypes && quantitytypes.length > 0">
              <div class="full-list" v-show="!list[0].show">
                <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
              </div>
              <batch-but
                class="sli but-blue"
                :type="range"
                :list="listArr"
                :param="quantitytypes"
                @onClick="inSavegatewayorder"
              ></batch-but>
            </template>
          </paging-table>
        </el-main>
      </el-container>
    </fel-left-tree>
    <el-dialog
      title="选择上传版本"
      width="40%"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="versionVisible"
    >
      <fel-form
        ref="felForm"
        class="single-row"
        :selects="selects"
        @submitForm="submitForm"
        @closeForm="beforeClose"
        width="140px"
        dynamic
        :defaultData="defaultData"
        :formData="formData"
      ></fel-form>
    </el-dialog>
    <!-- <el-dialog
      title="选择上传版本"
      :visible.sync="versionVisible"
      :before-close="beforeClose"
      width="500px"
      class="checkUpVersion"
    >
      <el-select class="selBox" v-model="dvid" @change="onChangeDvid">
        <el-option
          v-for="item in versionTypes"
          :key="item.dvid"
          :label="item.deviceversion"
          :value="item.dvid"
        ></el-option>
      </el-select>
      <div class="butBox">
        <el-button type="primary">确定</el-button>
        <el-button>取消</el-button>
      </div>
    </el-dialog>-->
    <wxVup :dialogVisible="dialogVisible" @beforeClose="dialogVisible=false"></wxVup>
  </el-container>
</template>

<script>
import Storages from "../../../utils/Storage.js"; //缓存工具
import wxVup from "./wxVup";
export default {
  components: { wxVup },
  props: {
    toParam: Object,
    toRoute: Object
  },
  data() {
    let $this = this;
    return {
      dialogVisible: false,
      versionVisible: false,
      nustates: [
        { gustate: "", guname: "全部" },
        { gustate: "0", guname: "正在下发" },
        { gustate: "1", guname: "下发成功" },
        { gustate: "-1", guname: "下发失败" }
      ],
      // roomtxtypes: [{ roomtxtype: "", typename: "所有运营商门锁" }],
      refreshTree: 0,
      butType: "0",
      topButs: [],
      versionTypes: [],
      selects: { versionTypes: [] },
      defaultData: {},
      formData: [
        {
          noShow: false,
          value: "dvid",
          name: "请选择上传版本",
          type: "select",
          select: "versionTypes",
          onChange: this.onChange,
          slabel: "deviceversion",
          svalue: "dvid",
          rules: [
            {
              required: true,
              message: "请选择上传版本"
            }
          ]
        }
      ],
      dvid: "",
      roomObj: {},
      range: "1",
      // ranges: [
      //   {
      //     value: "勾选范围",
      //     label: "勾选范围"
      //   },
      //   {
      //     value: "跨页全选",
      //     label: "全部列表"
      //   }
      // ],
      quantitytypes: [],
      refresh: 0,
      param: { agid: "0", gulockstate: "", gustate: "", search: "" },
      paramObj: {},
      isSelectable: true,
      list: [
        {
          type: "selection",
          width: "40px",
          selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "50px"
        },
        {
          name: "网关",
          // sortable: "custom",
          prop: "gatewaycode",
          minWidth: "65px"
        },
        {
          name: "网关唯一ID",
          minWidth: "70px",
          prop: "gatewaycode2"
        },
        {
          name: "网关位置",
          minWidth: "70px",
          prop: "gatewaylocation"
        },

        {
          name: "网关通讯状态",
          prop: "gatewayonline",
          minWidth: "70px",
          template: {
            props: ["scope"],
            methods: {
              getClass() {
                let value = this.scope.row.gatewayonline;
                if (value == "在线") {
                  return "puc-pg";
                } else if (value == "离线") {
                  return "puc-px";
                } else {
                  return "";
                }
              }
            },
            template: `<span :class='getClass()'>{{scope.row.gatewayonline}}</span>`
          }
        },

        {
          name: "网关当前版本号",
          prop: "gatewayversion",
          minWidth: "80px"
        },

        {
          name: "网关传输版本号",
          minWidth: "80px",
          prop: "deviceversion"
        },
        {
          name: "网关版本总包数",
          prop: "dvmaxno",
          minWidth: "80px"
        },

        {
          name: "网关版本传输结束时间",
          minWidth: "95px",
          prop: "guedate"
        },

        {
          name: "网关版本已完成包数",
          prop: "guindexno",
          minWidth: "95px"
        },

        {
          name: "网关版本进度",
          prop: "gurate",
          minWidth: "70px"
        },
        {
          name: "网关版本传输开始时间",
          prop: "gusdate",
          minWidth: "95px"
        },
        {
          name: "网关版本传输状态",
          prop: "gustate",
          minWidth: "80px"
        },
        {
          name: "网关版本传输状态名称",
          prop: "gustatename",
          minWidth: "95px"
        },
        {
          name: "门锁传输版本号",
          minWidth: "80px",
          prop: "deviceversion2"
        },
        {
          name: "门锁版本总包数",
          prop: "dvmaxno2",
          minWidth: "80px"
        },
        {
          name: "门锁版本传输结束时间",
          prop: "gulockedate",
          minWidth: "95px"
        },
        {
          name: "门锁版本已完成包数",
          prop: "gulockindexno",
          minWidth: "95px"
        },
        {
          name: "门锁版本进度",
          prop: "gulockrate",
          minWidth: "70px"
        },
        {
          name: "门锁版本传输开始时间",
          prop: "gulocksdate",
          minWidth: "95px"
        },
        {
          name: "门锁版本传输状态名称",
          prop: "gulockstatename",
          minWidth: "95px"
        },
        {
          name: "操作",
          minWidth: "200px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              }
            },
            methods: {
              onClick(key, row) {
                console.log("jinru");
                if (key == "1" || key == "6") {
                  $this.onVup(key, row);
                } else {
                  console.log("jinru2");
                  $this.onStartnblockup(key, row);
                }
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.type,scope.row)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      listBut: [],
      listArr: [],
      sonmenu: 0
    };
  },
  watch: {
    toRoute(val) {
      this.param.search = val.roomcode2;
      this.onRefresh();
    },
    listArr(val){
      console.log("change,",val);
    }
  },
  created() {
    this.inGetsonmenu(this.toParam.id);
    // this.getNbversion();
  },
  mounted() {
    if (this.toRoute) {
      this.param.search = this.toRoute.roomcode2;
      this.onRefresh();
    }
    this.getEject();
  },
  methods: {
    async onVup(key, row) {
      if (key == "6" || key == "706") {
        this.butType = "1";
        let getV = await this.getNbversion("1");
      } else if (key == "1" || key == "700") {
        this.butType = "0";
        let getV = await this.getNbversion("0");
      }
      this.dvid = "";
      if (row) {
        this.roomObj = row;
      }
      if (row) {
        this.roomObj._types = "1";
      } else {
        this.roomObj._types = "2";
      }
      this.versionVisible = true;
    },
    submitForm(data) {
      console.log("datta", data);
      this.dvid = data.dvid;
      if (this.butType == "0") {
        if (this.roomObj._types == "2") {
          this.onStartnblockup("1");
        } else {
          this.onStartnblockup("1", this.roomObj);
        }
      } else {
        if (this.roomObj._types == "2") {
          this.onStartnblockup("6");
        } else {
          this.onStartnblockup("6", this.roomObj);
        }
      }
      this.beforeClose();
    },
    onChangeDvid(num) {},
    onStartnblockup(type, row = null) {
      console.log("type", type, row);
      if (type == "1" && this.dvid == "") {
        this.$message.error("请先选择上传版本!");
        return;
      }
      let url = "";
      let text = "";
      switch (type) {
        case "1":
          this.getNbversion("0");
          text = "版本传输";
          url = "/system/onlineup/savewxgateversion/2/startwxgateup"; //版本传输
          break;
        case "2":
          text = "版本续传";
          url = "/system/onlineup/savewxgateversion/4/restartwxgateup"; // 版本续传
          break;
        case "3":
          text = "更新升级";
          url = "/system/onlineup/savewxgateversion/3/wxgatetoupversion"; //更新升级
          break;
        case "4":
          text = "强制升级";
          url = "/system/onlineup/savewxgateversion/5/wxgateforceversion"; //强制升级
          break;
        case "5":
          text = "撤销传输";
          url = "/system/onlineup/savewxgateversion/6/deletewxgateup"; //撤销传输
          break;
        case "6":
          this.getNbversion("1");
          text = "门锁版本传输";
          url = "/system/onlineup/savewxgateversion/7/startwxlockup"; //门锁版本传输
          break;
        case "7":
          text = "门锁版本续传";
          url = "/system/onlineup/savewxgateversion/8/restartwxlockup"; //门锁版本续传
          break;
      }
      let data = {
        actiontype: this.range == "1" ? "勾选范围" : "跨页全选",
        agid: this.param.agid,
        gustate: this.param.gustate,
        search: this.param.search
      };
      if (type == "1"||type=="6") {
        data.dvid = this.dvid;
      }
      console.log("thisddd",this.listArr);
      let obj =
        this.listArr.length > 0
          ? this.listArr.map(item => {
            console.log("item",item);
              return item.gatewaycode;
            })
          : [];
      if (row && row.gatewaycode) {
        obj = [row.gatewaycode];
      }
      this.$confirm("确定要进行" + text + "吗?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this.$ajax(url, data, "1", obj, true)
          .then(res => {
            this.$message({
              type: "success",
              message: "传输成功!"
            });
          })
          .catch(err => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      });
    },
    handleNodeClick(data) {
      //  this.paramObj = data;
      // this.param.buildid = data.buildid;
      this.param.agid = data.buildid;
      console.log("tree", data, this.param);
      this.onRefresh();
    },
    inSavegatewayorder(id, obj) {
      if (id == "700") {
        this.onVup(id);
      } else if (id == "701") {
        this.onStartnblockup("2");
      } else if (id == "702") {
        this.onStartnblockup("3");
      } else if (id == "703") {
        this.onStartnblockup("4");
      } else if (id == "705") {
        this.onStartnblockup("5");
      } else if (id == "706") {
        this.onVup(id);
        // this.onStartnblockup("6");
      } else if (id == "707") {
        this.onStartnblockup("7");
      }
      console.log("id", id, obj);
    },
    inGetsonmenu(id) {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: id }, "1")
        .then(res => {
          res.result.forEach(item => {
            let entity = item.entity;
            if (entity.id == "700") {
              this.quantitytypes.push(entity);
              this.listBut.push({ type: "1", name: "版本传输" });
            } else if (entity.id == "701") {
              this.quantitytypes.push(entity);
              this.listBut.push({ type: "2", name: "版本续传" });
            } else if (entity.id == "702") {
              this.quantitytypes.push(entity);
              this.listBut.push({ type: "3", name: "更新升级" });
            } else if (entity.id == "703") {
              this.quantitytypes.push(entity);
              this.listBut.push({ type: "4", name: "强制升级" });
            } else if (entity.id == "705") {
              this.quantitytypes.push(entity);
              this.listBut.push({ type: "5", name: "撤销传输" });
            } else if (entity.id == "706") {
              this.quantitytypes.push(entity);
              this.listBut.push({ type: "6", name: "门锁版本传输" });
            } else if (entity.id == "707") {
              this.quantitytypes.push(entity);
              this.listBut.push({ type: "7", name: "门锁版本续传" });
            } else if (entity.id == "708") {
              this.topButs.push(entity);
            }
          });
          console.log("this.listbut", res.result, this.listBut);
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    getNbversion(islock) {
      console.log("kkkkk");
      this.$ajax(
        "/system/onlineup/savewxgateversion/1/getwxgateversion",
        { islock },
        "1"
      )
        .then(res => {
          this.versionTypes = res.result;
          this.selects.versionTypes = res.result;
          console.log("res", res);
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    onClick(key, obj) {
      if (key == "708") {
        this.dialogVisible = true;
      }
      console.log("key", key, obj);
    },
    onChange(val) {
      if (val == 2) {
        // this.$refs["paging-table"].clearSelection();
        // this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        // this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    onRefresh() {
      this.isSelectable = true;
      this.range = "1";
      if (this.$refs["paging-table"]) {
        this.$refs["paging-table"].clearSelection();
      }
      this.refresh = new Date().getTime();
    },
    onReset() {
      Object.keys(this.param).forEach(key => {
        if (key == "agid") {
          this.param[key] = "0";
        } else {
          this.param[key] = "";
        }
      });
      this.onRefresh();
    },
    // sortChange(){},
    onSelection(data) {
      this.listArr = data;
      console.log("data",data)
    },
    beforeClose() {
      if (this.$refs["felForm"]) {
        console.log("jinru kkkk")
        this.$refs["felForm"].resetForm();
      }
      this.versionVisible = false;
    },
    onEjectChange() {
      //将用户隐藏表格的信息存到localStorage
      let arr = this.list.map(o => o.show);
      Storages.setlocalStorage("nbssj674.eject", arr);
      console.log("set进入", arr);
    },
    getEject() {
      //从localStorage获取用户隐藏表格的信息
      let arr = Storages.getlocalStorage("nbssj674.eject") || [];
      let lists = [];
      this.list.forEach((value, key) => {
        let obj = Object.assign({}, value);
        // obj.show = arr[key];
        obj.show = typeof arr[key] == "undefined" ? obj.show : arr[key];
        lists.push(obj);
      });
      this.list = lists;
      console.log("get进入", this.list);
    }
  }
};
</script>

<style lang="scss" scoped>
.checkUpVersion {
  padding: 10px 50px;
  .selBox {
    width: 100%;
    // margin: 10px 150px;
  }
  .butBox {
    // border-top: 1px solid #ccc;
    // margin: 10px 150px;
    height: 50px;
    button {
      float: right;
      margin-left: 10px;
    }
  }
}
</style>
