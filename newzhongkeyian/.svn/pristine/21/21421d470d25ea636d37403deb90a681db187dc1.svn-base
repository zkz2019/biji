<!-- 新增指令批量下发弹框   -->
<template>
  <el-dialog
    title="新增指令批量下发"
    width="60%"
    top="18vh"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <el-container style="height:350px">
      <fel-left-tree class="batchDialog">
        <template slot="left">
          <el-tabs
            :key="isGroup"
            v-if="getIsClassify()"
            @change
            class="top-switch"
            stretch
            v-model="isGroup"
          >
            <!-- @tab-click="onTabClick" -->
            <el-tab-pane label="按位置显示" name="1"></el-tab-pane>
            <el-tab-pane label="按分组显示" name="2"></el-tab-pane>
          </el-tabs>
          <div v-if="isGroup == '2'" class="left-tree">
            <fel-tree5
              key="group"
              class="tree1"
              interface="/arearoom/public/2/listAreaRoomTree"
              @checkchange="checkchangeGroup"
              ajaxType="9"
              nodeKey="arid"
              iconName="artype"
              :param="{areafatherid:'',artype:1}"
              paramKey="areafatherid"
              :defaultProps="{
                    children: 'children',
                    label: 'arname',
                    isLeaf: 'isLeaf'
                  }"
              :idArr="[0]"
            ></fel-tree5>
          </div>
          <div v-else class="left-tree">
            <fel-tree1
              slot="top"
              :showCheckbox="true"
              :interfaceData="interfaceData"
              class="tree1 co_tree"
              :idArr="[0]"
              :refresh="refresh"
              interface="/lock/lotorder/save/2/getbuildtree"
              @checkchange="checkchange"
            ></fel-tree1>
          </div>
        </template>
        <fel-form
          class="single-row"
          ref="felForm"
          @submitForm="submitForm"
          @closeForm="beforeClose"
          :selects="selects"
          width="140px"
          style="margin-top:60px"
          dynamic
          :button="[]"
          :defaultData="defaultData"
          :formData="formData"
        ></fel-form>
      </fel-left-tree>
    </el-container>
    <div slot="footer" class="dialog-button">
      <el-button class="com-but-small mar0-10" @click="beforeClose">取消</el-button>
      <el-button class="com-but-small mar0-10" type="primary" @click="dialogSubmitForm">开始下发</el-button>
    </div>
  </el-dialog>
</template>

<script>
import { mapGetters } from "vuex";
export default {
  props: {
    dialogVisible: Boolean,

    // param: Object,
    options: Array,
  },
  data() {
    const $this = this;
    return {
      isGroup: "1",
      defaultData: {},
      selects: {
        lotordertype: [],
      },
      refresh: 0,
      build: [],
      areas: [],
      isPublic: false,
      types: {},
      // pgidObj: {},
      formData: [
        {
          noShow: false,
          value: "lotordertype",
          name: "请选择指令类型",
          type: "select",
          select: "lotordertype",
          slabel: "text",
          svalue: "id",
          onChange: this.onChange,
          disabled: false,
          rules: [
            {
              required: true,
              message: "请先选择指令类型",
              trigger: "blur",
            },
          ],
        },
        {
          noShow: true,
          value: "locktype", //批量强锁显示
          name: "请选择指令详情",
          type: "select",
          select: [
            { label: "强制锁门", id: "1" },
            { label: "解除强锁", id: "2" },
          ],
          slabel: "label",
          svalue: "id",
          disabled: false,
          rules: [
            {
              required: true,
              message: "请先选择指令类型",
              trigger: "blur",
            },
          ],
        },
        {
          noShow: true,
          value: "worktype", // 批量工作模式设置
          name: "请选择指令详情",
          type: "select",
          select: [
            { label: "常闭模式", id: "2" },
            { label: "常开模式", id: "1" },
          ],
          slabel: "label",
          svalue: "id",
          disabled: false,
          rules: [
            {
              required: true,
              message: "请先选择指令类型",
              trigger: "blur",
            },
          ],
        },
        {
          noShow: true,
          value: "offlinetype", // 批量离线模式设置
          name: "请选择指令详情",
          type: "select",
          select: [
            { label: "开启离线授权", id: "1" },
            { label: "关闭离线授权", id: "2" },
          ],
          slabel: "label",
          svalue: "id",
          disabled: false,
          rules: [
            {
              required: true,
              message: "请先选择指令类型",
              trigger: "blur",
            },
          ],
        },
        {
          noShow: true,
          value: "powerlv", // 批量功率调整
          name: "请选择指令详情",
          type: "select",
          select: [
            { label: "a0级", id: "1" },
            { label: "a1级", id: "2" },
            { label: "a2级", id: "3" },
            { label: "a3级", id: "4" },
          ],
          slabel: "label",
          svalue: "id",
          disabled: false,
          rules: [
            {
              required: true,
              message: "请先选择指令类型",
              trigger: "blur",
            },
          ],
        },
        {
          noShow: true,
          name: "自动开门时间",
          value: "timeSlot",
          type: "time",
          format: "HH:mm",
          date: "ftime",
        },
        {
          noShow: true,
          value: "roomopencontrol",
          name: "控制模式",
          type: "select",
          select: "roomopencontroltype",
          svalue: "id",
          slabel: "name",
        },
        {
          noShow: true,
          value: "roomopenweek",
          name: "周工作日配置",
          type: "template",
          template: {
            props: ["value"],
            model: {
              prop: "value",
              event: "input",
            },
            methods: {
              change(data) {
                if (this.type == 2) {
                  let k = data[data.length - 1];
                  let daarr = this.options[0].options.map((o) => o.value);
                  if (daarr.includes(k)) {
                    data = [k];
                  } else {
                    data = data.filter((obj) => {
                      return !daarr.includes(obj);
                    });
                  }
                  this.$emit("input", data);
                } else {
                  this.$emit("input", data);
                }
              },
            },
            computed: {
              options() {
                return $this.selects["roomopendaytypeOption"];
              },
              type() {
                return $this.selects["roomopendaytypeType"];
              },
            },
            template: `<el-select :value="value" @change="change" :multiple="type != 0" placeholder="请选择">
              <template v-if="type == 2">
              <el-option-group
                v-for="group in options"
                :key="group.label"
                :label="group.label">
                <el-option
                  v-for="item in group.options"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-option-group>
              </template>
              <template v-else>
              <el-option
                v-for="item in options"
                :key="item.value"
                :label="item.label"
                :value="item.value">
              </el-option>
              </template>
            </el-select>`,
          },
        },
      ],
      button: [
        {
          type: "2",
          name: "确认",
        },
        {
          type: "1",
          name: "取消",
        },
      ],
    };
  },
  watch: {
    options(val) {
      this.selects.lotordertype = val;
    },
    dialogVisible(val) {
      if (val) {
        this.refresh = new Date().getTime();
      } else {
        this.formData[5].noShow = true;
        this.formData[6].noShow = true;
        this.formData[7].noShow = true;
        this.defaultData = {};
      }
    },
  },
  created() {
    this.getLists();
  },
  methods: {
    ...mapGetters(["getIsClassify"]),
    interfaceData(aa) {
      let obj = [];
      aa.forEach((item, ind) => {
        if (this.isPublic) {
          item.disabled = item.publiccount > 0 ? false : true;
        } else {
          item.disabled = item.isnext2 > 0 ? false : true;
        }
      });
    },
    onChange(val, data) {
      this.formData.slice(1, 8).forEach((item, ind) => {
        let is = this.isPublic;
        this.isPublic = false;
        if (val == "20") {
          this.isPublic = true;
          this.$set(this.defaultData, "timeSlot", ["08:00", "16:00"]);
          this.$set(this.defaultData, "lotordertype", "20");
        }
        if (is != this.isPublic) {
          this.refresh = new Date().getTime();
        }
        if (val == "3" && ind == 0) {
          item.noShow = false;
        } else if (val == "5" && ind == 1) {
          item.noShow = false;
        } else if (val == "7" && ind == 2) {
          item.noShow = false;
        } else if (val == "8" && ind == 3) {
          item.noShow = false;
        } else if (val == "20" && (ind == 5 || ind == 6 || ind == 4)) {
          item.noShow = false;
        } else {
          item.noShow = true;
        }
      });
    },
    getLists() {
      this.$ajax("/lock/lotorder/save/g/getlockopenconfig", {}, "1").then(
        (res) => {
          let result = res.result;
          let type = 0;
          let roomopendaytypeOption = [];
          if (result.roomopendaytype) {
            let daarr = [];
            let doarr = [];
            result.roomopendaytype.forEach((obj) => {
              if (obj.isdx == 1) {
                daarr.push({
                  label: obj.name,
                  type: true,
                  value: obj.id,
                });
              } else {
                doarr.push({
                  type: false,
                  label: obj.name,
                  value: obj.id,
                });
              }
            });
            if (daarr.length > 0 && doarr.length > 0) {
              type = 2;
              roomopendaytypeOption = [
                {
                  label: "单选",
                  options: daarr,
                },
                {
                  label: "多选",
                  options: doarr,
                },
              ];
            } else if (daarr.length == 0 && doarr.length > 0) {
              type = 1;
              roomopendaytypeOption = doarr;
            } else {
              roomopendaytypeOption = daarr;
            }
          }
          this.selects["roomopendaytypeOption"] = roomopendaytypeOption;
          this.selects["roomopendaytypeType"] = type;
          this.selects["roomopencontroltype"] = res.result.roomopencontroltype;
          console.log("res.result", res.result);
        }
      );
    },
    dialogSubmitForm() {
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].submitForm();
      }
    },
    // handleNodeClick(data) {
    // },
    checkchange(data, obj) {
      this.build = obj.checkedNodes;
    },
    checkchangeGroup(data, obj) {
      this.areas = obj.checkedNodes.map((item) => {
        return {
          arid: item.arid,
          artype: item.artype,
        };
      });
      // this.areas = { arid: data.arid, artype: data.artype };
      console.log("data", this.areas, obj, data);
    },
    submitForm(data) {
      let url = "";
      let msg = "";
      if (this.isGroup == "1") {
        this.areas = [];
      } else {
        this.build = [];
      }
      if (this.build.length > 0 || this.areas.length > 0) {
        if (data.lotordertype == "1") {
          url = "/lock/lotorder/save/3/savelotcardsync"; //批量卡密
          msg = "批量卡密授权同步";
        } else if (data.lotordertype == "2") {
          url = "/lock/lotorder/save/4/savelotfingersync"; //批量指纹
          msg = "批量指纹授权同步";
        } else if (data.lotordertype == "3") {
          url = "/lock/lotorder/save/5/savelotlock"; //批量强锁
          this.types = { locktype: data.locktype };
          if (this.types == "1") {
            msg = "批量强锁设置";
          } else {
            msg = "批量解除强锁";
          }
        } else if (data.lotordertype == "5") {
          url = "/lock/lotorder/save/6/savelotwork"; //批量工作模式变更
          msg = "批量工作模式变更";
          this.types = { worktype: data.worktype };
        } else if (data.lotordertype == "9") {
          url = "/lock/lotorder/save/9/savelotstatus"; //批量状态查询
          msg = "批量状态查询";
        } else if (data.lotordertype == "11") {
          url = "/lock/lotorder/save/b/savelotremoteopen"; //批量远程开门
          msg = "批量远程开门";
        } else if (data.lotordertype == "12") {
          url = "/lock/lotorder/save/e/savelotremoteclose"; //批量远程开门
          msg = "批量远程关门";
        } else if (data.lotordertype == "20") {
          url = "/lock/lotorder/save/f/savelotlockopenconfig"; //批量开放时间控制
          console.log('data.timeSlot.join("~")', data.timeSlot);
          console.log('data.timeSlot.join("~")', data);
          this.types = {
            roomopentime:
              data.timeSlot[0] && data.timeSlot[1]
                ? data.timeSlot.join("~")
                : "",
            roomopencontrol: data.roomopencontrol,
            roomopenweek:
              data.roomopenweek.length > 0 ? data.roomopenweek.join(",") : "",
          };
          msg = "批量开放时间控制";
        }
        this.$ajax(
          url,
          this.types,
          "1",
          { builds: this.build, areas: this.areas, type: this.isGroup },
          true,
          60000
        )
          .then((res) => {
            // this.getlotorder();
            this.$message({
              message: msg + "操作成功!",
              type: "success",
            });
            this.$emit("onRefresh");
            this.beforeClose();
          })
          .catch((err) => {
            console.log(err);
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error",
            });
          });

        // this.types={};
      } else {
        this.$message({
          showClose: true,
          message: "请先选择区域",
          type: "warning",
        });
      }
      // if (data) {
      // } else {
      //   this.$message({
      //     showClose: true,
      //     message: "请先选中左侧区域",
      //     type: "warning"
      //   });
      // }
    },

    beforeClose() {
      // this.fatheragid = {};
      // if (this.$refs["felForm"]) {
      //   this.$refs["felForm"].resetForm();
      // }
      this.build = [];
      this.areas = [];
      this.$emit("beforeClose");
    },
  },
};
</script>
