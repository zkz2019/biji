<!-- 版本管理 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>{{title}}</com-title>
      <retrieval class="query_head">
        <inpbox inptext="请选择设备类型">
          <el-select class="qh_inp" v-model="param.type" filterable placeholder="请选择">
            <el-option v-for="item in options" :key="item.id" :label="item.name" :value="item.id"></el-option>
          </el-select>
        </inpbox>
        <inpbox :inptext="''">
          <fel-button class="qh_btn" type="primary" @click="search">查询</fel-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="padt0 query_main">
      <paging-table
        class="tobleList wh100"
        height="100%"
        interface="/system/onlineup/version/1/getversions"
        :list="list"
        :refresh="refresh"
        :param="param"
        @onEjectChange="onEjectChange"
      >
        <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>
      </paging-table>
    </el-main>
    <add
      :types="addType"
      :dvid="dvid"
      :dialogVisible="dialogVisible"
      @beforeClose="dialogVisible=false"
      :options="addOptions"
    ></add>
  </el-container>
</template>

<script>
import add from "./add";
import Storages from "./../../../utils/Storage.js"; //缓存工具
import { mapGetters } from "vuex";
import { format, download } from "@/utils/utils.js";
export default {
  props: {},
  components: { add },
  data() {
    let $this = this;
    return {
      refresh: 0,
      dialogVisible: false,
      title: "",
      dvid: "",
      addType: "",
      options: [{ id: "", name: "全部" }],
      addOptions: [],
      // value: "0",
      param: { type: "" },
      topButs: [],
      listBut: [],
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "操作时间",
          prop: "dvcdate"
        },
        {
          name: "操作账号",
          prop: "userlogin"
        },
        {
          name: "设备类型",
          prop: "type"
        },
        {
          name: "项目号",
          prop: "dvprojectnum"
        },
        {
          name: "版本号",
          prop: "deviceversion"
        },
        {
          name: "生成时间",
          prop: "dvcheckdate"
        },
        {
          name: "更新内容",
          prop: "dvbei"
        },
        {
          name: "操作",
          width: "150px",
          template: {
            props: ["scope"],
            computed: {
              listBut() {
                return $this.listBut;
              }
            },
            methods: {
              onClick(key, row) {
                $this.onClick(key, row);
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,i) of listBut" :key="i" type="text" size="small" @click.stop="onClick(v.type,scope.row)">{{v.name}}</el-button>
            </div>`
          }
        }
      ]
    };
  },
  watch: {},
  created() {
    this.getOptions();
    this.inGetsonmenu();
  },
  mounted() {
    this.getEject();
  },
  methods: {
    ...mapGetters(["getNumber"]),
    onClick(key, data) {
      console.log("key,data", key, data);
      if (key == "675") {
        this.dvid = "";
        this.addType = "1";
        this.dialogVisible = true;
      } else if (key == "z1") {
        this.dvid = data.dvid;
        this.addType = "3";
        this.dialogVisible = true;
      } else if (key == "z2") {
        this.dvid = data.dvid;
        this.addType = "2";
        this.dialogVisible = true;
      }else if(key=="745"){
        this.addType = "4";
        this.dialogVisible = true;
      }
      console.log("addType", this.addType);
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: "673" }, "1")
        .then(res => {
          res.result.forEach(item => {
            const entity = item.entity;
            if (entity.id == "675") {
              this.topButs.push(item.entity);
            } else if (entity.id == "681") {
              this.listBut.push({
                type: "z1",
                name: entity.alias
              });
            } else if (entity.id == "682") {
              this.listBut.push({
                type: "z2",
                name: entity.alias
              });
            } else if (entity.id == "745") {
              this.topButs.push(item.entity);
            }
          });
          console.log("res", res.result, this.topButs);
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    getOptions() {
      //获取下拉框选项
      this.$ajax("/system/onlineup/version/2/getdevicetype", {}, "1").then(
        res => {
          this.options = [...this.options, ...res.result];
          this.addOptions = res.result;
        }
      );
    },
    //重置事件
    onReset() {
      // this.value = "0";
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.search();
    },
    search() {
      this.refresh = new Date().getTime();
    },
    onEjectChange() {
      //将用户隐藏表格的信息存到localStorage
      let arr = this.list.map(o => o.show);
      Storages.setlocalStorage("bbgl673.eject", arr);
    },
    getEject() {
      //从localStorage获取用户隐藏表格的信息
      let arr = Storages.getlocalStorage("bbgl673.eject") || [];
      let lists = [];
      this.list.forEach((value, key) => {
        let obj = Object.assign({}, value);
        obj.show = arr[key];
        lists.push(obj);
      });
      this.list = lists;
    }
  }
};
</script>