<template></template>

<script>
import { loadScript } from "@/utils/utils.js";
import setting from "@/setting.js";
export default {
  props: {
    close: Boolean,
    type: {
      type: String | Number,
      default: 0
    }
  },
  data() {
    return {
      adyjk: true,
      rfidreader: null
    };
  },
  created() {
    this.jzjs(() => {
      alert("创建友我科技RFID云服务连接失败，请先下载安装！");
      window.location =
        "http://www.youwokeji.com.cn/CloudReader/YOWORFIDReaderCloudForWeb.exe";
      window.setTimeout(() => {
        this.judgeLoad();
      }, 10000);
    });
  },
  watch: {
    close() {
      if (this.close) {
        this.adyjk = true;
        this.jzjs(() => {
          if (this.adyjk) {
            this.$message({
              showClose: true,
              message: "创建友我科技RFID云服务连接失败，请先安装！",
              type: "error"
            });
            window.setTimeout(() => {
              this.judgeLoad();
            }, 5000);
          }
        });
      } else {
        this.adyjk = false;
        this.disconnect();
      }
    }
  },
  beforeDestroy() {
    this.adyjk = false;
    this.disconnect();
  },
  methods: {
    jzjs(callback) {
      if (typeof YOWORFIDReader == "undefined") {
        loadScript(
          "http://127.0.0.1:8008/YOWOCloudRFIDReader.js",
          () => {
            this.loadExe();
          },
          () => {
            if (callback) {
              callback();
            }
          }
        );
      } else {
        this.init();
      }
    },
    judgeLoad() {
      this.jzjs(() => {
        if (this.adyjk) {
          window.setTimeout(() => {
            this.judgeLoad();
          }, 5000);
        }
      });
    },
    callback() {},
    disconnect() {
      if (this.rfidreader) {
        this.rfidreader.Disconnect();
        this.rfidreader = null;
      }
    },
    init() {
      if (this.rfidreader) {
        this.disconnect();
      }
      this.rfidreader = YOWORFIDReader.createNew();
      if (!this.rfidreader.TryConnect()) {
        this.$message({
          showClose: true,
          message: "浏览器不支持友我科技RFID云服务，请更换浏览器后重试！",
          type: "error"
        });
      }
      this.rfidreader.onResult(resultdata => {
        let arr = [0, 5, 6];
        if (arr.includes(resultdata.FunctionID)) {
          this.callback(resultdata);
          this.$emit("resultdata", resultdata);
        }
      });

      if (this.type == 0) {
        this.cardNumber();
      }
    },
    loadExe() {
      try {
        this.init();
      } catch (e) {
        this.$message({
          showClose: true,
          message: "创建友我科技RFID云服务连接失败，请先安装！",
          type: "error"
        });
        window.setTimeout(() => {
          this.judgeLoad();
        }, 10000);
      }
    },

    cardNumber() {
      if (!this.rfidreader) {
        this.init();
      }
      this.rfidreader.Repeat = 1;
      this.rfidreader.HaltAfterSuccess = 1;
      this.rfidreader.RequestTypeACardNo(0, 0);
    },
    getErrStr(ErrCode) {
      var ErrText = "";
      switch (ErrCode) {
        case -1:
          ErrText = "没有找到IC卡读卡器，支持型号：YW-605HA或者YW-607";
          break;
        case -3:
          ErrText = "寻卡失败或卡已经休眠,请拿离开读卡器，再放上";
          break;
        case -4:
          ErrText = "寻卡失败";
          break;
        case -5:
          ErrText = "卡休眠失败";
          break;
        case -6:
          ErrText = "密钥认证失败";
          break;
        case -7:
          ErrText = "读块失败";
          break;
        case -8:
          ErrText = "写块失败";
          break;
        case -9:
          ErrText = "钱包初始化失败";
          break;
        case -10:
          ErrText = "钱包读余额失败";
          break;
        case -11:
          ErrText = "钱包充值失败";
          break;
        case -12:
          ErrText = "钱包减值失败";
          break;
        case -13:
          ErrText = "复位错误";
          break;
        case -14:
          ErrText = "COS执行错误";
          break;
        case -101:
          ErrText = "参数错误";
          break;
        case -102:
          ErrText = "DES校验错误";
          break;
        case -103:
          ErrText = "读卡器不支持";
          break;
        case -600:
          ErrText = "没找到YW-602系列UHF读卡器";
          break;
        case -601:
          ErrText = "寻G2标签失败";
          break;
        case -602:
          ErrText = "读G2标签失败";
          break;
        case -603:
          ErrText = "写G2标签失败";
          break;
        case -604:
          ErrText = "执行失败";
          break;
      }
      return ErrText;
    },
    // 修改卡密码
    writeBlock(callback) {
      this.rfidreader.KeyMode = 0;
      this.rfidreader.KeyStringMode = 0;
      this.rfidreader.KeyString = setting.defaultDesKey;
      this.rfidreader.Repeat = 0;
      this.rfidreader.BeepOnSuccess = 0;
      let key = 0;
      setting.fans.forEach(index => {
        this.rfidreader.M1WriteBlock(
          index * 4 + 3,
          setting.desKey + "FF078069FFFFFFFFFFFF",
          0
        );
      });
      this.callback = function(data) {
        if (data.FunctionID == 6) {
          key++;
          if (key == setting.fans.length) {
            if (callback) {
              callback();
            }
          }
        }
      };
    },
    cardWrite4(order, callback, error) {
      this.rfidreader.DesDir = 0;
      this.rfidreader.Repeat = 0;
      this.rfidreader.BeepOnSuccess = 0;
      this.rfidreader.HaltAfterSuccess = 0;
      this.rfidreader.KeyMode = 0;
      this.rfidreader.KeyStringMode = 0;
      this.rfidreader.KeyString = setting.defaultDesKey;
      this.rfidreader.M1WriteBlock(4, order, 0);
      this.callback = function(data) {
        if (data.Result > 0 && data.FunctionID == 6) {
          if (callback) {
            callback();
          }
        } else {
          if (error) {
            error(this.getErrStr(data.Result));
          }
        }
      };
    },
    WriteSector(arr, jkhd, error) {
      let num = arr.length;
      if (num > 0) {
        let key = 0;
        this.rfidreader.KeyMode = 0;
        this.rfidreader.KeyStringMode = 0;
        this.rfidreader.KeyString = setting.desKey;
        this.rfidreader.DesDir = 0;
        this.rfidreader.Repeat = 0;
        this.rfidreader.BeepOnSuccess = 0;
        this.rfidreader.HaltAfterSuccess = 0;
        let fun = () => {
          if (key + 1 == num) {
            // this.rfidreader.HaltAfterSuccess = 1;
            this.rfidreader.BeepOnSuccess = 1;
          }
          this.rfidreader.M1WriteBlock(setting.sectors[key], arr[key], 0);
        };
        this.callback = function(data) {
          if (data.Result > 0 && data.FunctionID == 6) {
            key++;
            if (key == num) {
              if (jkhd) {
                jkhd();
              }
            } else {
              fun();
            }
          } else {
            if (error) {
              error(this.getErrStr(data.Result));
            }
          }
        };
        fun();
      }
    },
    //写卡
    cardWrite(order, arr, jkhd, error) {
      if (!this.rfidreader) {
        this.init();
      }
      this.writeBlock(() => {
        this.cardWrite4(
          order,
          () => {
            this.WriteSector(arr, jkhd, error);
          },
          error
        );
      });
    },

    cardReading4(callback, error) {
      this.rfidreader.DesDir = 0;
      this.rfidreader.Repeat = 0;
      this.rfidreader.BeepOnSuccess = 0;
      this.rfidreader.HaltAfterSuccess = 0;
      this.rfidreader.KeyMode = 0;
      this.rfidreader.KeyStringMode = 0;
      this.rfidreader.KeyString = setting.defaultDesKey;
      this.rfidreader.M1ReadBlock(4, 0);
      this.callback = function(data) {
        if (data.Result > 0 && data.FunctionID == 5) {
          let order = data.strData;
          let num = Number(order.substring(4, 6));
          if (num > 0) {
            if (callback) {
              callback(order, num);
            }
          } else {
            if (error) {
              error("卡中没有数据");
            }
          }
        } else {
          if (error) {
            error(this.getErrStr(data.Result));
          }
        }
      };
    },
    readSector(order, num, hdjk, error) {
      this.rfidreader.KeyMode = 0;
      this.rfidreader.KeyStringMode = 0;
      this.rfidreader.KeyString = setting.desKey;
      this.rfidreader.DesDir = 0;
      this.rfidreader.Repeat = 0;
      this.rfidreader.BeepOnSuccess = 0;
      this.rfidreader.HaltAfterSuccess = 0;
      let key = 0;
      let authorders = [];
      let fun = () => {
        if (key + 1 == num) {
          // this.rfidreader.HaltAfterSuccess = 1;
          this.rfidreader.BeepOnSuccess = 1;
        }
        this.rfidreader.M1ReadBlock(setting.sectors[key], 0);
      };
      this.callback = function(data) {
        if (data.Result > 0 && data.FunctionID == 5) {
          authorders.push(data.strData);
          key++;
          if (key == num) {
            if (hdjk) {
              hdjk(order, authorders);
            }
          } else {
            fun();
          }
        } else {
          if (error) {
            error(this.getErrStr(data.Result));
          }
        }
      };
      fun();
    },
    //读卡
    cardReading(hdjk, error) {
      if (!this.rfidreader) {
        this.init();
      }
      this.cardReading4((order, num) => {
        this.readSector(order, num, hdjk, error);
      }, error);
    }
  }
};
</script>
