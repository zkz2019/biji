<template>
  <el-dialog
    title="自动升级门禁"
    width="70%"
    class="importHistory"
    append-to-body
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <el-container class="dialog-table6 wh100">
      <el-header class="query_headbox">
        <retrieval class="query_head">
          <inpbox inptext="请输入">
            <el-input
              clearable
              class="qh_w270 qh_inp maR24"
              v-model="param.search"
              placeholder="输入门禁唯一ID/名称进行检索"
            ></el-input>
          </inpbox>
          <inpbox>
            <fel-button class="qh_btn" type="primary" @click="onRefresh">查询</fel-button>
            <fel-button class="qh_btn" @click="onReset">重置</fel-button>
          </inpbox>
        </retrieval>
      </el-header>
      <paging-table
        interface="/system/onlineup/accessmain/amversionup/4/listAutoVersionUpAccessMain"
        :list="listInfo"
        :param="param"
        :refresh="refresh"
        ajaxType="9"
      ></paging-table>
    </el-container>
    <mjProcessDetails
      :dialogVisible="procsssVisible"
      :auid="auid"
      @beforeClose="procsssVisible=false"
    ></mjProcessDetails>
  </el-dialog>
</template>

<script>
import mjProcessDetails from "./mjProcessDetails.vue";
export default {
  props: {
    dialogVisible: Boolean,
    duid: String | Number
  },
  components: { mjProcessDetails },
  data() {
    let $this = this;
    return {
      procsssVisible: false,
      param: { duid: "", search: "" },
      auid: "",
      refresh: 0,
      listInfo: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "开始时间",
          width: "160px",
          prop: "ausdate"
        },
        {
          name: "结束时间",
          width: "160px",
          prop: "auedate"
        },
        {
          name: "进度",
          width: "110px",
          prop: "austatename"
        },
        {
          name: "门禁位置",
          minWidth: "170px",
          prop: "amlocation"
        },
        {
          name: "门禁名称",
          width: "80px",
          prop: "amname"
        },
        {
          name: "版本号",
          prop: "deviceversion"
        },
        // {
        //   name: "状态",
        //   template: {
        //     props: ["scope"],
        //     computed: {
        //       name() {
        //         if (this.scope.row.austate == 0) {
        //           return "正在升级";
        //         } else if (this.scope.row.austate <= -1) {
        //           return "失败";
        //         } else {
        //           return "成功";
        //         }
        //       }
        //     },
        //     methods: {
        //       getClass() {
        //         let value = this.scope.row.austate;
        //         if (value >= 1) {
        //           return "puc-pg";
        //         } else if (value <= -1) {
        //           return "puc-px";
        //         } else {
        //           return "";
        //         }
        //       }
        //     },
        //     template: `<span :class='getClass()'>{{name}}</span>`
        //   }
        // },
        {
          name: "失败原因",
          prop: "auremark"
        },
        {
          name: "操作",
          width: "100px",
          template: {
            props: ["scope"],
            methods: {
              onClick(key) {
                $this.onClick(this.scope.row);
              }
            },
            template: `<div class="operat-buts"> 
             <el-button type="text" size="small" @click.stop="onClick">详情</el-button>
            </div>`
          }
        }
      ]
    };
  },
  computed: {},
  watch: {
    dialogVisible(val) {
      if (val) {
        this.param.duid = this.duid;
      } else {
        this.param.duid = "";
      }
      this.onReset();
    }
  },
  methods: {
    onClick(obj) {
      this.auid = obj.auid;
      this.procsssVisible = true;
    },
    beforeClose() {
      this.$emit("beforeClose");
    },
    onReset() {
      this.param.search = "";
      this.onRefresh();
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    }
  }
};
</script>