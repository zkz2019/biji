<template>
  <el-dialog
    :title="title"
    width="50%"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <fel-form
      ref="felForm"
      class="single-row"
      :selects="selects"
      @submitForm="submitForm"
      @closeForm="beforeClose"
      width="140px"
      dynamic
      :defaultData="defaultData"
      :formData="formData"
    ></fel-form>
    <roomtype
      @onRefresh="onRefresh"
      :dialogVisible="dialogRoomtype"
      @beforeClose="dialogRoomtype=false"
    ></roomtype>
  </el-dialog>
</template>

<script>
import roomtype from "./roomType";
export default {
  components: {
    roomtype
  },
  props: {
    dialogVisible: Boolean,
    param: Object
  },
  data() {
    let $this = this;
    return {
      dialogRoomtype: false,
      defaultData: {
        roomtype: {}
      },
      typeResult: {},
      title: "",
      pgidObj: {},
      selects: {
        sequencebuildid: [],
        buildtype: [],
        roomtype: [],
        areatype: [],
        roomnexttype: []
      },
      formData: [
        {
          noShow: true,
          value: "sjname",
          name: "上级建筑名称",
          type: "text",
          disabled: true
        },
        {
          noShow: false,
          value: "buildtype",
          name: "建筑类型",
          type: "select",
          select: "buildtype",
          onChange: this.onChange,
          slabel: "name",
          svalue: "id",
          rules: [
            {
              required: true,
              validator: (rule, value, callback) => {
                let name = $this.formData[1].name;
                if (!value && value !== 0) {
                  callback(new Error("请选择" + name));
                } else {
                  callback();
                }
              },
              trigger: "change"
            }
          ]
        },
        {
          value: "agcode",
          name: "添加建筑编号",
          type: "text",
          disabled: true,
          maxlength: 4,
          rules: [
            {
              required: true,
              message: "请输入建筑编号",
              trigger: "blur"
            },
            {
              validator: (rule, value, callback) => {
                if (!/^[A-Fa-f0-9]+$/.test(value)) {
                  callback(new Error("建筑编号格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          value: "agname",
          name: "添加建筑名称",
          type: "text",
          rules: [
            {
              required: true,
              message: "请输入建筑名称",
              trigger: "blur"
            }
          ]
        },
        {
          value: "areatype",
          name: "房间属性",
          type: "select",
          select: "areatype",
          onChange: this.onChangeAgtype,
          slabel: "name",
          svalue: "id",
          rules: [
            {
              required: true,
              message: "请选择房间属性",
              trigger: "change"
            }
          ]
        },
        {
          noShow: true,
          value: "roomtype",
          name: "房型",
          type: "select",
          select: "roomtype",
          onChange: this.onChangetype,
          slabel: "housename",
          vkey: "houseid",
          svalue: "",
          rules: [
            {
              required: true,
              message: "请选择房型",
              trigger: "change"
            }
          ],
          buts: [
            {
              class: "but-connect",
              title: "编辑房型",
              icon: "el-icon-edit",
              onClick: this.personClick
            }
          ]
        },
        {
          noShow: true,
          value: "houseprice",
          name: "房价",
          type: "text",
          disabled: true
        },
        {
          noShow: true,
          value: "roommaxperson",
          name: "最大入住人数",
          type: "text"
        },
        {
          noShow: true,
          value: "roomnexttype",
          name: "类别",
          type: "select",
          select: "roomnexttype",
          slabel: "name",
          svalue: "id",
          rules: [
            {
              required: true,
              message: "请选择类别",
              trigger: "change"
            }
          ]
        },
        {
          value: "sequencebuildid",
          name: "位置",
          type: "select",
          select: "sequencebuildid",
          slabel: "name",
          placeholder: "默认添加最后位置",
          svalue: "id"
        }
      ]
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.inSelectType();
        this.handle();
      }
    }
  },
  created() {
    // this.inSelectType();
  },
  methods: {
    onRefresh() {
      this.inSelectType();
    },
    personClick() {
      this.dialogRoomtype = true;
    },
    onChangetype(arr, data) {
      let obj = arr[0] || {};
      data.houseid = obj.houseid;
      data.houseprice = obj.houseprice;
      data.roommaxperson = obj.maxperson;
    },
    handle() {
      let obj = {
        roomtype: {}
      };
      this.inGetareacode("2");
      if (this.typeResult.arealist) {
        this.selects.buildtype = this.typeResult.arealist;
        this.selects.areatype = this.typeResult.atlist;
      }
      this.formData[0].noShow = false;
      this.formData[1].noShow = false;
      this.formData[1].name = "建筑类型";
      this.formData[2].noShow = false;
      this.formData[3].noShow = false;
      this.formData[4].noShow = false;
      this.formData[5].noShow = true;
      this.formData[6].noShow = true;
      this.formData[7].noShow = true;
      this.formData[8].noShow = true;
      let sjname = this.param.buildlocation + "--" + this.param.buildname;
      if (this.param.buildtype == 1) {
        obj.buildtype = 2;
        this.title = "添加区域建筑";
      } else if (this.param.buildtype == 2) {
        this.title = "添加下级建筑";
        this.formData[1].noShow = true;
      } else if (this.param.buildtype == 3) {
        this.title = "添加房间";
        obj.buildtype = 4;
        this.formData[1].name = "房间类型";
        this.selects.buildtype = this.typeResult.roomlist;
        this.selects.areatype = this.typeResult.rtlist;
      } else if (this.param.buildtype == 0) {
        this.title = "添加顶级建筑";
        this.formData[0].noShow = true;
        this.formData[1].noShow = true;
      }
      obj.sjname = sjname;
      // obj.areatype = 1;
      this.defaultData = obj;
      if (this.defaultData.buildtype == 4) {
        if (this.defaultData.areatype == 1) {
          this.formData[7].noShow = false;
        } else if (this.defaultData.areatype == 2) {
          this.formData[8].noShow = false;
        }
      }
      // if (this.$refs["felForm"]) {
      //   this.$refs["felForm"].ruleForm.sjname = sjname;
      // }
    },
    onChangeAgtype(arr, data) {
      this.formData[8].noShow = true;
      if (data.buildtype == "4") {
        if (arr[0] == 1) {
          this.formData[5].noShow = true;
          this.formData[6].noShow = true;
          this.formData[7].noShow = false;
        } else if (arr[0] == 4) {
          this.formData[5].noShow = false;
          this.formData[6].noShow = false;
          this.formData[7].noShow = false;
        } else if (arr[0] == 2) {
          this.formData[5].noShow = true;
          this.formData[6].noShow = true;
          this.formData[7].noShow = true;
          this.formData[8].noShow = false;
        } else {
          this.formData[5].noShow = true;
          this.formData[6].noShow = true;
          this.formData[7].noShow = true;
        }
      }
    },
    inSelectType() {
      this.$ajax(
        "/system/build/save/9/getbuildsbyfather",
        {
          buildid: this.param.buildid
        },
        "1"
      )
        .then(res => {
          this.selects.sequencebuildid = res.result || [];
        })
        .catch(err => {});
      let url = "/system/build/save/4/getagtype";
      this.$ajax(url, {}, "1")
        .then(res => {
          this.typeResult = res.result;
          this.selects.buildtype = this.typeResult.arealist;
          this.selects.areatype = this.typeResult.atlist;
          this.selects.roomtype = this.typeResult.houselist;
          this.selects.roomnexttype = this.typeResult.publictypelist;
          if (this.param && this.param.buildtype == 3) {
            this.selects.buildtype = this.typeResult.roomlist;
            this.selects.areatype = this.typeResult.rtlist;
          }
          if (this.$refs["felForm"]) {
            let obj = this.$refs["felForm"].ruleForm;
            if (obj && obj.areatype == 4) {
              if (obj.roomtype && obj.roomtype.houseid) {
                let arr = this.selects.roomtype.filter(val => {
                  return obj.roomtype.houseid == val.houseid;
                });
                if (arr && arr.length > 0) {
                  obj.roomtype = arr[0];
                  obj.houseid = arr[0].houseid;
                  obj.houseprice = arr[0].houseprice;
                  obj.roommaxperson = arr[0].maxperson;
                } else {
                  obj.roomtype = "";
                  obj.houseid = "";
                  obj.houseprice = "";
                  obj.roommaxperson = "";
                }
              }
            }
          }
        })
        .catch(err => {});
    },

    inGetareacode(buildtype) {
      let url = "/system/build/save/1/getareacode";
      this.$ajax(
        url,
        {
          buildtype
        },
        "1",
        this.param
      )
        .then(res => {
          let result = res.result;
          if (this.$refs["felForm"]) {
            this.$refs["felForm"].ruleForm.agcode = result.agcode;
            this.$refs["felForm"].ruleForm.agname = result.agname;
            this.$refs["felForm"].ruleForm.roomnexttype =
              result.selectrooomnexttype;
            let areatype = Number(result.selectareatype);
            this.$refs["felForm"].ruleForm.areatype = areatype;
            this.onChangeAgtype([areatype], this.$refs["felForm"].ruleForm);
          }
          // this.selects.buildtype = result.buildtypes;
          // this.selects.areatype = result.areatypes;
        })
        .catch(err => {});
    },
    onChange(arr, data) {
      this.formData[7].noShow = true;
      this.formData[8].noShow = true;
      if (arr[0] == 4) {
        this.formData[2].noShow = false;
        this.formData[3].noShow = false;
        this.formData[4].noShow = false;
        if (data.areatype == 1) {
          this.formData[7].noShow = false;
        } else if (data.areatype == 2) {
          this.formData[8].noShow = false;
        }
      } else if (arr[0] == 5) {
        this.formData[2].noShow = true;
        this.formData[3].noShow = true;
        this.formData[4].noShow = true;
      } else if (arr[0] == 6) {
        this.formData[2].noShow = true;
        this.formData[3].noShow = false;
        this.formData[4].noShow = true;
      } else if (arr[0] == 7) {
        this.formData[2].noShow = false;
        this.formData[3].noShow = false;
        this.formData[4].noShow = true;
      }
      this.inGetareacode(arr[0]);
    },
    inSaveroom3(data) {
      if (data.areatype == 4) {
        if (!data.houseid) {
          this.$message({
            showClose: true,
            message: "请选择房型",
            type: "error"
          });
          return false;
        }
      }
      delete data.roomtype;
      data.buildid = this.param.buildid;
      data.roomcode = data.agcode;
      delete data.agcode;
      data.roomname = data.agname;
      delete data.agname;
      this.$ajax("/system/build/save/3/saveroom", data, "1", {}, true)
        .then(res => {
          this.$emit("onRefresh");
          this.beforeClose();
          this.$message({
            message: this.title + "成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },

    inSavearea(data, obj) {
      delete data.roomtype;
      this.$ajax("/system/build/save/2/savearea", data, "1", obj, true)
        .then(res => {
          this.$emit("onRefresh");
          this.beforeClose();
          this.$message({
            message: this.title + "成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },

    submitForm(data) {
      if (this.title == "添加顶级建筑") {
        this.inSavearea(data, {});
      } else if (this.title == "添加区域建筑") {
        this.inSavearea(data, this.param);
      } else if (this.title == "添加下级建筑") {
        this.inSavearea(data, this.param);
      } else if (this.title == "添加房间") {
        this.inSaveroom3(data);
      }
    },
    beforeClose() {
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].resetForm();
      }
      this.$emit("beforeClose");
    }
  }
};
</script>
