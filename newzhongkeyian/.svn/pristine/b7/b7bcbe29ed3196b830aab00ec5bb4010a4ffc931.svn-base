<template>
  <fel-container title="人脸数据管理" @onReset="onReset" @onQuery="onQuery">
    <template slot="retrieve">
      <fel-retrie
        type="select"
        :props="{label:'name',value:'id'}"
        v-model="param.facestate"
        :selects="personnels"
      ></fel-retrie>
      <fel-retrie
        type="cascader"
        text="选择组织"
        valuetype="String"
        v-model="param.pgid"
        :selects="zzoptions"
        :props="{ checkStrictly: true ,value:'pgid',label:'pgname' }"
      ></fel-retrie>
      <fel-retrie text="请输入" v-model="param.search" :placeholder="'按'+getNumber()+'/姓名/手机号搜索'"></fel-retrie>
    </template>
    <paging-table
      ref="paging-table"
      interface="/access/v2.0/auth/r/listAccessFace"
      class="heig100"
      :isAll="range == 2? true:false"
      :class="{'cover-up':range == 2}"
      @onEjectChange="onEjectChange"
      @onSelection="(d)=>{listArrs=d}"
      :param="param"
      ajaxType="9"
      :list="list"
      :refresh="refresh"
    >
      <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
        <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
        {{v.alias}}
      </span>
      <template v-if="batchButs && batchButs.length > 0">
        <div class="full-list" v-show="!list[0].show">
          <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
        </div>
        <batch-but class="sli but-blue" :list="listArrs" :param="batchButs" @onClick="onBatchClick"></batch-but>
      </template>
    </paging-table>
    <fel-popup width="80%" title="已授权门禁列表" @close="grant.box=false" :value="grant.box">
      <paging-table
        ref="grant-paging-table"
        :list="grant.list"
        interface="/access/v2.0/auth/info/9/listFaceAccessAuth"
        :isAll="grant.range == 2? true:false"
        :class="{'cover-up':grant.range == 2}"
        :param="grant.param"
        ajaxType="9"
        @onSelection="(data)=>{grant.listArrs = data}"
        :refresh="grant.refresh"
      >
        <template v-if="grant.batchButs && grant.batchButs.length > 0">
          <div class="full-list" v-show="!grant.list[0].show">
            <el-checkbox
              v-model="grant.range"
              @change="onGrantChange"
              true-label="2"
              false-label="1"
            >跨页全选</el-checkbox>
          </div>
          <batch-but
            class="sli but-blue"
            :type="grant.range"
            :list="grant.listArrs"
            :param="grant.batchButs"
            @onClick="onGrantBatchClick"
          ></batch-but>
        </template>
      </paging-table>
      <fel-popup
        appendToBody
        form
        width="60%"
        title="人脸授权"
        @close="grantClose"
        :value="grant.grant.box"
      >
        <fel-form
          noReset
          ref="grantForm"
          @submitForm="grantSubmit"
          @closeForm="grantClose"
          width="140px"
          dynamic
          :defaultData="grant.grant.data"
          :formData="grant.grant.list"
        ></fel-form>
      </fel-popup>
    </fel-popup>
    <fel-popup form width="50%" title="录入人脸" @close="entryClose" :value="entry.box">
      <fel-form
        ref="felForm"
        :button="entry.button"
        @submitForm="submitForm"
        @closeForm="entryClose"
        width="140px"
        :defaultData="entry.data"
        :formData="entry.list"
      ></fel-form>
    </fel-popup>
    <fel-popup title="门禁授权操作记录" @close="record.box=false" :value="record.box">
      <paging-table
        :list="record.list"
        interface="/access/v2.0/auth/info/j/listFaceAccessAuthManage"
        :param="record.param"
        ajaxType="9"
        :refresh="record.refresh"
      ></paging-table>
      <fel-popup
        appendToBody
        title="门禁授权操作记录详情"
        @close="record.details.box = false"
        :value="record.details.box"
      >
        <!-- noInit -->
        <paging-table
          :list="record.details.list"
          interface="/access/v2.0/auth/info/k/listFaceAccessAuthManageDetails"
          :param="record.details.param"
          ajaxType="9"
          :refresh="record.details.refresh"
        ></paging-table>
      </fel-popup>
    </fel-popup>
    <fel-popup title="人员列表" @close="person.box=false" :value="person.box">
      <paging-table
        ref="person-paging-table"
        :list="person.list"
        interface="/access/v2.0/auth/w/listAccessFacePerson"
        :param="person.param"
        @onSelect="onPersonSelect"
        ajaxType="9"
        :refresh="person.refresh"
      >
        <span class="sli">
          <el-input
            clearable
            class="search con-search"
            v-model="person.param.search"
            :placeholder="'输入'+getNumber()+'/姓名/手机号进行检索'"
          ></el-input>
          <fel-button type="primary" @click="onPersonRefresh">查询</fel-button>
        </span>
      </paging-table>
    </fel-popup>
    <com-face @submit="submitFace" v-if="face.box" @close="face.box=false" :value="face.box"></com-face>
    <fel-popup
      footer
      width="400px"
      css="popup-photo"
      title="人脸照片"
      @close="photo.box=false"
      :value="photo.box"
    >
      <div class="see">
        <img :src="photo.img" />
        <p>拍摄时间：{{photo.date}}</p>
      </div>
      <template slot="footer">
        <el-button class="com-but-small" @click="photo.box=false">取消</el-button>
        <el-button v-if="photo.but" class="com-but-small" type="primary" @click="submitPhoto">重新录入</el-button>
      </template>
    </fel-popup>
  </fel-container>
</template>

<script>
import { mapGetters } from "vuex";
import comFace from "../../common/com-face";
export default {
  components: {
    "com-face": comFace
  },
  data() {
    let $this = this;
    return {
      record: {
        box: false,
        param: {},
        refresh: 0,
        list: [
          {
            name: "序号",
            type: "$index",
            width: "50px"
          },
          {
            name: "操作日期",
            prop: "aamcdate"
          },
          {
            name: "处理总数",
            prop: "aamcount"
          },
          {
            name: "处理失败数",
            prop: "aamnocount"
          },
          {
            name: "处理成功数",
            prop: "aamokcount"
          },
          {
            name: "操作账号",
            prop: "userlogin"
          },
          {
            name: "操作人",
            prop: "username"
          },
          {
            name: "操作",
            width: "80px",
            custom: "buts",
            value(obj) {
              return [
                {
                  alias: "详情",
                  id: 9
                }
              ];
            },
            click(obj) {
              $this.record.details.param = {
                authid: obj.row.aamid
              };
              $this.record.details.refresh = new Date().getTime();
              $this.record.details.box = true;
            }
          }
        ],
        details: {
          box: false,
          param: {
            authid: ""
          },
          refresh: 0,
          list: [
            {
              name: "序号",
              type: "$index",
              width: "50px"
            },
            {
              name: "授权开始日期",
              prop: "aamdsdate"
            },
            {
              name: "授权结束日期",
              prop: "aamdedate"
            },
            {
              name: "可用时间段",
              formatter(row) {
                return row.aamdopenstime + "-" + row.aamdopenetime;
              }
            },
            {
              name: "门位置",
              prop: "adlocation"
            },
            {
              name: "门名称",
              prop: "adname"
            },
            {
              name: "处理状态",
              prop: "aamdstatus",
              custom: "color",
              value(obj) {
                let map = {
                  "1": "处理成功",
                  "0": "正在处理",
                  "-1": "处理失败"
                };
                return map[obj.row.aamdstatus];
              },
              formatter(obj) {
                if (obj.row.aamdstatus > 0) {
                  return 1;
                } else if (obj.row.aamdstatus < 0) {
                  return 2;
                }
                return "";
              }
            },
            {
              name: "备注",
              prop: "aaudreason"
            }
          ]
        }
      },
      photo: {
        but: false,
        img: "",
        date: "",
        box: false
      },
      face: {
        type: 1,
        data: {},
        box: false
      },
      person: {
        box: false,
        param: {
          search: ""
        },
        refresh: 0,
        list: [
          {
            name: "序号",
            type: "$index",
            width: "60px"
          },
          {
            name: "姓名",
            prop: "personname"
          },
          {
            name: this.getNumber(),
            prop: "personcode"
          },
          {
            name: "归属组织",
            prop: "personlocation",
            tooltip: true
          },
          {
            name: "手机号",
            prop: "personmobile"
          }
        ]
      },
      entry: {
        box: false,
        button: [
          {
            type: "1",
            name: "取消"
          },
          {
            type: "2",
            name: "开始拍照"
          }
        ],
        data: {},
        list: [
          {
            value: "personcode", //值,
            ref: "personcode",
            name: "录入人员", //名称,
            type: "text", //input输入框的类型 或者 select,
            buts: [
              {
                class: "but-connect",
                title: "搜索人员信息",
                icon: "el-icon-search",
                onClick: this.onEntryClick
              }
            ],
            rules: [
              { required: true, message: "录入人员不能为空！", trigger: "blur" }
            ]
          }
        ]
      },
      grant: {
        grant: {
          box: false,
          data: {},
          list: [
            {
              value: "aufempsdate",
              name: "授权开始日期",
              width: "50%",
              type: "date",
              date: "datetime",
              format: "yyyy-MM-dd HH:mm:ss"
            },
            {
              value: "aufempedate",
              name: "授权结束日期",
              width: "50%",
              type: "date",
              date: "datetime",
              format: "yyyy-MM-dd HH:mm:ss"
            },
            {
              value: "aufopenstime",
              name: "每日授权开始时间",
              width: "50%",
              type: "time",
              format: "HH:mm",
              rules: [
                {
                  required: true,
                  message: "请选择每日授权开始时间",
                  trigger: "blur"
                }
              ]
            },
            {
              value: "aufopenetime",
              name: "每日授权结束时间",
              width: "50%",
              type: "time",
              format: "HH:mm",
              rules: [
                {
                  required: true,
                  message: "请选择每日授权结束时间",
                  trigger: "blur"
                }
              ]
            },
            {
              value: "aufusecount",
              width: "50%",
              name: "授权次数",
              type: "tel",
              rules: [
                {
                  min: 1,
                  max: 255,
                  message: "授权次数必须为大于0小于255的整数",
                  trigger: "blur"
                }
              ]
            }
          ]
        },
        isSelectable: true,
        box: false,
        listButs: [],
        list: [
          {
            type: "selection",
            selectable(row) {
              return $this.grant.isSelectable;
            }
          },
          {
            name: "序号",
            type: "$index",
            width: "60px"
          },
          {
            name: "门禁位置",
            prop: "aglocation"
          },
          {
            name: "门禁名称",
            prop: "amname"
          },
          {
            name: "门名称",
            prop: "adname"
          },
          {
            name: "读头编号",
            prop: "ahname"
          },
          {
            name: "授权账号",
            prop: "userlogin"
          },
          {
            name: "授权创建时间",
            prop: "aufcdate"
          },
          {
            name: "授权开始时间",
            prop: "aufempsdate"
          },
          {
            name: "开门时间段",
            prop: "aufopenstime",
            formatter(a, b, c) {
              return a.aufopenstime + "~" + a.aufopenetime;
            }
          },
          {
            name: "可开门次数",
            prop: "aufusecount"
          },
          {
            name: "操作",
            width: "100px",
            custom: "buts",
            value(obj) {
              return $this.grant.listButs;
            },
            click(obj, id, value) {
              if (id == 879) {
                $this.grant.grant.data = {
                  aufempedate: obj.row.aufempedate,
                  aufempsdate: obj.row.aufempsdate,
                  aufids: [obj.row.aufid],
                  aufopenetime: obj.row.aufopenetime,
                  aufopenstime: obj.row.aufopenstime,
                  aufusecount: obj.row.aufusecount,
                  facecode: $this.grant.param.facecode,
                  type: 1
                };
                $this.grant.grant.box = true;
              } else {
                $this.onGrantDelete([obj.row.aufid]);
              }
            }
          }
        ],
        listArrs: [],
        param: {
          facecode: ""
        },
        range: "1",
        refresh: 0,
        batchButs: []
      },
      personnels: [
        {
          id: "",
          name: "全部状态"
        },
        {
          id: "1",
          name: "正常"
        },
        {
          id: "0",
          name: "停用"
        },
        {
          id: "-1",
          name: "未录入"
        }
      ],
      zzoptions: [],
      param: {
        pgid: "",
        sequence: "",
        sortby: "",
        search: "",
        facestate: ""
      },
      topButs: [],
      listArrs: [],
      listButs: [],
      batchButs: [],
      isSelectable: true,
      list: [
        {
          type: "selection",
          selectable(row) {
            return $this.isSelectable;
          }
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "姓名",
          prop: "personname"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },
        {
          name: "手机号",
          prop: "personmobile"
        },
        {
          name: "归属组织",
          prop: "personlocation",
          width: "110px"
        },
        {
          name: "人脸照片",
          prop: "facecode",
          custom: "num",
          formatter(obj) {
            return Boolean(obj.row.facecode);
          },
          value(obj) {
            if (obj.row.facecode) {
              return "查看";
            }
            return "/";
          },
          click(obj) {
            $this.face.data = obj.row;
            $this.getAccessFaceImage();
          }
        },
        {
          name: "已授权门禁",
          noStore: true,
          show: !this.getIsDoor(),
          noClose: !this.getIsDoor(),
          prop: "faceaccesscount",
          custom: "num",
          formatter(obj) {
            let num = obj.row.faceaccesscount;
            if (num) {
              return /^[0-9]*$/.test(num);
            }
            return false;
          },
          click(obj, value) {
            $this.grant.param.facecode = obj.row.facecode;
            $this.grant.box = true;
          }
        },
        {
          name: "状态",
          prop: "facestate",
          custom: "color",
          value(obj) {
            let map = { "1": "正常", "0": "停用", "-1": "未录入" };
            return map[obj.row.facestate];
          },
          formatter(obj) {
            if (obj.row.facestate == 1) {
              return 1;
            } else if (obj.row.facestate == 0) {
              return 2;
            }
            return "";
          }
        },
        {
          name: "操作",
          width: "160px",
          custom: "buts",
          value() {
            return $this.listButs;
          },
          formatter(obj, value, index) {
            if (value.id == "871") {
              if (obj.row.facestate == -1) {
                return true;
              } else {
                return false;
              }
            } else if (obj.row.facestate == 1 && value.id == 2) {
              return false;
            } else if (obj.row.facestate == 0 && value.id == 1) {
              return false;
            } else if (obj.row.facestate == -1 && value.id != 3) {
              return false;
            } else if (obj.row.facestate === "" && value.id != 3) {
              return false;
            }
            return true;
          },
          click(obj, id, value) {
            if (id == "871") {
              $this.face.data = {
                personcode: obj.row.personcode
              };
              $this.face.type = 1;
              $this.face.box = true;
            } else {
              $this.onOperation([obj.row.facecode], id);
            }
          }
        }
      ],
      range: "1",
      refresh: 0,
      sonmenu: 0
    };
  },
  created() {
    this.listGroupTree();
    this.inGetsonmenu();
  },
  methods: {
    ...mapGetters(["getNumber", "getIsDoor"]),
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", {
        fatherid: "867"
      })
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "871") {
              this.topButs.push(value.entity);
              this.listButs.push(value.entity);
            } else if (id == "873") {
              let obj = value.entity;
              obj.id = 1;
              this.listButs.push(obj);
              this.batchButs.push(obj);
            } else if (id == "874") {
              let obj = value.entity;
              obj.id = 2;
              this.listButs.push(obj);
              this.batchButs.push(obj);
            } else if (id == "875") {
              let obj = value.entity;
              obj.id = 3;
              this.listButs.push(obj);
              this.batchButs.push(obj);
            } else if (id == "876") {
              let obj = value.entity;
              obj.id = 4;
              this.listButs.push(obj);
              this.batchButs.push(obj);
            } else if (id == "879") {
              let obj = value.entity;
              obj.alias = "修改";
              this.grant.listButs.push(obj);
              this.grant.batchButs.push(obj);
            } else if (id == "880") {
              let obj = value.entity;
              obj.alias = "删除";
              this.grant.listButs.push(obj);
              this.grant.batchButs.push(obj);
            } else if (id == "872") {
              this.photo.but = true;
            } else if (id == "898") {
              this.topButs.push(value.entity);
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          console.log("err", err);
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    onBatchClick(id) {
      let arr = [];
      if (this.range == 1) {
        arr = this.listArrs.filter(o => {
          return o.facecode;
        });
        arr = arr.map(o => o.facecode);
      }
      this.onOperation(arr, id, this.range);
    },
    grantSubmit(data) {
      this.$ajax(
        "/access/v2.0/auth/info/b/updateFaceAccessAuth",
        data,
        "9",
        {},
        true
      )
        .then(res => {
          this.grantClose();
          this.$message({
            message: "修改授权已下发",
            type: "success"
          });
          this.grant.range = "1";
          this.grant.refresh = new Date().getTime();
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    grantClose() {
      if (this.$refs["grantForm"]) {
        this.$refs["grantForm"].resetForm();
      }
      this.grant.grant.box = false;
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    deletePhoto() {},
    getAccessFaceImage() {
      this.$ajax(
        "/access/v2.0/auth/s/getAccessFaceImage",
        { facecode: this.face.data.facecode },
        "13",
        {},
        true
      )
        .then(res => {
          if (res.size) {
            this.photo.date = this.face.data.facecdate;
            this.photo.img = window.URL.createObjectURL(res);
            this.photo.box = true;
          }
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    submitPhoto() {
      this.photo.box = false;
      this.face.type = 2;
      this.face.box = true;
    },
    onPersonRefresh() {
      this.person.refresh = new Date().getTime();
    },
    listGroupTree() {
      this.$ajax("/access/v2.0/auth/3/listGroupTree", {}, "9", true)
        .then(res => {
          this.zzoptions = res.result;
        })
        .catch(err => {});
    },
    onGrantDelete(aufids) {
      this.$ajax(
        "/access/v2.0/auth/info/a/delFaceAccessAuth",
        {
          aufids: aufids,
          facecode: this.grant.param.facecode,
          type: this.grant.range
        },
        "9",
        {},
        true
      )
        .then(res => {
          this.$message({
            message: "删除授权已下发",
            type: "success"
          });
          this.grant.range = "1";
          this.grant.refresh = new Date().getTime();
          this.refresh = new Date().getTime();
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    onPersonSelect(data) {
      if (data && data.personcode) {
        if (this.$refs.felForm) {
          this.$refs.felForm.resetForm();
          this.$refs.felForm.ruleForm = {
            personcode: data.personcode
          };
        }
        this.person.box = false;
      }
    },
    entryClose() {
      if (this.$refs.felForm) {
        this.$refs.felForm.resetForm();
      }
      this.entry.box = false;
    },
    onEntryClick() {
      this.person.param.search = "";
      this.onPersonRefresh();
      this.person.box = true;
    },
    dataURLtoFile(dataurl, filename) {
      //将base64转换为文件
      var arr = dataurl.split(","),
        mime = arr[0].match(/:(.*?);/)[1],
        type = mime.replace("image/", ""),
        bstr = atob(arr[1]),
        n = bstr.length,
        u8arr = new Uint8Array(n);
      while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }
      return new File([u8arr], filename + "." + type, {
        type: mime
      });
    },
    submitFace(img) {
      let url = "/access/v2.0/auth/y/updateAccessFace";
      let data = {
        facecode: this.face.data.facecode
      };
      if (this.face.type == 1) {
        url = "/access/v2.0/auth/x/saveAccessFace";
        data = {
          personcode: this.face.data.personcode
        };
      }
      let file = this.dataURLtoFile(img, this.face.data.personcode);
      let formData = new FormData();
      formData.append("file", file);
      this.$ajax(url, data, "7", formData, true)
        .then(res => {
          this.face.data = {};
          this.entry.box = false;
          this.face.box = false;
          this.refresh = new Date().getTime();
          this.$message({
            message: (this.face.type == 1 ? "新增" : "修改") + "录入成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    onOperation(facecodes, managetype, type = 1) {
      let map = { "1": "停用", "2": "启用", "3": "删除", "4": "同步" };
      this.$ajax(
        "/access/v2.0/auth/z/manageAccessFace",
        {
          facecodes: facecodes,
          managetype: managetype,
          type: type
        },
        "9",
        this.param,
        true
      )
        .then(res => {
          this.$message({
            message: map[managetype] + "已下发",
            type: "success"
          });
          this.refresh = new Date().getTime();
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    //录入人脸 确定
    submitForm(data) {
      this.face.data = data;
      this.face.type = 1;
      this.face.box = true;
    },
    onClick(key, obj) {
      if (key == 871) {
        this.entry.data = {};
        this.entry.box = true;
      } else if (key == 898) {
        this.record.refresh = new Date().getTime();
        this.record.box = true;
      }
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "kpgl384");
    },
    getEject() {
      this.$common.getEject(this, "list", "kpgl384");
    },
    onGrantChange(val) {
      if (val == 2) {
        this.$refs["grant-paging-table"].clearSelection();
        this.$refs["grant-paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.grant.isSelectable = false;
        }, 100);
      } else {
        this.$refs["grant-paging-table"].clearSelection();
        this.grant.isSelectable = true;
      }
    },
    onGrantBatchClick(key) {
      let aufids = this.grant.listArrs.map(o => o.aufid);
      if (key == "879") {
        this.grant.grant.data = {
          aufempedate: "",
          aufempsdate: "",
          aufids: aufids,
          aufopenstime: "00:00",
          aufopenetime: "23:59",
          aufusecount: "",
          facecode: this.grant.param.facecode,
          type: this.grant.range
        };
        this.grant.grant.box = true;
      } else {
        this.onGrantDelete(aufids);
      }
    },
    onQuery() {
      this.refresh = new Date().getTime();
    },
    onReset() {
      this.param.pgid = "";
      this.param.sequence = "";
      this.param.sortby = "";
      this.param.search = "";
      this.param.facestate = "";
      this.isSelectable = true;
      this.range = "1";
      this.onQuery();
    }
  }
};
</script>

<style lang="scss">
.popup-photo {
  margin: auto;
  text-align: center;
  height: 250px;
  .see {
    margin: auto;
    text-align: center;
    img {
      margin: auto;
      height: 200px;
    }
  }
}
</style>