<!-- 子账号 -->
<template>
  <el-dialog
    title="子账号管理"
    :visible.sync="dialogVisible"
    width="90%"
    top="5%"
    :before-close="handleClose"
    :close-on-click-modal="false"
    append-to-body
    class="el-dialogs"
  >
    <el-container class="dialog-table wh100">
      <fel-left-tree>
        <div slot="left" class="left-tree">
          <fel-tree

            ref="felTree"
            interface="/system/user/son/1/getsonusertree"
            @handleNodeClick="handleNodeClick"
            @onLoadin="onLoadin"
            :refresh="treeRefresh"
            :param="treeParam"
            nodeKey="userlogin"
            :isUser="true"
            :defaultProps="{label: 'userlogin',isLeaf: 'isLeaf'}"
            :idArr="['0']"
          ></fel-tree>
        </div>
        <el-container class="organiztion_container">
          <paging-table
            ref="pagingTable"
            noInit
            height="100%"
            interface="/system/user/son/2/getsonuser"
            @onSelection="onSelection"
            @sort-change="sortChange"
            :list="list"
            :param="paramTable"
            :refresh="tableRefresh"
            @onRefreshTable="onRefreshTable"
          >
            <!-- <el-header> -->
            <span class="sli">
              <!-- <inpbox :inpb="true"> -->
              <el-select v-model="paramTable.state" class="con-select qh_inp mar0-10">
                <el-option
                  v-for="item in states"
                  :key="item.value"
                  :label="item.statename"
                  :value="item.state"
                ></el-option>
              </el-select>
              <!-- </inpbox> -->
              <!-- <inpbox inptext="类型"> -->
              <el-select v-model="paramTable.type" class="con-select qh_inp">
                <el-option
                  v-for="item in types"
                  :key="item.value"
                  :label="item.statename"
                  :value="item.state"
                ></el-option>
              </el-select>
              <el-input
                clearable
                class="con-search mar0-10"
                v-model="paramTable.search"
                placeholder="输入姓名/账号/创建人进行检索"
              ></el-input>
              <!-- </inpbox> -->
              <fel-button type="primary" @click="onRefreshTable">查询</fel-button>
              <fel-button @click="onReset">重置</fel-button>
            </span>
            <!-- </el-header> -->
          </paging-table>
        </el-container>
      </fel-left-tree>
    </el-container>
  </el-dialog>
</template>

<script>
import { mapGetters } from "vuex";
export default {
  props: {
    dialogVisible: Boolean,
    param: Object,
    listBut: Array
  },
  data() {
    let $this = this;
    return {
      // top:"",
      // width:"",
      tableRefresh: 0,
      treeRefresh: 0,
      paramTable: {
        state: "",
        search: "",
        sortby: "",
        sequence: "",
        type: "",
        userlogin: ""
      },
      treeParam: { userlogin: "", isfirst: "1" },
      states: [
        {
          statename: "全部状态",
          state: ""
        },
        {
          statename: "正常",
          state: "1"
        },
        {
          statename: "停用",
          state: "0"
        }
      ],
      types: [
        {
          statename: "全部类型",
          state: ""
        },
        {
          statename: "使用者",
          state: "2"
        },
        {
          statename: "管理者",
          state: "1"
        },
        {
          statename: "售后者",
          state: "3"
        },
        {
          statename: "管理+售后",
          state: "4"
        }
      ],
      list: [
        // {
        //   type: "selection"
        // },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "账号名",
          sortable: "custom",
          minWidth: "80px",
          prop: "userlogin"
        },
        {
          name: "账户类型",
          sortable: "custom",
          minWidth: "90px",
          prop: "usertype"
        },
        {
          name: "账户角色",
          sortable: "custom",
          minWidth: "100px",
          prop: "userrole"
        },
        {
          name: "组织",
          prop: "personlocation"
        },
        {
          name: "姓名",
          minWidth: "70px",
          sortable: "custom",
          prop: "username"
        },
        {
          name: "手机号",
          minWidth: "100px",
          sortable: "custom",
          prop: "usermobile"
        },
        // {
        //   name: "创建时间",
        //   minWidth: "100px",
        //   sortable: "custom",
        //   prop: "userdate",
        //   template: {
        //     props: ["scope"],
        //     methods: {
        //       getdate(data) {
        //         if (this.scope.row.userdate.length == 0) {
        //           return false;
        //         }
        //         if (data) {
        //           return this.scope.row.userdate.substr(0, 10);
        //         } else {
        //           return this.scope.row.userdate.substr(11);
        //         }
        //       }
        //     },
        //     template: `<ul v-if="getdate()"><li>{{getdate(true)}}</li><li>{{getdate(false)}}</li></ul>`
        //   }
        // },
        {
          name: "状态",
          sortable: "custom",
          minWidth: "70px",
          template: {
            props: ["scope"],
            template: `<span :class='scope.row.userstate=="正常"?"puc-pg":"puc-px"'>{{scope.row.userstate}}</span>`
          }
        },
        {
          noClose: true,
          show: true,
          sortable: "custom",
          name: "超级权限",
          template: {
            props: ["scope"],
            template: `<span :class='scope.row.userisadmin=="是"?"puc-pg":"puc-px"'>{{scope.row.userisadmin}}</span>`
          }
        },
        {
          name: "备注",
          minWidth: "80px",
          sortable: "custom",
          prop: "userremark"
        },
        {
          name: "操作",
          width: "220px",
          template: {
            props: ["scope"],
            computed: {
              isdisable() {
                if (this.scope.row.usertype == "售后者") {
                  return true;
                } else {
                  return false;
                }
              },
              listBut() {
                let listBut = [];
                let userstate = this.scope.row.userstate;
                if (userstate == "正常") {
                  userstate = 1;
                } else if (userstate == "停用") {
                  userstate = 2;
                }
                if ($this.isSuper) {
                  let isSuper = this.scope.row.userisadmin;
                  if (isSuper == "是") {
                    isSuper = 1;
                  } else if (isSuper == "否") {
                    isSuper = 2;
                  }
                  listBut[2] = $this.listBut[2].filter(obj => {
                    if (isSuper == 2 && obj.type == 17) {
                      return false;
                    } else if (isSuper == 1 && obj.type == 16) {
                      return false;
                    } else {
                      return true;
                    }
                  });
                }
                listBut[0] = $this.listBut[0].filter(obj => {
                  if (userstate == 2 && obj.type == 7) {
                    return false;
                  } else if (userstate == 1 && obj.type == 6) {
                    return false;
                  } else {
                    return true;
                  }
                });
                listBut[1] = JSON.parse(JSON.stringify($this.listBut[1]));
                listBut[1].forEach((item, ind) => {
                  if (item.name == "子账号管理") {
                    listBut[1].splice(ind, 1);
                  }
                });
                // console.log("$this.listBut", $this.listBut);
                return listBut;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, Object.assign({}, this.scope.row));
              }
            },
            template: `<div class="operat-buts">
            <template v-for="(val,key) of listBut">
              <span class="buts-div" v-if="val && val.length > 0" :key="key">
              <el-button v-for="(v,i) of val" :disabled="isdisable" :key="i" type="text" size="small" @click.stop="onClick(v.type||v.id)">{{v.name||v.alias}}</el-button>
              </span>
            </template>
            </div>`
          }
        }
      ]
    };
  },
  computed: {
    // treeParam() {
    //   return { userlogin: this.param.userlogin };
    // }
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.paramTable.userlogin = this.param.userlogin;
        this.treeParam.userlogin = this.param.userlogin;
        this.treeParam.isfirst = "1";
        this.refreshData();
        console.log("this.treeParam", this.treeParam);
        // setTimeout(() => {
        //   this.treeParam.isfirst = "0";
        // }, 100);
      } else {
        this.$refs.felTree.clearData();
      }
    }
  },
  methods: {
    onClick(key, obj) {
      this.$emit("onClick", key, obj);
    },
    sortChange(obj) {
      if (obj.order) {
        if (obj.order == "descending") {
          this.paramTable.sequence = "2";
        } else if (obj.order == "ascending") {
          this.paramTable.sequence = "1";
        }
        let sortby = obj.prop;
        this.paramTable.sortby = sortby;
      } else {
        this.paramTable.sequence = "";
        this.paramTable.sortby = "";
      }
      this.onRefreshTable();
    },
    refreshData() {
      if (this.$refs.pagingTable) {
        this.treeRefresh = new Date().getTime();
        this.tableRefresh = new Date().getTime();
      } else {
        setTimeout(() => {
          this.refreshData();
        }, 10);
      }
    },
    handleClose() {
      this.$emit("handleClose");
    },
    onSelection() {},
    onRefreshTable() {
      this.tableRefresh = new Date().getTime();
    },
    onReset() {
      Object.keys(this.paramTable).forEach(item => {
        if (item != "userlogin") {
          this.paramTable[item] = "";
        }
      });
      this.onRefreshTable();
    },
    onLoadin() {
      this.treeParam.isfirst = "0";
    },
    handleNodeClick(obj, data) {
      this.paramTable.userlogin = obj.userlogin;
      this.onRefreshTable();
    }
  }
};
</script>

<style lang="scss" scope>
.subAccountSel {
  width: 150px;
  margin: 0 20px 0 0;
}
.subAccountInp {
  width: 250px;
  margin: 0 20px 0 0;
}
@media screen and (max-width: 1300px) {
  .subAccountSel {
    width: 110px;
    margin: 0 10px 0 0;
  }
  .subAccountInp {
    width: 180px;
    margin: 0 10px 0 0;
  }
}
</style>