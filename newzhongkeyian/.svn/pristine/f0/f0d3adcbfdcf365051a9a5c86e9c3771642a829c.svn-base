<!-- 晚归查询 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <retrieval class="query_head">
        <inpbox :inptext="'晚归时间'">
          <el-time-picker
            class="qh_inp"
            style="width:100px !important;"
            v-model="param.latetime"
            format="HH:mm"
            value-format="HH:mm"
          ></el-time-picker>
        </inpbox>
        <!-- <inpbox :inptext="'请选择时间'">
          <fel-date class="qh_date con-date" v-model="dates"></fel-date>
        </inpbox>-->
        <inpbox inptext="查询时段">
          <dateSelect ref="dates" class="qh_date" v-model="dates"></dateSelect>
        </inpbox>
        <inpbox :inpb="true">
          <queryPosition
            ref="queryPosition"
            class="con-popover qh_inp"
            @onChoice="onChoiceWZ"
            interface="/analysis/laterecord/1/getbuildtree"
          ></queryPosition>
        </inpbox>
        <inpbox :inpb="true">
          <queryOrgan
            ref="queryOrgan"
            class="con-popover qh_inp"
            @onChoice="onChoiceZZ"
            interface="/analysis/laterecord/2/getpersontree"
          ></queryOrgan>
        </inpbox>

        <inpbox :inpb="true">
          <el-input
            clearable
            class="con-search qh_inp"
            v-model="param.search"
            :placeholder="'输入姓名/'+getNumber()+'进行查询'"
          ></el-input>
        </inpbox>

        <inpbox>
          <fel-button class="qh_btn" type="primary" @click="search">查询</fel-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
          <!-- <fel-button class="qh_btn" type="primary" @click="exportBut">导出</fel-button> -->
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="padt0 query_main">
      <paging-table
        class="tobleList wh100"
        height="100%"
        interface="/analysis/laterecord/3/getlaterecord"
        :list="list"
        :refresh="refresh"
        :param="param"
        :paramObj="paramObj"
        @onEjectChange="onEjectChange"
      >
        <span v-for="but of topButs" class="sli but-blue" @click="exportBut(but.id)">
          <i v-if="but.icon" :class="'ficon-'+but.icon"></i>
          {{but.alias}}
        </span>
      </paging-table>
    </el-main>
    <exportHistory
      historyUrl="/analysis/laterecord/6/downhistory"
      :dialogVisible="iHvisible"
      @beforeClose="()=>{iHvisible=false}"
    ></exportHistory>
  </el-container>
</template>

<script>
import { getDates, getparam } from "./query.js";
import Storages from "../../utils/Storage.js"; //缓存工具
import { mapGetters } from "vuex";
import { format, download } from "@/utils/utils.js";
import exportHistory from "../personnel/export-history";
import { timerDownload } from "../personnel/index.js";
import queryPosition from "./queryPosition";
import queryOrgan from "./queryOrgan";
export default {
  name: "wgcx189",
  components: {
    queryPosition,
    exportHistory,
    queryOrgan,
  },
  data() {
    return {
      iHvisible: false,
      paramObj: {
        type: "1",
        arearoom: [],
        build: [],
        persontree: [],
      },
      topButs: [],
      dates: [],
      param: { sdate: "", edate: "", search: "", latetime: "22:30" },
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px",
        },
        {
          name: "姓名",
          prop: "personname",
        },
        {
          name: this.getNumber(),
          prop: "personcode",
        },
        {
          name: "归属组织",
          prop: "personlocation",
        },
        {
          name: "房间位置",
          prop: "roomlocation",
        },
        {
          name: "晚归时间",
          prop: "unlockingdate",
        },
      ],
      refresh: 0,
      isExport: false,
      sonmenu: 0,
    };
  },
  created() {
    this.inGetsonmenu();
    getparam(this);
  },
  mounted() {
    this.getEject();
  },
  methods: {
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: "189" }, "1")
        .then((res) => {
          res.result.forEach((value) => {
            let entity = value.entity;
            let id = entity.id;
            if (id == "342") {
              this.topButs.push(entity);
            } else if (id == "950") {
              this.topButs.push(entity);
            }
          });
          this.sonmenu = 4;
        })
        .catch((err) => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    exportHistory() {
      this.iHvisible = true;
    },
    //导出
    exportBut(id) {
      if (id == "342") {
        let url = "/analysis/laterecord/5/exportlaterecords";
        let name = "晚归查询";
        let tValue = getDates(this.dates);
        this.param.sdate = tValue[0];
        this.param.edate = tValue[1];
        this.inExportPackage(url, name, this.param, this.paramObj);
      } else if (id == "950") {
        this.exportHistory();
      }
    },
    inExportPackage(url, name, data = {}, obj = {}) {
      this.$ajax(url, data, "1", obj, true, 60000)
        .then((res) => {
          this.$message({
            message: name + "文件导出已下发，文件正在生成中",
            type: "success",
          });
          timerDownload(
            res.result,
            "/analysis/laterecord/6/downhistory",
            this,
            name
          );
        })
        .catch((err) => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error",
          });
        });
    },
    // inExport(url, name, data = {}, obj = {}) {
    //   this.$ajax(url, data, "8", obj, "文件导出中...", 60000)
    //     .then(res => {
    //       if (res.size) {
    //         download(res, name);
    //         this.$notify({
    //           title: "成功",
    //           message: name + "文件导出成功！",
    //           type: "success"
    //         });
    //       }
    //     })
    //     .catch(err => {
    //       this.$message.error("文件导出失败！失败原因：" + err.resultMsg);
    //     });
    // },
    //重置事件
    onReset() {
      this.dates = [];
      this.$refs.dates.value2 = new Date();
      Object.keys(this.param).forEach((key) => {
        this.param[key] = "";
      });
      this.$refs.queryPosition.onClear();
      this.$refs.queryOrgan.onClear();
      this.param.latetime = "22:30";
      this.search();
    },
    ...mapGetters(["getNumber"]),
    onChoiceWZ(data, type) {
      if (type == "1") {
        this.paramObj.type = 2;
        this.paramObj.arearoom = data;
        this.paramObj.build = [];
      } else {
        this.paramObj.type = 1;
        this.paramObj.arearoom = [];
        this.paramObj.build = data;
      }
      // this.paramObj.build = data;
    },
    onChoiceZZ(data) {
      this.paramObj.persontree = data;
    },
    search() {
      let tValue = getDates(this.dates);
      this.param.sdate = tValue[0];
      this.param.edate = tValue[1];
      this.refresh = new Date().getTime();
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "wgcx189");
    },
    getEject() {
      this.$common.getEject(this, "list", "wgcx189");
    },
  },
};
</script>