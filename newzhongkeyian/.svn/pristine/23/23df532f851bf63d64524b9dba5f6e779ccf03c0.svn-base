<!-- 备份还原 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
      <retrieval class="query_head">
        <inpbox :inpb="true">
          <el-select class="con-select qh_inp" v-model="param.butype" placeholder="请选择">
            <el-option
              v-for="item in selectarr"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox :inptext="'请选择时间'">
          <fel-date class="qh_date" v-model="dates"></fel-date>
        </inpbox>
        <inpbox>
          <el-button class="qh_btn" type="primary" @click="search">查询</el-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="padt0 query_main">
      <paging-table
        height="100%"
        interface="/system/parameter/backup/1/getbackup"
        class="heig100"
        :param="param"
        :list="list"
        :refresh="refresh"
        @onEjectChange="onEjectChange"
      >
        <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>
      </paging-table>
    </el-main>
    <el-dialog
      :title="titleAdd"
      width="40%"
      :close-on-click-modal="false"
      :before-close="beforeAdd"
      :visible.sync="dialogAdd"
    >
      <fel-form
        :formData="formDataAdd"
        class="single-row"
        ref="dctFelFormAdd"
        width="80px"
        dynamic
        @closeForm="beforeAdd"
        @submitForm="submitFormAdd"
        :defaultData="formAdd"
      ></fel-form>
    </el-dialog>
    <el-dialog
      title="自动备份策略"
      top="10vh"
      width="70%"
      :close-on-click-modal="false"
      :before-close="beforeClose"
      :visible.sync="dialogVisible"
    >
      <el-container class="dialog-table6 wh100">
        <pfel-table
          interface="/system/parameter/backup/backtype/1/getbacktype"
          :param="grantParam"
          :refresh="grantRefresh"
          :list="grantList"
        >
          <span v-for="(v,k) of topDiaButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
            <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
            {{v.alias}}
          </span>
        </pfel-table>
      </el-container>
    </el-dialog>
    <el-dialog
      :title="formType?'添加自动备份策略':'修改自动备份策略'"
      width="40%"
      :close-on-click-modal="false"
      append-to-body
      :before-close="closeForm"
      :visible.sync="dialogForm"
    >
      <fel-form
        :formData="formData"
        class="single-row"
        :selects="selects"
        ref="form"
        width="140px"
        dynamic
        @closeForm="closeForm"
        @submitForm="submitForm"
        :defaultData="form"
      ></fel-form>
    </el-dialog>
  </el-container>
</template>

<script>
import Storages from "../../utils/Storage.js"; //缓存工具
import { format } from "@/utils/utils.js";
export default {
  props: ["toParam"],
  created() {
    this.inGetsonmenu();
  },
  data() {
    let $this = this;
    return {
      selects: {
        btday: []
      },
      formData: [
        {
          name: "备份类型",
          type: "select",
          value: "bttype",
          onChange: this.onBttype,
          select: [
            {
              label: "按月备份",
              value: "1"
            },
            {
              label: "按周备份",
              value: "2"
            },
            {
              label: "隔天备份",
              value: "3"
            },
            {
              label: "每天备份",
              value: "4"
            }
          ],
          rules: [
            { required: true, message: "请选择备份类型", trigger: "change" }
          ]
        },
        {
          name: "备份日",
          type: "select",
          value: "btday",
          select: "btday",
          ref: "btday",
          onInput: this.btdayInput,
          rules: []
        },
        {
          name: "备份时间",
          type: "time",
          format: "HH:mm",
          value: "bttime",
          rules: [
            { required: true, message: "请选择备份时间", trigger: "change" }
          ]
        }
      ],
      topDiaButs: [],
      formDataAdd: [
        {
          name: "备注",
          type: "textarea",
          value: "buremark"
        }
      ],
      formType: true,
      reduction: false,
      buttons: [],
      listData: {},
      typeAdd: false,
      formAdd: {
        buremark: ""
      },
      dialogAdd: false,
      param: {
        edate: "",
        sdate: "",
        butype: ""
      },
      dates: [],
      selectarr: [
        {
          label: "所有操作类型",
          value: ""
        },
        {
          label: "系统备份",
          value: "1"
        },
        {
          label: "系统还原",
          value: "2"
        }
      ],
      form: {
        bttime: "",
        bttype: "",
        btday: ""
      },
      dialogForm: false,
      grantParam: {},
      grantRefresh: 0,
      grantList: [
        {
          name: "序号",
          type: "index",
          width: "60px"
        },
        {
          name: "备份类型",
          prop: "bttype"
        },
        {
          name: "配置详情",
          prop: "btday"
        },
        {
          name: "时间点",
          prop: "bttime"
        },
        {
          name: "状态",
          prop: "btstate"
        },
        {
          name: "操作",
          width: "160px",
          template: {
            props: ["scope"],
            computed: {
              buttons() {
                return $this.buttons;
              }
            },
            methods: {
              onClick(key, obj) {
                $this.onClick(key, Object.assign({}, this.scope.row), obj);
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,k) of buttons" :key="k" type="text" size="small" @click.stop="onClick(v.type, v)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      dialogVisible: false,
      topButs: [],
      refresh: 0,
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "操作类型",
          prop: "butype"
        },
        {
          name: "备份时间点",
          prop: "budate"
        },
        {
          name: "操作人账号",
          prop: "userlogin"
        },
        {
          name: "操作人姓名",
          prop: "username"
        },
        {
          name: "联系方式",
          prop: "usermobile"
        },
        {
          name: "详情",
          prop: "buremark"
        },
        {
          name: "操作",
          width: "60px",
          template: {
            props: ["scope"],
            computed: {
              reduction() {
                return $this.reduction;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, Object.assign({}, this.scope.row));
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-if="reduction && scope.row.butype=='系统备份'" type="text" size="small" @click.stop="onClick('b4')">还原</el-button>
            </div>`
          }
        }
      ],
      sonmenu: 0
    };
  },
  computed: {
    titleAdd() {
      if (this.typeAdd) {
        return "新建备份";
      } else {
        return "还原备份";
      }
    }
  },
  mounted() {
    this.getEject();
  },
  methods: {
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          res.result.forEach(value => {
            let id = value.entity.id;
            let alias = value.entity.alias;
            if (id == "425") {
              this.topButs.push(value.entity);
              if (value.childs) {
                value.childs.forEach(obj => {
                  let oid = obj.entity.id;
                  let name = obj.entity.alias;
                  if (oid == "432") {
                    this.topDiaButs.push(obj.entity);
                  } else if (oid == "433") {
                    this.buttons.push({
                      type: "d1",
                      name,
                      alias: name
                    });
                  } else if (oid == "435") {
                    this.buttons.push({
                      type: "d2",
                      name,
                      alias: name
                    });
                  } else if (oid == "436") {
                    this.buttons.push({
                      type: "d3",
                      name,
                      alias: name
                    });
                  } else if (oid == "434") {
                    this.buttons.push({
                      type: "d4",
                      name,
                      alias: name
                    });
                  }
                });
              }
            } else if (id == "426") {
              this.topButs.push(value.entity);
            } else if (id == "427") {
              this.reduction = true;
            }
          });
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    btdayInput(arr) {
      if (arr * 1 > 365) {
        this.$message({
          showClose: true,
          message: "备份日不能大于365天",
          type: "error"
        });
        // arr="365";
      } else if (arr * 1 <= 0) {
        this.$message({
          showClose: true,
          message: "备份日不能小于1天",
          type: "error"
        });
      }
    },
    getBtdays(bttype) {
      if (bttype == "1") {
        let arr = [];
        for (let i = 1; i < 32; i++) {
          arr.push({ label: `每月${i}号`, value: i + "" });
        }
        return arr;
      } else if (bttype == "2") {
        let arr = [
          { label: "每周一", value: "1" },
          { label: "每周二", value: "2" },
          { label: "每周三", value: "3" },
          { label: "每周四", value: "4" },
          { label: "每周五", value: "5" },
          { label: "每周六", value: "6" },
          { label: "每周日", value: "7" }
        ];
        return arr;
      }
      return [];
    },
    //重置事件
    onReset() {
      this.dates = [];
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.search();
    },
    onBttype(arr, valeu) {
      valeu.btday = "";
      let rules = [];
      let type = "number";
      if (arr[0] == "1" || arr[0] == "2") {
        this.formData[1].disabled = false;
        type = "select";
        this.selects.btday = this.getBtdays(arr[0]);
        rules = [
          { required: true, message: "请选择备份日", trigger: "change" }
        ];
      } else if (arr[0] == "3") {
        this.formData[1].disabled = false;
        rules = [
          { required: true, message: "请输入备份日", trigger: "blur" },
          {
            validator: (rule, value, callback) => {
              if (value * 1 > 999999999) {
                callback(new Error("备份日格式不合法!"));
              } else {
                callback();
              }
            },
            trigger: "blur"
          }
        ];
      } else if (arr[0] == "4") {
        this.formData[1].disabled = true;
        // this.formData[1].value='1';
      }
      this.formData[1].type = type;
      if (this.$refs["form"]) {
        this.$refs["form"].rules.btday = rules;
        this.$refs["form"].resetFormRef("btday");
      }
    },
    submitFormAdd(data) {
      if (this.typeAdd) {
        this.$ajax(
          "/system/parameter/backup/save/1/savebackup",
          { buremark: data.buremark },
          "1",
          {},
          true
        )
          .then(res => {
            this.beforeAdd();
            this.refresh = new Date().getTime();
            this.$message({
              message: "新建备份成功",
              type: "success"
            });
          })
          .catch(err => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      } else {
        this.$ajax(
          "/system/parameter/backup/2/recoverbackup",
          { buremark: data.buremark, buid: this.listData.buid },
          "1",
          {},
          true
        )
          .then(res => {
            this.beforeAdd();
            this.refresh = new Date().getTime();
            this.$message({
              message: "还原备份成功",
              type: "success"
            });
          })
          .catch(err => {
            this.$message({
              showClose: true,
              message: `[${err.resultCode}] ` + err.resultMsg,
              type: "error"
            });
          });
      }
    },
    beforeAdd() {
      this.formAdd = { buremark: "" };
      this.dialogAdd = false;
    },
    search() {
      if (this.dates && this.dates.length == 2) {
        this.param.sdate = format(this.dates[0], "yyyy-MM-dd HH:mm:ss");
        this.param.edate = format(this.dates[1], "yyyy-MM-dd HH:mm:ss");
      } else {
        this.param.sdate = "";
        this.param.edate = "";
      }
      this.refresh = new Date().getTime();
    },
    submitForm(data) {
      if (data.btday * 1 > 365) {
        this.$message({
          showClose: true,
          message: "备份日不能大于365天",
          type: "error"
        });
        return;
      } else if (data.btday * 1 < 1 && this.formData[1].disabled != true) {
        this.$message({
          showClose: true,
          message: "备份日不能小于1天",
          type: "error"
        });
        return;
      }
      let url = "/system/parameter/backup/backtype/update/1/updatebacktype",
        ts = "修改";
      if (this.formType) {
        ts = "添加";
        url = "/system/parameter/backup/backtype/save/1/savebacktype";
      }
      this.$ajax(url, data, "1", {}, true)
        .then(res => {
          this.grantRefresh = new Date().getTime();
          this.closeForm();
          this.$message({
            message: ts + "自动备份策略成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    closeForm() {
      this.form = {
        bttime: "",
        bttype: "",
        btday: ""
      };
      this.dialogForm = false;
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onClick(key, data, obj) {
      if (key == "b4") {
        this.listData = data;
        this.typeAdd = false;
        this.dialogAdd = true;
      } else if (key == "425") {
        this.dialogVisible = true;
      } else if (key == "426") {
        this.typeAdd = true;
        this.dialogAdd = true;
      } else if (key == "432") {
        this.closeForm();
        this.formType = true;
        this.dialogForm = true;
      } else if (key == "d1") {
        this.onBttype([data.bttype2], {});
        this.form = {
          bttime: data.bttime,
          bttype: data.bttype2,
          btday: data.btday2,
          btid: data.btid
        };
        this.formType = false;
        this.dialogForm = true;
      } else if (key == "d2" || key == "d3" || key == "d4") {
        let mapObj = {
          d2: "/system/parameter/backup/backtype/regain/1/regainbacktype",
          d3: "/system/parameter/backup/backtype/delete/1/stopbacktype",
          d4: "/system/parameter/backup/backtype/delete/2/deletebacktype"
        };
        this.$confirm(`确定要${obj.alias}该备份策略吗？`, "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              mapObj[key],
              {
                btid: data.btid
              },
              "1",
              {},
              true
            )
              .then(res => {
                this.grantRefresh = new Date().getTime();
                this.$message({
                  message: `${obj.alias}成功`,
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      }
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "bfhy420");
    },
    getEject() {
      this.$common.getEject(this, "list", "bfhy420");
    }
  }
};
</script>