<!-- 选中楼栋时的房间管理展示 -->
<template>
  <el-container class="fjglBox2">
    <el-header class="fjglBox2_head">
      <div class="fjglBox2_head_top">
        <div class="fjglBox2_head_left">
          <div class="ztbox1"></div>
          <div>通讯正常</div>
          <div class="ztbox2"></div>
          <div>通讯异常</div>
          <div class="ztbox3"></div>
          <div>未安装</div>
        </div>
        <div
          v-loading.fullscreen.lock="loading2"
          :element-loading-text="
            `等待后台响应,预计${count > 0 ? count : 0}秒...`
          "
          element-loading-spinner="el-icon-loading"
          element-loading-background="rgba(0, 0, 0, 0.8)"
          class="fjglBox2_head_right"
        >
          <!-- 房间操作按钮 -->
          <el-button
            v-if="
              btnAll &&
                btnAll.fjczBtn &&
                btnAll.fjczBtn.entity &&
                btnAll.fjczBtn.entity.alias
            "
            :disabled="disabled"
            type="primary"
            size="medium"
            class="btn"
            @click="Operatingroom(btnAll.fjczBtn)"
          >{{ btnAll.fjczBtn.entity.alias }}</el-button>
          <!-- 指令下发按钮 -->
          <el-dropdown @command="handleCommand">
            <el-button
              v-if="
                btnAll &&
                  btnAll.zlxfBtn &&
                  btnAll.zlxfBtn.entity &&
                  btnAll.zlxfBtn.entity.alias
              "
              :disabled="disabled"
              class="btn"
              type="primary"
              size="medium"
            >
              {{ btnAll.zlxfBtn.entity.alias }}
              <i class="el-icon-arrow-down el-icon--right"></i>
            </el-button>
            <el-dropdown-menu
              v-if="btnAll && btnAll.zlxfBtn && btnAll.zlxfBtn.childs"
              slot="dropdown"
            >
              <el-dropdown-item
                v-for="(item, index) of btnAll.zlxfBtn.childs"
                :key="index"
                :command="item.entity.id"
              >{{ item.entity.alias }}</el-dropdown-item>
            </el-dropdown-menu>
          </el-dropdown>
          <!-- 批量下发按钮 -->
          <el-button
            v-if="
              btnAll &&
                btnAll.plxfBtn &&
                btnAll.plxfBtn.entity &&
                btnAll.plxfBtn.entity.alias
            "
            type="primary"
            size="medium"
            class="btn"
            @click.stop="link_batch(btnAll.plxfBtn)"
          >{{ btnAll.plxfBtn.entity.alias }}</el-button>
          <!-- 展开全部列表 -->
          <el-button
            type="primary"
            size="medium"
            class="btn"
            @click.stop="onOpen"
          >{{ isOpen ? '一键展开' : '一键收起' }}</el-button>
        </div>
      </div>
      <div class="fjglBox2_head_bottom">
        <div>
          <h3>{{ buildinfo.agname }}</h3>
          <el-popover placement="left-start" width="350" trigger="hover">
            <div class="layerList_details">
              <div v-if="getssList().length>0">
                <h4>{{getRoomtype2s[1]||"宿舍房间"}}</h4>
                <p v-for="item in getssList()">{{item.name+" : "+item.num}}</p>
              </div>
              <div v-if="getggList().show">
                <h4>{{getRoomtype2s[2]||"公共房间"}}</h4>
                <p v-for="item in getggList().ggList">{{item.name+" : "+item.num}}</p>
              </div>
              <div v-if="getjdList().length>0">
                <h4>{{getRoomtype2s[4]||"酒店房间"}}</h4>
                <p v-for="item in  getjdList()">{{item.name+" : "+item.num}}</p>
              </div>
            </div>
            <p
              slot="reference"
              v-show="buildinfo.agname"
              :style="{ 'margin-left': getTextObj().text ? '30px' : '' }"
            >{{ getTextObj().text }}</p>
          </el-popover>
        </div>
      </div>
    </el-header>
    <layerList
      ref="layerList"
      @onSelection="onSelection"
      :param="paramData"
      :paramObj="param"
      :refresh="refresh"
      :zlRefresh="zlRefresh"
    ></layerList>
    <admin
      :btnRight="
        this.btnAll && this.btnAll.fjczBtn && this.btnAll.fjczBtn.childs
      "
      :param="layerParam"
      :dialogVisible="dialogVisible"
      @refresh="adminRefresh"
      @beforeClose="dialogVisible = false"
    ></admin>
    <Addpassword
      pagesid="38"
      :dialogAddpassword="dialogAddpassword"
      :thisroomobj="layerParam"
      v-on:handleDialogClose="handleDialogClose"
      v-on:Addpassword="Addpassword"
    />
    <updateLock
      :type="zltype"
      :dialogupdateLock="dialogupdateLock"
      :thisroomobj="layerParam"
      v-on:lockDialogClose="lockDialogClose"
      v-on:updateLock="updateLock"
    />
  </el-container>
</template>

<script>
import { mapMutations, mapGetters } from "vuex";
import updateLock from "./dialog/updateforcelock";
import Addpassword from "./dialog/Addpassword";
import {
  getinstructions,
  savepswauth,
  updatelockAdd
} from "./../../utils/fjgl.js";
import layerList from "./layerList";
import admin from "./admin/index";
export default {
  props: {
    param: Object,
    refresh: Number,
    btnAll: Object
  },
  components: {
    layerList,
    admin,
    updateLock,
    Addpassword
  },
  data() {
    return {
      zlRefresh: 0,
      loading2: false,
      count: 60,
      isOpen: true,
      disabled: true,
      dialogVisible: false,
      layerParam: {},
      paramData: {},
      buildinfo: {},
      getRoomtype2s: {},
      getRoomnexttypes: {},
      setvals: null,
      dialogAddpassword: false,
      dialogupdateLock: false,
      zltype: 0
    };
  },
  created() {
    this.inGetbuildinfo();
    this.getRoomnexttypes = this.getRoomnexttype()();
    this.getRoomtype2s = this.getRoomtype2()();
  },
  computed: {
    menuObj() {
      return this.$store.state.openTab.menuObj;
    }
  },
  watch: {
    refresh() {
      this.isOpen = true;
      this.layerParam = {};
      this.buildinfo = {};
      this.disabled = true;
      this.inGetbuildinfo();
    },
    // layerParam(val) {},
    dialogVisible(val) {
      if (!val) {
        this.adminRefresh();
      }
    }
  },
  methods: {
    ...mapGetters(["getRoomtype2", "getRoomnexttype"]),
    getjdList() {
      let obj = this.buildinfo;
      return {};
    },
    getssList() {
      let obj = this.buildinfo;
      return [
        { name: "床位数", num: obj.allbeds },
        { name: "入住人数", num: obj.personcount }
      ];
    },
    getggList() {
      let obj = this.buildinfo;
      let ggList = [
        { name: this.getRoomnexttypes[1] || "教室", num: obj.classcount },
        { name: this.getRoomnexttypes[2] || "办公室", num: obj.officecount },
        { name: this.getRoomnexttypes[3] || "会议室", num: obj.meetcount },
        { name: this.getRoomnexttypes[4] || "实验室", num: obj.labcount }
      ];

      let show = obj.publiccount > 0 ? true : false;
      return { ggList, show };
    },
    getTextObj() {
      console.log("this.buildinfo", this.buildinfo);
      let obj = this.buildinfo;
      let text = "";
      let num = 0;
      let pLeft = "32%";
      if (obj.publiccount > 0) {
        num += 1;
        text = (this.getRoomtype2s[2] || "公共房间") + `数: ${obj.publiccount}`;
      }
      // if (obj.labcount > 0) {
      //   if (num > 0) {
      //     text += ` | `;
      //   }
      //   num += 1;
      //   text += (this.getRoomnexttypes[4] || "实验室") + `数: ${obj.labcount}`;
      // }
      if (obj.roomcount > 0) {
        if (num > 0) {
          text += ` | `;
        }
        num += 1;
        text += (this.getRoomtype2s[1] || "宿舍房间") + `数: ${obj.roomcount}`;
      }
      if (obj.jdcount > 0) {
        if (num > 0) {
          text += ` | `;
        }
        num += 1;
        text += (this.getRoomtype2s[4] || "酒店房间") + `数: ${obj.jdcount}`;
      }
      // if (obj.roomcount > 0 || obj.jdcount > 0) {
      //   text += ` | `
      //   text += `床位数: ${obj.allbeds || 0} | 已入住: ${obj.personcount || 0}`
      // }
      if (num == 3) {
        pLeft = "24%";
      } else if (num == 4) {
        pLeft = "20%";
      }
      if (obj.roomcount == 0 && obj.jdcount == 0) {
        pLeft = "40%";
      }
      if (num == 0) {
        pLeft = "45%";
      }
      return { text, pLeft };
    },
    adminRefresh() {
      this.zlRefresh = new Date().getTime();
    },
    //房间操作
    Operatingroom(/*val*/) {
      if (Object.keys(this.layerParam).length == 0) {
        this.$message({
          showClose: true,
          message: "请先选中要操作的房间",
          type: "error"
        });
        return;
      }
      this.dialogVisible = true;
    },
    inGetbuildinfo() {
      this.$ajax("/lock/4/getbuildinfo", {}, "1", this.param)
        .then(res => {
          console.log("刷新", res.result);
          this.buildinfo = res.result;
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    onOpen() {
      if (this.isOpen) {
        this.$refs["layerList"].allOpen();
        this.isOpen = false;
      } else {
        this.$refs["layerList"].allClose();
        this.isOpen = true;
      }
    },

    updateLock(val) {
      updatelockAdd(val, this, this.zltype);
    },
    //确认添加密码
    Addpassword(val) {
      savepswauth(val, this);
    },
    lockDialogClose(val) {
      this.dialogupdateLock = val;
    },
    handleDialogClose(val) {
      this.dialogAddpassword = val;
    },
    handleCommand(id) {
      // let room = this.$store.getters.getcheckedroom;
      if (Object.keys(this.layerParam).length == 0) {
        this.$message({
          showClose: true,
          message: "请先选中要操作的房间",
          type: "error"
        });
        return;
      }
      if (id == "125") {
        //门锁状态
        this.$confirm("确认查询门锁状态?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("125", this);
          })
          .catch(() => {});
      } else if (id == "126") {
        //门锁复位
        this.$confirm("确认复位门锁?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("126", this);
          })
          .catch(() => {});
      } else if (id == "129") {
        //远程开门
        this.$confirm("确认远程开门?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("129", this);
          })
          .catch(() => {});
      } else if (id == "130") {
        //记录读取
        this.$confirm("确认读取门锁记录?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("130", this);
          })
          .catch(() => {});
      } else if (id == "608") {
        //远程关门
        this.$confirm("确认远程关门?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("608", this);
          })
          .catch(() => {});
      } else if (id == "43") {
        //添加密码授权需要先弹框填写信息然后再调用公共方法
        //添加密码授权
        this.dialogAddpassword = true;
      } else if (id == "198") {
        //初始化门锁ID
        this.$confirm("确认初始化门锁编号?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("198", this);
          })
          .catch(() => {});
      } else if (id == "139") {
        //授权同步
        this.$confirm("确认同步该门锁所有授权?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("139", this);
          })
          .catch(() => {});
      } else if (id == "249") {
        //指纹同步
        this.$confirm("确认对选中房间指纹同步?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("249", this);
          })
          .catch(() => {});
      } else if (id == "291") {
        //清空唯一ID
        this.$confirm("删除房间的唯一ID，门锁将变成未初始化状态!", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("291", this);
          })
          .catch(() => {});
      } else if (id == "344") {
        //卡密清除
        this.$confirm("确认对选中房间卡密清除?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("344", this);
          })
          .catch(() => {});
      } else if (id == "345") {
        //指纹同步
        this.$confirm("确认对选中房间指纹清除?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            getinstructions("345", this);
          })
          .catch(() => {});
      } else if (id == "558") {
        //工作模式变更
        this.zltype = 0;
        this.dialogupdateLock = true;
      } else if (id == "559") {
        //设置强锁
        this.zltype = 1;
        this.dialogupdateLock = true;
      }
    },
    ...mapMutations(["add_tabs", "set_active_index", "addMenuObj"]),
    link_batch(val) {
      if (Object.keys(val).length == 0) return;
      this.addMenuObj({
        alias: "批量下发",
        icon: "image254",
        id: 7343,
        isnext: "0",
        parent: "",
        value: "plxf"
      });
      this.toPath("plxf");
    },
    toPath(tab) {
      let obj = this.menuObj[tab];
      if (obj) {
        this.add_tabs({
          index: tab,
          name: obj.alias,
          id: obj.id
        });
        this.set_active_index(tab);
        this.$router.push({ path: tab });
      }
    },
    /**
     * 选中房间
     * data 房间数据
     * is 是否是双击
     */
    onSelection(data, is) {
      this.disabled = false;
      this.layerParam = data;
      if (is) {
        this.dialogVisible = true;
      }
    }
  }
};
</script>

<style lang="scss"></style>
