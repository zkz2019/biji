<!-- 房间管理列表详情弹框 -->
<template>
  <el-dialog
    title="列表详情"
    width="70%"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <!-- <div class="query_head fjDialogtabel">
      <inpbox :inpb="true">
        <el-input clearable class="qh_w270 qh_inp" v-model="param.search" :placeholder="'输入房间号'"></el-input>
      </inpbox>

      <inpbox>
        <fel-button class="qh_btn" type="primary" @click="onRefresh">搜索</fel-button>
        <fel-button class="qh_btn" @click="onReset">刷新</fel-button>
      </inpbox>
    </div>-->
    <el-container class="dialog-table6 query_main">
      <paging-table
        class="tobleList wh100"
        height="100%"
        ref="paging-table"
        :isAll="range == 2? true:false"
        :class="{'cover-up':range == 2}"
        interface="/lock/6/getfailauth"
        :list="list"
        :refresh="refresh"
        :param="param"
        @onSelection="onSelection"
      >
        <template>
          <div class="full-list" v-show="!list[0].show">
            <el-checkbox v-model="range" @change="onChange" true-label="2" false-label="1">跨页全选</el-checkbox>
          </div>
          <batch-but
            class="sli but-blue"
            :type="range"
            :list="[selecArr]"
            :param="[listBtn.entity]"
            @onClick="onAction"
          ></batch-but>
        </template>
      </paging-table>
    </el-container>
  </el-dialog>
</template>

<script>
export default {
  components: {},
  props: {
    buss: null,
    listBtn: Object,
    param: Object,
    defaultData: {
      type: Object,
      default() {
        return {};
      }
    },
    dialogVisible: Boolean
  },
  data() {
    let $this = this;
    return {
      selecArr: [],
      refresh: 0,
      range: "1",
      choiceTypes: [],
      isSelectable: true,
      list: [
        {
          type: "selection",
          selectable: this.onSelectable
        },
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        { prop: "roomlocation", name: "房间位置" },
        { prop: "personname", name: "归属人" },
        { prop: "authtype", name: "授权类型" },
        {
          prop: "authdate",
          name: "最后下发时间"
        },
        {
          name: "操作",
          prop: "",
          template: {
            props: ["scope"],
            computed: {
              listBtn() {
                return $this.listBtn;
              }
            },
            methods: {
              onClick() {
                this.$confirm("确定要重载未生效授权吗？", "提示", {
                  confirmButtonText: "确定",
                  cancelButtonText: "取消",
                  type: "warning"
                }).then(() => {
                  $this.onClick(this.listBtn.entity.id, [
                    this.scope.row.authid
                  ]);
                });
              }
            },
            template: `<div class="operat-buts"> 
             <el-button type="text" size="small" @click.stop="onClick()">{{listBtn.entity.alias}}</el-button>
            </div>`
          }
        }
      ]
    };
  },
  watch: {
    dialogVisible() {
      if (this.dialogVisible) {
        this.onRefresh();
      }
    }
  },
  created() {
    this.inGetfingertype();
  },
  methods: {
    onSelectable() {
      return this.isSelectable;
    },
    onChange(val) {
      if (val == 2) {
        this.$refs["paging-table"].clearSelection();
        this.$refs["paging-table"].toggleAllSelection();
        setTimeout(() => {
          this.isSelectable = false;
        }, 100);
      } else {
        this.$refs["paging-table"].clearSelection();
        this.isSelectable = true;
      }
    },
    onClick(ind, arr) {
      if (ind == "570") {
        this.$ajax("/lock/8/reloadfailauths", {}, "1", arr,true)
          .then(res => {
            this.$message({
              message: "重载授权已下发!",
              type: "success"
            });
            this.onRefresh();
          })
          .catch(err => {
            console.log(err);
            this.$message({
              message: `[${err.resultCode}] `+err.resultMsg ,
              type: "error"
            });
          });
      }
    },
    onSelection(arr) {
      this.selecArr = arr;
    },
    onAction(id, obj) {
      let arr = [];
      if (this.selecArr.length == 0) {
        this.$message({
          message: "请先选择下方授权!",
          type: "error"
        });
        return;
      }
      this.$confirm("确定要重载未生效授权吗？", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this.selecArr.forEach(item => {
          arr.push(item.authid);
        });
        this.onClick(id, arr);
      });
    },
    beforeCloseInner() {
      this.innerVisible = false;
    },
    inGetfingertype() {},
    submitForm() {},
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onReset() {
      this.param.search = "";
      this.onRefresh();
    },
    beforeClose() {
      this.$emit("beforeClose");
    },
    onSuccess() {
      this.dialogAdd = false;
      // this.onRefresh();
    }
  }
};
</script>
