<!-- 记录查询 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <retrieval class="query_head">
        <!-- <inpbox :inptext="'请选择时间'">
          <fel-date class="qh_date" v-model="dates"></fel-date>
        </inpbox>-->
        <inpbox inptext="请选择时间">
          <dateSelect ref="dates" class="qh_date" v-model="dates"></dateSelect>
        </inpbox>
        <inpbox :inptext="'选择位置'">
          <queryPosition
            ref="queryPosition"
            class="qh_inp wid250"
            @onChoice="onChoiceWZ"
            interface="/analysis/lockrecord/1/getbuildtree"
          ></queryPosition>
        </inpbox>
        <inpbox :inptext="'选择组织'">
          <queryOrgan
            ref="queryOrgan"
            class="qh_inp wid250"
            @onChoice="onChoiceZZ"
            interface="/analysis/lockrecord/2/getpersontree"
          ></queryOrgan>
        </inpbox>
        <inpbox :inptext="'开门方式'">
          <el-select class="wid200 qh_inp" v-model="param.unlockingtype">
            <el-option
              v-for="item in unlockingtypes"
              :key="item.type"
              :label="item.typename"
              :value="item.type"
            ></el-option>
          </el-select>
        </inpbox>
        <inpbox :inptext="'请输入'">
          <el-input
            clearable
            class="qh_inp wid300"
            v-model="param.search"
            :placeholder="'输入卡号/姓名/'+getNumber()+'进行检索'"
          ></el-input>
        </inpbox>
        <inpbox>
          <fel-button class="qh_btn" type="primary" @click="search">查询</fel-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
          <!-- <fel-button class="qh_btn" type="primary" @click="exportBut">导出</fel-button> -->
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="padt0 query_main">
      <paging-table1
        class="tobleList wh100"
        height="100%"
        interface="/analysis/lockrecord/3/getlockrecord"
        :list="list"
        :refresh="refresh"
        :paramObj="paramObj"
        :param="param"
        @onEjectChange="onEjectChange"
      >
        <span class="sli but-blue" @click="exportBut">
          <i class="ficon-export"></i>
          导出
        </span>
      </paging-table1>
    </el-main>
  </el-container>
</template>

<script>
import { getDates } from "./query.js";
import Storages from "../../utils/Storage.js"; //缓存工具
import { mapGetters } from "vuex";
import { format, download } from "@/utils/utils.js";
import queryPosition from "./queryPosition";
import queryOrgan from "./queryOrgan";
export default {
  name: "sklscx92",
  components: {
    queryPosition,
    queryOrgan
  },
  data() {
    return {
      paramObj: {
        build: [],
        persontree: []
      },
      dates: [],
      unlockingtypes: [
        {
          type: "",
          typename: "全部"
        }
      ],
      param: {
        sdate: "", //this.getparam(true),
        edate: "", //this.getparam(),
        search: "",
        unlockingtype: ""
      },
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "记录类型",
          prop: "unlockingtype"
        },
        {
          name: "操作时间",
          prop: "unlockingdate"
        },
        {
          name: "房间位置",
          prop: "roomlocation"
        },
        {
          name: "操作人员",
          prop: "personname"
        },
        {
          name: "卡片类型",
          prop: "cardtype"
        },
        {
          name: "卡号/指纹号",
          prop: "cardcode"
        },
        {
          name: this.getNumber(),
          prop: "personcode"
        },
        {
          name: "归属组织",
          prop: "personlocation"
        }
      ],
      refresh: 0
    };
  },
  watch: {},
  created() {
    this.inGetType();
    this.getparam();
  },
  activated() {
    let obj = this.$route.params;
    if (obj.type) {
      this.param.unlockingtype = obj.type;
      this.search();
    }
  },
  mounted() {
    this.getEject();
  },
  methods: {
    getparam(val = false) {
      let T = new Date();
      let YM = format(T, "yyyy-MM");
      let time = format(T, "dd HH:mm:ss");
      let tValue = [`${YM}-01 00:00:00`, `${YM}-${time}`];
      this.param.sdate = tValue[0];
      this.param.edate = tValue[1];
      // if (val) {
      //   return tValue[0];
      // } else {
      //   return tValue[1];
      // }
    },
    //重置事件
    onReset() {
      this.dates = [];
      this.$refs.dates.value2 = new Date();
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.$refs.queryPosition.onClear();
      this.$refs.queryOrgan.onClear();
      this.search();
    },
    exportBut() {
      let url = "/analysis/lockrecord/4/exportlockrecord";
      let name = "记录查询";
      // if (this.dates && this.dates.length == 2) {
      //   this.param.sdate = format(this.dates[0], "yyyy-MM-dd HH:mm:ss");
      //   this.param.edate = format(this.dates[1], "yyyy-MM-dd HH:mm:ss");
      // } else {
      //   let T = new Date();
      //   let YM = format(T, "yyyy-MM");
      //   let time = format(T, "dd HH:mm:ss");
      //   let tValue = [`${YM}-01 00:00:00`, `${YM}-${time}`];
      //   this.param.sdate = tValue[0];
      //   this.param.edate = tValue[1];
      // }
      let tValue = getDates(this.dates);
      this.param.sdate = tValue[0];
      this.param.edate = tValue[1];
      this.inExport(url, name, this.param, this.paramObj);
    },
    inExport(url, name, data = {}, obj = {}) {
      this.$ajax(url, data, "8", obj, "文件导出中...", 60000)
        .then(res => {
          if (res.size) {
            download(res, name);
            this.$notify({
              title: "成功",
              message: name + "文件导出成功！",
              type: "success"
            });
          }
        })
        .catch(err => {
          this.$message.error("文件导出失败！失败原因：" + err.resultMsg);
        });
    },
    ...mapGetters(["getNumber"]),
    inGetType() {
      this.$ajax("/analysis/lockrecord/5/getrecordtype", {}, "1")
        .then(res => {
          this.unlockingtypes.push(...res.result);
        })
        .catch(err => {});
    },
    onChoiceWZ(data) {
      this.paramObj.build = data;
    },
    onChoiceZZ(data) {
      this.paramObj.persontree = data;
    },
    search() {
      // if (this.dates && this.dates.length == 2) {
      //   this.param.sdate = format(this.dates[0], "yyyy-MM-dd HH:mm:ss");
      //   this.param.edate = format(this.dates[1], "yyyy-MM-dd HH:mm:ss");
      // } else {
      //   let T = new Date();
      //   let YM = format(T, "yyyy-MM");
      //   let time = format(T, "dd HH:mm:ss");
      //   let tValue = [`${YM}-01 00:00:00`, `${YM}-${time}`];
      //   this.param.sdate = tValue[0];
      //   this.param.edate = tValue[1];
      // }
      let tValue = getDates(this.dates);
      this.param.sdate = tValue[0];
      this.param.edate = tValue[1];
      this.refresh = new Date().getTime();
    },
    onEjectChange() {
      //将用户隐藏表格的信息存到localStorage
      let arr = this.list.map(o => o.show);
      Storages.setlocalStorage("sklscx92.eject", arr);
    },
    getEject() {
      //从localStorage获取用户隐藏表格的信息
      let arr = Storages.getlocalStorage("sklscx92.eject") || [];
      let lists = [];
      this.list.forEach((value, key) => {
        let obj = Object.assign({}, value);
        obj.show = arr[key];
        lists.push(obj);
      });
      this.list = lists;
    }
  }
};
</script>