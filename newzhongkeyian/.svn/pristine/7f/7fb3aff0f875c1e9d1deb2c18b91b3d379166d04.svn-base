<template>
  <el-dialog
    :title="type == 1?'快捷修改':'快捷添加'"
    top="8vh"
    width="80%"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <fel-form
      class="quick-ruleForm"
      ref="felForm"
      :selects="selects"
      @submitForm="submitForm"
      @closeForm="beforeClose"
      width="120px"
      dynamic
      :defaultData="defaultData"
      :formData="formData"
      :key="reset1"
    ></fel-form>
    <cardReading
      ref="cardReading"
      :close="dialogVisible"
      @onInstall="onInstall"
      @resultdata="resultdata"
    />
  </el-dialog>
</template>

<script>
import { mapGetters } from "vuex";
import judge from "@/utils/judge.js";
import cardReading from "../kwgl/cardReading";
export default {
  components: {
    cardReading
  },
  props: {
    param: Object,
    dialogVisible: Boolean
  },
  data() {
    let $this = this;
    return {
      reset1: 0,
      type: 0,
      selects: {
        persontype: [],
        position: [{ agid: "", agname: "正在加载中...", isroom: true }],
        pgid: [{ pgid: "", pgname: "正在加载中...", isroom: true }],
        infoType: [
          // { value: "1", label: "开门卡" },
          // { value: "2", label: "授权卡" },
          // { value: "3", label: "身份证ID" },
          // { value: "4", label: "密码" }
        ]
      },
      defaultData: {
        timeSlot: [],
        sqTimeSlot: ["", ""],
        pgid: [],
        roomid: [],
        cardtype: "",
        changetype: "0"
      },
      formData: [
        {
          css: "type-title",
          name: "人员信息",
          type: "div"
        },
        {
          width: "33%",
          value: "persontype",
          name: "人员类型",
          type: "select",
          disabled: false,
          onChange: this.persontypeChange,
          select: "persontype",
          slabel: "typename",
          svalue: "type",
          rules: [
            {
              required: true,
              message: "请选择人员类型",
              trigger: "change"
            }
          ]
        },
        {
          width: "33%",
          value: "personcode",
          name: this.getNumber(),
          type: "text",
          disabled: false,
          rules: [
            {
              required: true,
              validator: (rule, value, callback) => {
                let name = $this.getNumber();
                if (!value && value !== 0) {
                  callback(new Error("请输入" + name));
                } else if (!judge.isAlphaNumeric(value)) {
                  callback(new Error(name + "格式错误，只能是字母或数字"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "33%",
          value: "personname",
          name: "姓名",
          type: "text",
          rules: [
            {
              required: true,
              message: "请输入姓名",
              trigger: "blur"
            }
          ]
        },
        {
          width: "33%",
          value: "personsex",
          name: "性别",
          type: "select",
          select: [
            {
              value: "1",
              label: "男"
            },
            {
              value: "0",
              label: "女"
            }
          ],
          rules: [
            {
              required: true,
              message: "请选择性别",
              trigger: "change"
            }
          ]
        },
        {
          //5
          width: "33%",
          value: "personcard",
          name: "身份证号",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isCardID(value)) {
                  callback(new Error("身份证号格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "33%",
          value: "personcomedate",
          popperClass: "dateQueryList",
          name: "登记日期",
          type: "date",
          date: "date",
          format: "yyyy-MM-dd"
        },
        {
          width: "33%",
          value: "personmobile",
          name: "手机号",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isMobile(value)) {
                  callback(new Error("手机号码格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          width: "33%",
          value: "persontype2",
          name: "学历",
          type: "select",
          select: [
            {
              value: "1",
              label: "高职"
            },
            {
              value: "2",
              label: "大专"
            },
            {
              value: "3",
              label: "本科"
            },
            {
              value: "4",
              label: "研究生"
            },
            {
              value: "5",
              label: "博士生"
            }
          ]
        },
        {
          width: "33%",
          value: "personemail",
          name: "邮箱",
          type: "text",
          rules: [
            {
              validator: (rule, value, callback) => {
                if (!value && value !== 0) {
                  callback();
                } else if (!judge.isEmail(value)) {
                  callback(new Error("邮箱码格式错误!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          //10
          width: "99%",
          value: "pgid",
          name: "归属组织",
          type: "cascader",
          options: "pgid",
          change: true,
          filterable: true,
          props: {
            label: "pgname",
            value: "pgid",
            children: "children"
          },
          rules: [
            {
              required: true,
              message: "请选择归属组织",
              trigger: "change"
            }
          ]
        },
        {
          css: "type-title",
          name: "身份信息",
          type: "div"
        },
        {
          width: "33%",
          value: "cardtype",
          name: "卡片类型",
          type: "select",
          select: "infoType",
          // disabled: true,
          onChange: this.infoTypeChange,
          slabel: "typename",
          svalue: "type",
          rules: [
            {
              required: true,
              message: "请选择卡片类型",
              trigger: "change"
            }
          ]
        },
        {
          width: "33%",
          close: "type1",
          value: "cardcode",
          name: "卡号",
          type: "text",
          disabled: false,
          onInput: this.cardcodeInput,
          rules: [
            {
              required: true,
              message: "卡号不能为空",
              trigger: "change"
            }
          ],
          buts: [
            {
              show: true,
              class: "but-connect",
              title: "读取身份证的卡号",
              icon: "el-icon-thumb",
              onClick: this.readIDCard
            },
            {
              show: true,
              class: "but-connect",
              title: "读卡器软件下载",
              icon: "el-icon-download",
              onClick: this.onClickCardReader
            }
          ]
        },
        {
          disabled: true,
          width: "33%",
          close: "type2",
          value: "isty",
          name: "停用原卡片",
          type: "select",
          select: [
            {
              value: "1",
              label: "是"
            },
            {
              value: "0",
              label: "否"
            }
          ]
        },
        {
          //15
          noShow: true,
          width: "33%",
          close: "type1",
          value: "sqTimeSlot",
          name: "授权可用时间段",
          type: "time",
          format: "HH:mm",
          date: "ftime"
        },
        {
          noShow: true,
          width: "33%",
          close: "type1",
          value: "cardusecount",
          name: "授权可用次数",
          type: "text"
        },
        {
          noShow: true,
          width: "33%",
          close: "type1",
          value: "day",
          name: "授权天数",
          type: "text"
        },
        {
          noShow: true,
          width: "33%",
          close: "type3",
          value: "password",
          name: "密码",
          type: "password",
          rules: [
            {
              validator: (rule, value, callback) => {
                let password = $this.$refs.felForm.ruleForm.password2;
                if (!value && value !== 0) {
                  callback();
                } else if (password) {
                  $this.$refs.felForm.validateField("password2");
                  callback();
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          noShow: true,
          close: "type3",
          width: "33%",
          value: "password2",
          name: "确认密码",
          type: "password",
          rules: [
            {
              validator: (rule, value, callback) => {
                let password = $this.$refs.felForm.ruleForm.password;
                if (!value && value !== 0) {
                  callback();
                } else if (password && password != value) {
                  callback(new Error("与密码不一致!"));
                } else {
                  callback();
                }
              },
              trigger: "blur"
            }
          ]
        },
        {
          //20
          css: "type-title",
          name: "房间授权",
          type: "div"
        },
        {
          width: "33%",
          value: "roomlocation",
          name: "当前房间",
          disabled: true,
          type: "text"
        },
        {
          width: "33%",
          value: "changetype",
          name: "变更类型",
          type: "select",
          onChange: this.changetypeChange,
          select: [
            {
              value: "0",
              label: "无变更"
            },
            {
              value: "1",
              label: "授权"
            },
            {
              value: "2",
              label: "换房"
            },
            {
              value: "3",
              label: "解除授权"
            }
          ]
        },
        {
          width: "33%",
          value: "issync",
          name: "同步指纹",
          type: "checkbox",
          select: [
            {
              value: "0",
              label: "否"
            },
            {
              value: "1",
              label: "是"
            }
          ]
        },
        {
          width: "33%",
          value: "isaddpass",
          name: "修改密码授权",
          type: "checkbox",
          select: [
            {
              value: "0",
              label: "否"
            },
            {
              value: "1",
              label: "是"
            }
          ]
        },
        {
          width: "33%",
          value: "isbluetoothkey",
          name: "蓝牙钥匙",
          type: "checkbox",
          select: [
            {
              value: "0",
              label: "否"
            },
            {
              value: "1",
              label: "是"
            }
          ]
        },

        {
          width: "33%",
          value: "ismanager",
          name: "管理权限",
          type: "checkbox",
          select: [
            {
              value: "0",
              label: "否"
            },
            {
              value: "1",
              label: "是"
            }
          ]
        },
        {
          width: "33%",
          value: "isfingerentry",
          name: "指纹录入权限",
          type: "checkbox",
          select: [
            {
              value: "0",
              label: "否"
            },
            {
              value: "1",
              label: "是"
            }
          ]
        },
        {
          width: "66%",
          class: "roomid",
          value: "roomid",
          name: "授权房间",
          disabled: true,
          type: "cascader",
          options: "position",
          change: false,
          filterable: true,
          props: {
            label: "agname",
            value: "agid",
            lazy: true,
            leaf: "isLeaf",
            lazyLoad: this.lazyLoad,
            disabled: "isroom",
            children: "children"
          }
        },
        {
          width: "33%",
          value: "count",
          name: "可开门次数",
          type: "text"
        },
        // {
        //   width: "33%",
        //   value: "cardsdate",
        //   name: "授权开始日期",
        //   type: "date",
        //   date: "datetime",
        //   format: "yyyy-MM-dd HH:mm:ss"
        // },
        // {
        //   width: "33%",
        //   value: "cardedate",
        //   name: "授权结束日期",
        //   type: "date",
        //   date: "datetime",
        //   format: "yyyy-MM-dd HH:mm:ss"
        // },
        {
          width: "33%",
          value: "timeSlot",
          name: "可开门时间段",
          type: "time",
          format: "HH:mm",
          date: "ftime"
        }
      ],
      pgidObj: {},
      roomidObj: {}
    };
  },
  created() {
    this.types = this.formData.slice(15, 20);
    // this.$ajax("",)
    // this.inPosition();
    // this.inGetpersontree();
    // this.inGetsavequick();
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        console.log("this.formData", this.formData);
        this.handle();
      }
    }
  },
  methods: {
    onInstall(is) {
      if (is) {
        this.formData[13].buts[1].show = true;
      } else {
        this.formData[13].buts[1].show = false;
      }
    },
    onClickCardReader() {
      this.$refs["cardReading"].download();
    },
    ...mapGetters(["getNumber", "getIsClassify"]),
    changetypeChange(arr, data) {
      if (arr[0] == "1") {
        this.formData[28].disabled = false;
      } else if (arr[0] == "2") {
        if (data.roomlocation) {
          this.formData[28].disabled = false;
        } else {
          this.formData[28].disabled = true;
        }
      } else {
        this.formData[28].disabled = true;
      }
    },
    setObjData(arr) {
      arr.forEach(obj => {
        this.pgidObj[obj.pgfatherid] = this.pgidObj[obj.pgfatherid] || [];
        this.pgidObj[obj.pgid] = [...this.pgidObj[obj.pgfatherid], obj.pgid];
        if (obj.children) {
          this.setObjData(obj.children);
        }
      });
    },
    setFJObjData(arr) {
      arr.forEach(obj => {
        // this.roomidObj[obj.agfatherid] = this.roomidObj[obj.agfatherid] || [];
        // this.roomidObj[obj.agid] = [
        //   ...this.roomidObj[obj.agfatherid],
        //   obj.agid
        // ];
        if (obj.children) {
          this.setFJObjData(obj.children);
          obj.isLeaf = false;
        } else {
          obj.isLeaf = true;
          obj.isroom = !obj.isroom;
        }
      });
    },
    inGetsavequick() {
      this.$ajax("/quick/save/getsavequick", {}, "1") //获取添加信息
        .then(res => {
          let arrs = res.result.pt.map(o => {
            o.type = o.type + "";
            return o;
          });
          this.selects.persontype = res.result.pt;
        })
        .catch(err => {});
      if (this.type == 1) {
        //获取修改信息
        this.$ajax(
          "/quick/update/getupdatequick",
          {
            cardcode: this.param.cardcode,
            personcode: this.param.personcode,
            rcid: this.param.rcid
          },
          "1"
        )
          .then(res => {
            let fj = res.result.ainfo;
            let pinfo = res.result.pinfo;
            let cinfo = res.result.cinfo;
            this.$ajax(
              "/quick/save/getcardtype",
              { persontype: pinfo.persontype },
              "1"
            )
              .then(res => {
                this.selects.infoType = res.result;
              })
              .catch(err => {});
            let obj = Object.assign(
              { timeSlot: [], sqTimeSlot: ["", ""] },
              pinfo,
              cinfo,
              fj
            );
            if (obj.personcomedate && obj.personcomedate.length > 10) {
              obj.personcomedate = obj.personcomedate.substring(0, 10);
            }
            if (this.pgidObj[pinfo.pgid]) {
              obj.pgid = this.pgidObj[pinfo.pgid];
            } else {
              obj.pgid = [pinfo.pgid];
            }
            if (cinfo != "") {
              obj.oldcardcode = cinfo.cardcode || "";
              obj.cardtype = cinfo.cardtype * 1 || "";
              obj.sqTimeSlot = [cinfo.cardstime || "", cinfo.cardetime || ""];
            }
            if (fj != "") {
              obj.roomlocation = fj.roomlocation || "";
              obj.oldroomid = fj.roomid || "";
              obj.timeSlot = [fj.openstime || "", fj.openetime || ""];
            }
            obj.roomid = [];

            obj.changetype = "0";
            if (obj.persontype2 == "0") {
              obj.persontype2 = "";
            }
            this.defaultData = obj;
            this.infoTypeChange(this.defaultData.cardtype);
          })
          .catch(err => {});
      }
      // else {
      //   this.$ajax("/quick/save/getsavequick", {}, "1")
      //     .then(res => {
      //       let arrs = res.result.pt.map(o => {
      //         o.type = o.type + "";
      //         return o;
      //       });
      //       this.selects.persontype = res.result.pt;
      //     })
      //     .catch(err => {});
      // }
    },
    inGetpersontree() {
      let url = "/quick/save/4/getpersontree";
      if (this.type == 1) {
        url = "/quick/update/3/getpersontree";
      }
      // url = "/person/save/1/getpersontree";
      this.$ajax(url, {}, "1")
        .then(res => {
          this.pgidObj = {};
          this.setObjData(res.result);
          this.selects.pgid = res.result;
          if (this.defaultData && this.defaultData.pgid) {
            this.defaultData.pgid = this.pgidObj[this.defaultData.pgid[0]];
          }
        })
        .catch(err => {});
    },
    inPosition() {
      let url = "/quick/save/3/getbuildtree";
      if (this.type == 1) {
        url = "/quick/update/2/getbuildtree";
      }
      this.selects.position = [];
      // url = "/auth/cardcenter/offlineauth/saveofflineauth/6/getbuildtree";
      this.$ajax(url, {}, "1")
        .then(res => {
          let list = res.result;
          this.setFJObjData(list);
          if (this.getIsClassify()) {
            this.selects.position.push({
              agid: "w",
              agname: "按位置显示",
              children: list
            });
          } else {
            this.selects.position = list;
          }
          // if (this.defaultData && this.defaultData.roomid) {
          //   this.defaultData.roomid = this.roomidObj[
          //     this.defaultData.roomid[0]
          //   ];
          // }
        })
        .catch(err => {});
      if (this.getIsClassify()) {
        // this.$ajax("/arearoom/public/6/listAreaRoomAllTree", {}, "9")
        //   .then((res) => {
        //     let list = res.result;
        //     this.setClassifyData(list);
        this.selects.position.push({
          agid: "f",
          agname: "按分组显示",
          isLeaf: false,
          isroom: false,
        });
        // })
        // .catch((err) => {});
      }
    },
    lazyLoad(node, resolve) {
      if (node && node.data) {
        if (node.data.agid == "f") {
          this.inlistAreaRoomTree("0", node, resolve);
        } else if (node.data.arid) {
          this.inlistAreaRoomTree(node.data.arid, node, resolve);
        } else {
          resolve();
        }
      }
      console.log("lazyLoad", node, resolve);
    },
    inlistAreaRoomTree(areafatherid, node, resolve) {
      this.$ajax(
        "/arearoom/public/2/listAreaRoomTree",
        {
          areafatherid: areafatherid,
        },
        "9"
      )
        .then((res) => {
          let list = res.result;
          this.setClassifyData(list);
          return resolve(list);
        })
        .catch((err) => {
          if (node) {
            node.loaded = false;
            node.loading = false;
          }
        });
    },
    setClassifyData(arr) {
      arr.forEach((obj) => {
        obj.agid = obj.arid;
        obj.agname = obj.arname;
        if (obj.artype == 2) {
          obj.isLeaf = true;
          obj.isroom = false;
        } else {
          obj.isLeaf = true;
          obj.isroom = true;
          if (obj.isnext == 1) {
            obj.isLeaf = false;
            obj.isroom = false;
          }
        }
      });
    },
    resultdata(data) {
      if (data.Result > 0 && (data.FunctionID == 0 || data.FunctionID == 3)) {
        if (this.$refs.felForm) {
          this.$refs.felForm.setData("cardcode", data.CardNo);
        }
      }
    },
    readIDCard() {
      this.$refs["cardReading"].readIDCard();
    },
    persontypeChange(arr, data) {
      data.cardtype = "";
      this.$ajax("/quick/save/getcardtype", { persontype: arr }, "1")
        .then(res => {
          this.selects.infoType = res.result;
        })
        .catch(err => {});
      let $this = this;
      if (arr[0] == "3") {
        this.formData[2].disabled = true;
        this.$refs["felForm"].rules["personcode"] = [];
      } else {
        this.formData[2].disabled = false;
        this.$refs["felForm"].rules["personcode"] = [
          {
            required: true,
            message: "请输入" + $this.getNumber(),
            trigger: "blur"
          }
        ];
      }
    },
    cardcodeInput(arr) {
      if (arr[0] == this.defaultData.cardcode) {
        this.formData[14].disabled = true;
      } else {
        this.formData[14].disabled = false;
      }
    },
    infoTypeChange(arr, data) {
      // this.defaultData.cardtype = ""; //选中人员类型后清空信息(卡片)类型
      if (arr[0] == 5) {
        this.types.forEach((value, index) => {
          if (value.close == "type1") {
            value.noShow = false;
          } else {
            value.noShow = true;
          }
        });
        this.formData[13].buts[0].show = true;
      } else {
        if (arr[0] == "7") {
          this.formData[13].buts[0].show = false;
        } else {
          this.formData[13].buts[0].show = true;
        }
        this.types.forEach((value, index) => {
          if (value.close == "type1") {
            value.noShow = true;
          } else {
            value.noShow = true;
          }
        });
      }
      // if (arr[0] == 1) {
      //   this.types.forEach((value, index) => {
      //     if (index == 0) {
      //       value.noShow = false;
      //     } else {
      //       value.noShow = true;
      //     }
      //   });
      // } else if (arr[0] == 2) {
      //   this.types.forEach((value, index) => {
      //     if (value.close == "type1") {
      //       value.noShow = false;
      //     } else {
      //       value.noShow = true;
      //     }
      //   });
      // } else if (arr[0] == 3) {
      //   this.types.forEach((value, index) => {
      //     if (index == 0) {
      //       value.noShow = false;
      //     } else {
      //       value.noShow = true;
      //     }
      //   });
      // } else if (arr[0] == 4) {
      //   this.types.forEach((value, index) => {
      //     if (value.close == "type3") {
      //       value.noShow = false;
      //     } else {
      //       value.noShow = true;
      //     }
      //   });
      // }
    },
    handle() {
      if (this.param.hasOwnProperty("personcode")) {
        this.type = 1;
        this.formData[1].disabled = true;
        this.formData[2].disabled = true;
        this.formData[12].disabled = true;
        this.formData[28].disabled = true;
        this.formData[14].noShow = false;
        // this.formData[23].noShow = false;
        this.formData[22].noShow = false;
        this.formData[21].noShow = false;
      } else {
        this.type = 0;
        this.formData[12].disabled = false;
        this.formData[1].disabled = false;
        this.formData[2].disabled = false;
        this.formData[28].disabled = false;
        this.formData[14].noShow = true;
        // this.formData[23].noShow = true;
        this.formData[22].noShow = true;
        this.formData[21].noShow = true;
        this.defaultData = {
          pgid: [],
          timeSlot: [],
          sqTimeSlot: ["", ""],
          roomid: [],
          cardtype: "",
          changetype: "0"
        };
      }
      if (this.type == 1) {
        delete this.formData[2].rules;
        delete this.formData[1].rules;
        this.reset1++;
      } else {
        this.formData[1].rules = [
          {
            required: true,
            message: "请选择人员类型",
            trigger: "change"
          }
        ];
        let $this = this;
        this.formData[2].rules = [
          {
            required: true,
            validator: (rule, value, callback) => {
              let name = $this.getNumber();
              if (!value && value !== 0) {
                callback(new Error("请输入" + name));
              } else if (!judge.isAlphaNumeric(value)) {
                callback(new Error(name + "格式错误，只能是字母或数字"));
              } else {
                callback();
              }
            },
            trigger: "blur"
          }
        ];
        this.reset1++;
      }
      this.inGetsavequick();
      this.inPosition();
      this.inGetpersontree();
    },

    submitForm(data) {
      //    openetime 可开门结束时间
      //    openstime 可开门开始时间
      //    cardetime 授权可用结束时间
      //    cardstime 授权可用开始时间

      data.openstime = data.timeSlot[0];
      data.openetime = data.timeSlot[1];
      data.cardstime = data.sqTimeSlot[0];
      data.cardetime = data.sqTimeSlot[1];
      delete data.timeSlot;
      delete data.sqTimeSlot;

      let pgids = data.pgid;
      if (pgids && pgids.length > 0) {
        data.pgid = pgids[pgids.length - 1];
      }
      let roomids = data.roomid;
      if (roomids && roomids.length > 0) {
        data.roomid = roomids[roomids.length - 1];
      }else{
        data.roomid = "";
      }
      if (data.roomid && !data.roomid.startsWith("r")) {
        data.roomid = "r" + data.roomid;
      }
      let url = "/quick/save/b/savequick";
      if (this.type == 1) {
        url = "/quick/update/a/updatequick";
      }
      this.$ajax(url, data, "1", {}, true)
        .then(res => {
          this.beforeClose();
          this.$message({
            message: (this.type == 1 ? "快捷修改" : "快捷添加") + "成功",
            type: "success"
          });
          this.$emit("onRefresh");
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    beforeClose() {
      this.defaultData = {
        timeSlot: [],
        sqTimeSlot: ["", ""],
        pgid: [],
        roomid: [],
        cardtype: "",
        changetype: "0"
      };
      if (this.$refs["felForm"]) {
        this.$refs["felForm"].resetForm();
      }
      this.$emit("beforeClose");
    }
  }
};
</script>