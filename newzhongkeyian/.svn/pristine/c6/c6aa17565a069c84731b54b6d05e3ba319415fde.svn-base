<!-- 数据字典 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <com-title>{{toParam.alias}}</com-title>
    </el-header>
    <el-main class="query_main">
      <paging-table
        height="100%"
        interface="/system/parameter/wordbook/2/getdatadictionary"
        class="heig100"
        :list="list"
        :refresh="refresh"
      >
        <div class="full-list">当前场景：{{wordBook}}</div>
        <span v-for="(v,k) of topButs" :key="k" class="sli but-blue" @click="onClick(v.id, v)">
          <i v-if="v.icon" :class="'ficon-'+v.icon"></i>
          {{v.alias}}
        </span>
      </paging-table>
    </el-main>
    <el-dialog
      title="编辑"
      width="30%"
      :close-on-click-modal="false"
      append-to-body
      :before-close="closeForm"
      :visible.sync="dialogForm"
    >
      <fel-form
        :formData="formModify"
        ref="dctFelFormAdd"
        width="100px"
        dynamic
        @closeForm="closeForm"
        @submitForm="submitForm"
        :defaultData="form"
      ></fel-form>
    </el-dialog>
    <el-dialog
      title="切换场景"
      width="30%"
      :close-on-click-modal="false"
      append-to-body
      :before-close="closeChange"
      :visible.sync="changeVisible"
    >
      <fel-form
        :formData="formChange"
        ref="changeform"
        width="100px"
        dynamic
        :selects="selects"
        @closeForm="closeChange"
        @submitForm="submitChange"
        :defaultData="formC"
      ></fel-form>
    </el-dialog>
    <fel-popup
      footer
      direction="vertical"
      @submitForm="submitFormAdd"
      title="新增场景"
      css="addDictionar"
      @close="grant.box=false"
      :value="grant.box"
    >
      <el-form class="fel-form" label-width="100px">
        <el-form-item class="form-it" label="新场景名称">
          <el-input class="inp" v-model="grant.wbname"></el-input>
        </el-form-item>
      </el-form>
      <fel-table
        class="table-grant"
        ref="refgrant"
        :queryData="grant.data"
        noOpera
        :list="grant.list"
      ></fel-table>
    </fel-popup>
  </el-container>
</template>

<script>
export default {
  props: ["toParam"],
  created() {
    this.inGetsonmenu();
    this.getWordBookName();
    this.getChanges();
    this.queryAdd();
  },
  data() {
    let $this = this;
    return {
      grant: {
        wbname: "",
        box: false,
        data: [],
        list: [
          {
            name: "序号",
            type: "index",
            width: "60px"
          },
          {
            name: "字典类型名称",
            prop: "ddtypename"
          },
          {
            name: "字典初始名称",
            prop: "ddname"
          },
          {
            name: "修改名称",
            custom: "input",
            clearable: true,
            formatter(obj) {
              return obj.row.ddstate == 1 ? false : true;
            },
            prop: "ddnamev"
          },
          {
            name: "字典备注",
            custom: "input",
            clearable: true,
            formatter(obj) {
              return obj.row.ddstate == 1 ? false : true;
            },
            prop: "ddremark"
          }
        ]
      },
      wordBook: "",
      formModify: [
        {
          name: "类型",
          type: "text",
          disabled: true,
          value: "ddtypename"
        },
        {
          name: "名称",
          type: "text",
          value: "ddname"
        },
        {
          name: "说明",
          type: "text",
          value: "ddremark"
        }
      ],
      formChange: [
        {
          name: "当前场景",
          disabled: true,
          value: "name"
        },
        {
          name: "选择场景",
          type: "select",
          select: "changeType",
          slabel: "wbname",
          svalue: "wbid",
          value: "wbid"
        }
      ],
      selects: {
        changeType: {}
      },
      formC: {
        name: ""
      },
      changeVisible: false,
      rigButs: [],
      button: [{ type: 2, name: "确认" }],
      formData: [
        {
          name: "字典名称",
          type: "text",
          value: "wbname",
          rules: [
            { required: true, message: "请输入字典名称", trigger: "blur" }
          ]
        },
        {
          name: "字典说明",
          type: "textarea",
          value: "wbbei",
          rules: [
            { required: true, message: "请输入字典说明", trigger: "blur" }
          ]
        }
      ],
      dialogFormAdd: true,
      form: {},
      dialogForm: false,
      grantParam: {
        wbid: ""
      },
      grantRefresh: 0,
      dialogVisible: false,
      topButs: [],
      queryAddBot: false,
      refresh: 0,
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "字典类型名称",
          prop: "ddtypename"
        },
        {
          name: "字典初始名称",
          prop: "ddinitname"
        },
        {
          name: "字典当前名称",
          prop: "ddname"
        },

        {
          name: "最后修改时间",
          prop: "ddudate"
        },
        {
          name: "最后修改账户",
          prop: "userlogin"
        },
        {
          name: "备注",
          prop: "ddremark"
        },
        {
          name: "操作",
          width: "120px",
          template: {
            props: ["scope"],
            computed: {
              rigButs() {
                return $this.rigButs;
              }
            },
            methods: {
              onClick(key) {
                $this.onClick(key, Object.assign({}, this.scope.row));
              }
            },
            template: `<div class="operat-buts"> 
             <el-button v-for="(v,key) of rigButs" :key="key" type="text" size="small" @click.stop="onClick(v.type,v)">{{v.name}}</el-button>
            </div>`
          }
        }
      ],
      queryAddData: [],
      addList: [],
      sonmenu: 0
    };
  },
  methods: {
    closeChange() {
      this.changeVisible = false;
    },
    submitChange(data) {
      this.$ajax(
        "/system/parameter/wordbook/update/5/changewordbook",
        { wbid: data.wbid },
        "1"
      )
        .then(res => {
          this.closeFormChange();
          this.getWordBookName();
          this.onRefresh();
          this.$message({
            type: "success",
            message: "切换成功!"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    getWordBookName() {
      this.$ajax("/system/parameter/wordbook/3/getWordBookName", {}, "9")
        .then(res => {
          this.wordBook = res.result || "";
          this.formC.name = this.wordBook;
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    getChanges() {
      this.$ajax("/system/parameter/wordbook/update/4/getwordbook", {}, "1")
        .then(res => {
          this.selects.changeType = res.result;
        })
        .catch(err => {
          console.log("err", err);
        });
    },
    inGetsonmenu() {
      this.$ajax("/login/home/2/getsonmenu", { fatherid: this.toParam.id }, "1")
        .then(res => {
          if (res.result) {
            res.result.forEach(value => {
              let id = value.entity.id;
              let alias = value.entity.alias;
              if (id == "429") {
                this.rigButs.push({
                  name: "编辑",
                  type: "1"
                });
              } else if (id == "431") {
                // this.rigButs.push({
                //   name: "初始化",
                //   type: "2"
                // });
              } else if (id == "428") {
                this.topButs.push(value.entity);
              } else if (id == "852") {
                this.topButs.push(value.entity);
              }
            });
          }
          this.sonmenu = 4;
        })
        .catch(err => {
          if (this.sonmenu < 3) {
            setTimeout(() => {
              this.sonmenu++;
              this.inGetsonmenu();
            }, 1000);
          }
        });
    },
    queryAdd(show) {
      if (this.queryAddData.length == 0) {
        this.$ajax(
          "/system/parameter/wordbook/update/6/getWordBookValue",
          {},
          "9"
        )
          .then(res => {
            this.queryAddData = res.result;
            this.queryAddB = true;
            if (show) {
              let arr = this.queryAddData.map(obj => {
                let o = Object.assign({}, obj);
                o.ddnamev = o.ddname;
                return o;
              });
              this.grant.wbname = "";
              this.grant.data = arr;
              this.grant.box = true;
            }
          })
          .catch(err => {});
      } else {
        if (show) {
          let arr = this.queryAddData.map(obj => {
            let o = Object.assign({}, obj);
            o.ddnamev = o.ddname;
            return o;
          });
          this.grant.wbname = "";
          this.grant.data = arr;
          this.grant.box = true;
        }
      }
    },
    submitFormAdd() {
      console.log("this.grant.data", this.grant.data);
      if (!this.grant.wbname) {
        this.$message({
          showClose: true,
          message: "新场景名称不能为空",
          type: "error"
        });
        return false;
      }
      let arr = this.grant.data;
      for (let i = 0; i < arr.length; i++) {
        let obj = arr[i];
        let m = (obj.ddnamev + "").trim();
        if (obj.ddstate != 0 && !m) {
          this.$message({
            showClose: true,
            message: "序号" + (i + 1) + obj.ddtypename + "修改名称不能为空",
            type: "error"
          });
          return false;
        }
        obj.ddname = m;
      }
      this.$ajax(
        "/system/parameter/wordbook/update/7/saveWordBook",
        {
          wbname: this.grant.wbname,
          wbvs: arr
        },
        "9",
        {},
        true
      )
        .then(res => {
          this.closeFormAdd();
          this.getWordBookName();
          this.getChanges();
          this.onRefresh();
          this.$message({
            message: "新增场景成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    closeFormChange() {
      if (this.$refs["changeform"]) {
        this.$refs["changeform"].resetForm();
      }
      this.changeVisible = false;
    },
    closeFormAdd() {
      this.grant.box = false;
    },
    submitForm(data) {
      let obj = {
        ddid: data.ddid,
        ddname: data.ddname,
        ddremark: data.ddremark
      };
      console.log("obj", obj);
      this.$ajax(
        "/system/parameter/wordbook/update/3/updatedatadictionary",
        obj,
        "1",
        {},
        true
      )
        .then(res => {
          this.dialogForm = false;
          this.onRefresh();
          this.$message({
            message: "修改成功",
            type: "success"
          });
        })
        .catch(err => {
          this.$message({
            showClose: true,
            message: `[${err.resultCode}] ` + err.resultMsg,
            type: "error"
          });
        });
    },
    closeForm() {
      this.dialogForm = false;
    },
    beforeClose() {
      this.dialogVisible = false;
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    onClick(key, data) {
      console.log("key,data", key, data);
      if (key == "2") {
        this.$confirm("此操作将初始化当前数据字典, 是否继续?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            this.$ajax(
              "/system/parameter/wordbook/delete/3/restoredatadictionary",
              {
                ddid: data.ddid
              },
              "1",
              {},
              true
            )
              .then(res => {
                this.onRefresh();
                this.$message({
                  message: "恢复初始成功",
                  type: "success"
                });
              })
              .catch(err => {
                this.$message({
                  showClose: true,
                  message: `[${err.resultCode}] ` + err.resultMsg,
                  type: "error"
                });
              });
          })
          .catch(() => {});
      } else if (key == "1") {
        this.form = data;
        this.dialogForm = true;
        // this.$confirm("此操作将删除当前数据字典, 是否继续?", "提示", {
        //   confirmButtonText: "确定",
        //   cancelButtonText: "取消",
        //   type: "warning"
        // })
        //   .then(() => {
        //     this.$ajax(
        //       "/system/parameter/wordbook/delete/1/deletewordbook",
        //       {
        //         wbid: data.wbid
        //       },
        //       "1",
        //       {},
        //       true
        //     )
        //       .then(res => {
        //         this.onRefresh();
        //         this.$message({
        //           message: "删除成功",
        //           type: "success"
        //         });
        //       })
        //       .catch(err => {
        //         this.$message({
        //           showClose: true,
        //           message: `[${err.resultCode}] ` + err.resultMsg,
        //           type: "error"
        //         });
        //       });
        //   })
        //   .catch(() => {});
      } else if (key == "428") {
        this.changeVisible = true;
      } else if (key == "852") {
        this.queryAdd(true);
      }
      //  else if (key == 0) {
      //   this.grantParam.wbid = data.wbid;
      //   this.grantRefresh = new Date().getTime();
      //   this.dialogVisible = true;
      // } else if (key == 10) {
      //   this.form = data;
      //   this.dialogForm = true;
      // } else if (key == "428") {
      //   this.queryAdd(true);
      // }
    }
  }
};
</script>
<style lang="scss">
.addDictionar {
  padding: 0 !important;
  border: 0 !important;
  .el-form-item {
    margin-bottom: 10px;
  }
  .el-form-item__label {
    text-align: left;
  }
  .table-grant {
    flex: 1;
  }
}
</style>