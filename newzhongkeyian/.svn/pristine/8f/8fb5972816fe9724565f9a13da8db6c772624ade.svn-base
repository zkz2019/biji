<template>
  <div>
    <el-select
      size="mini"
      @change="onChangeSel"
      :value="selVal"
      :placeholder="selPlaceholder"
      class="tabel_sel"
      v-if="selectShow"
    >
      <el-option
        v-for="item of options"
        :key="item.no ? item.no : item.value"
        :value="item.no ? item.no : item.value"
        :label="item.noname ? item.noname : item.label"
      ></el-option>
    </el-select>
    <el-input
      size="mini"
      border
      :value="input"
      @input="onInput"
      @change="onBlur"
      class="tabel_sel"
      v-if="!selectShow && isShow"
      :readonly="inpReadonly"
      :clearable="clearable"
    ></el-input>
    <el-input-number
      v-if="inputNumShow"
      controls-position="right"
      :step="1"
      size="mini"
      @input="onNumChange"
      v-model="Num"
    ></el-input-number>
    <el-checkbox
      @change="onChangeChe"
      border
      size="mini"
      :label="checkLabel"
      class="maR10"
      :value="checked"
      v-if="checkboxShow"
      :title="checkTitle"
    ></el-checkbox>
    <el-date-picker
      v-if="dateShow"
      @change="onDateChange"
      size="mini"
      format="yyyy-MM-dd HH:mm:ss"
      v-model="dateValue"
      type="datetime"
      default-time="12:00:00"
      :picker-options="pickerOptions"
      :placeholder="dateValueP"
    ></el-date-picker>
    <template v-if="showRight">
      <span v-if="tzShow" @click="onClick('0', true)" class="checkIn_right_center_span">调整</span>
      <span
        v-if="allShow && !xg &&addShow"
        @click="onClick('1', tjShow)"
        class="checkIn_right_center_span"
        :class="{ gray: !tjShow }"
      >添加</span>
      <span
        v-if="allShow && xg &&updateShow"
        @click="onClick('2', xgShow)"
        class="checkIn_right_center_span"
        :class="{ gray: !xgShow }"
      >{{ xgText }}</span>
      <span
        v-if="allShow&&delShow"
        @click="onClick('3', scShow)"
        class="checkIn_right_center_span"
        :class="{ gray: !scShow }"
      >删除</span>
      <span v-if="bjShow" @click="onClick('4', true)" class="checkIn_right_center_span">编辑</span>
      <!-- <span v-if="allShow" @click="onClick('5',czShow)" class="checkIn_right_center_span" :class="{gray:!czShow}">重载</span> -->
      <span class="tabel_span" v-if="issendText">{{ issendText }}</span>
      <el-button
        class="mal10"
        size="mini"
        v-if="btnText"
        :type="btnTpye"
        :style="btnStyle"
        @click="onClick('btn', true)"
      >{{ btnText }}</el-button>
      <template v-for="item of btnArr">
        <el-button
          :key="item.id"
          class="mal10"
          size="mini"
          :type="item.type"
          :style="item.styles"
          v-show="item.show"
          @click="onClicks(item)"
        >{{ item.name }}</el-button>
      </template>
      <i v-if="iconShow" class="mal10 el-icon-warning-outline puc-px"></i>
    </template>
  </div>
</template>

<script>
export default {
  name: "displayForm",
  props: {
    selectShow: { type: Boolean, default: false }, //下拉框
    checkboxShow: { type: Boolean, default: false }, //选择框
    inputNumShow: { type: Boolean, default: false }, //数字框
    clearable: { type: Boolean, default: false },
    dateValueP: { type: String, default: "请选择日期" },
    dateValueUpdate: { type: String, default: "" },
    dateShow: { type: Boolean, default: false }, //日期选择框
    btnArr: {
      type: Array,
      default: () => {
        return [];
      }
    }, //数组按钮
    isShow: {
      //如果想选择框和输入框都不显示就要设置这个为false
      type: Boolean,
      default: true
    },
    iconShow:{
      type:Boolean,
      default:false,
    },
    btnStyle: { type: String, default: "" },
    btnTpye: {
      type: String,
      default: ""
    },
    selPlaceholder: { type: String, default: "请选择是否下发" }, //下拉框占位符
    input: String, //输入框内容
    inpReadonly: { type: Boolean, default: true },
    checkLabel: { type: String, default: "下发为管理卡" }, //选择框内容
    checkTitle: {
      type: String,
      default: "将学生卡/职工卡/临时卡当成管理卡下发"
    },
    btnText: {
      typt: String,
      default: ""
    },
    issendText: { type: String, default: "" },
    defaultVal: { type: String, default: "" },
    options: {
      type: Array,
      default: function() {
        return [
          {
            label: "下发",
            value: "1",
            key: "1"
          },
          {
            label: "不下发",
            value: "0",
            key: "0"
          }
        ];
      }
    }, //下拉框列表
    pickerOptions: {
      type: Object,
      default: () => {
        return {
          disabledDate(time) {
            return time.getTime() < new Date().getTime() - 86400000;
          }
        };
      }
    },
    tzShow: { type: Boolean, default: false },
    tjShow: { type: Boolean, default: false },
    scShow: { type: Boolean, default: false },
    xgShow: { type: Boolean, default: false },
    bjShow: { type: Boolean, default: false },
    czShow: { type: Boolean, default: false },
    allShow: { type: Boolean, default: false },
    xg: { type: Boolean, default: false },
    xgText: { type: String, default: "修改" },
    showRight: { type: Boolean, default: true },
    addShow: { type: Boolean, default: true },
    updateShow: { type: Boolean, default: true },
    delShow: { type: Boolean, default: true }
  },
  data() {
    return {
      dateValue: "",
      Num: "", //数字框默认值
      selVal: "", //下拉框默认值
      checked: false
    };
  },
  mounted() {
    this.selVal = this.defaultVal;
  },
  watch: {
    defaultVal(val) {
      this.selVal = val;
    },
    dateValueUpdate(val) {
      this.dateValue = val;
    }
  },
  methods: {
    onNumChange(val) {
      this.$emit("onNumChange", val);
    },
    onInput(val) {
      this.$emit("onInput", val);
    },
    onChangeSel(val) {
      this.selVal = val;
      this.$emit("onChangeSel", val);
    },
    onChangeChe(val) {
      this.checked = val;
      this.$emit("onChangeChe", val);
    },
    onClick(key, bool) {
      if (bool) {
        this.$emit("onClick", key);
      }
    },
    onClicks(obj) {
      this.$emit("onClicks", obj);
    },
    onBlur(val) {
      this.$emit("onBlur", val);
    },
    onDateChange(obj /* val*/) {
      this.$emit("onDateChange", obj);
    }
  }
};
</script>

<style lang="scss"></style>
