<!-- 门虚掩报警统计 -->
<template>
  <el-container>
    <el-header class="query_headbox">
      <retrieval class="query_head">
        <inpbox :inptext="'请选择时间'">
          <dateSelect ref="dates" class="qh_date" v-model="dates"></dateSelect>
          <!-- <fel-date class="maR10 qh_date" v-model="dates"></fel-date> -->
        </inpbox>
        <inpbox :inptext="'选择位置'">
          <queryPosition
            ref="queryPosition"
            class="maR10 con-popover qh_inp"
            @onChoice="onChoiceWZ"
            interface="/analysis/lockckanalysis/1/getbuildtree"
          ></queryPosition>
        </inpbox>
        <inpbox>
          <fel-button class="qh_btn" type="primary" @click="search">查询</fel-button>
          <fel-button class="qh_btn" @click="onReset">重置</fel-button>
        </inpbox>
      </retrieval>
    </el-header>
    <el-main class="padt0 query_main">
      <paging-table
        class="tobleList wh100"
        height="100%"
        interface="/analysis/lockxyanalysis/2/getlockxyanalysis"
        :list="list"
        :refresh="refresh"
        :param="param"
        :paramObj="paramObj"
        @onEjectChange="onEjectChange"
      />
    </el-main>
  </el-container>
</template>

<script>
// import dateSelect from "./date-select";
import { getDates, getparam } from "./query.js";
import Storages from "../../utils/Storage.js"; //缓存工具
import { format } from "@/utils/utils.js";
import queryPosition from "./queryPosition";
export default {
  name: "mxybjtj252",
  components: {
    queryPosition
    // dateSelect
  },
  data() {
    return {
      paramObj: [],
      dates: [],
      param: { sdate: "", edate: "" },
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "房间类型",
          prop: "roomtype"
        },
        {
          name: "房间位置",
          prop: "roomlocation"
        },
        {
          name: "时间",
          prop: "unlockingdate"
        },
        {
          name: "报警类型",
          prop: "unlockingtype"
        }
      ],
      refresh: 0
    };
  },
  watch: {},
  created() {
    getparam(this);
  },
  mounted() {
    this.getEject();
  },
  methods: {
    //重置事件
    onReset() {
      this.dates = [];
      this.$refs.dates.value2 = new Date();
      Object.keys(this.param).forEach(key => {
        this.param[key] = "";
      });
      this.$refs.queryPosition.onClear();
      this.search();
    },
    onChoiceWZ(data) {
      this.paramObj = data;
    },
    search() {
      let tValue = getDates(this.dates);
      this.param.sdate = tValue[0];
      this.param.edate = tValue[1];
      this.refresh = new Date().getTime();
    },
    onEjectChange() {
      this.$common.onEjectChange(this.list, "mxybjtj252");
    },
    getEject() {
      this.$common.getEject(this, "list", "mxybjtj252");
    }
  }
};
</script>