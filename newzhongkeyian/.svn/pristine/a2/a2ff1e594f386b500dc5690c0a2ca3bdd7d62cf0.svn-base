<template>
  <el-dialog
    title="导入历史查询"
    width="70%"
    class="instructDialog"
    :close-on-click-modal="false"
    :before-close="beforeClose"
    :visible.sync="dialogVisible"
  >
    <el-container class="dialog-table6 wh100">
      <paging-table
        interface="/system/device/devicelock/upload/3/getuploaddevicelock"
        :list="list"
        :param="param"
        :refresh="refresh"
      >
        <span class="sli">
          <el-input clearable class="search con-search" v-model="param.search" placeholder="输入创建人进行检索"></el-input>
          <fel-button type="primary" @click="onRefresh">查询</fel-button>
        </span>
      </paging-table>
    </el-container>
    <el-dialog
      title="房间明细查询"
      width="70%"
      class="instructDialog"
      append-to-body
      :close-on-click-modal="false"
      :before-close="beforeDetailed"
      :visible.sync="dialogDetailed"
    >
      <el-container class="dialog-table6 wh100">
        <paging-table
          interface="/system/device/devicelock/upload/4/getuploaddevicelockdetails"
          :list="detailedList"
          :param="detailedParam"
          :refresh="detailedRefresh"
        ></paging-table>
      </el-container>
    </el-dialog>
    <el-dialog
      title="指令明细查询"
      width="70%"
      class="instructDialog"
      append-to-body
      :close-on-click-modal="false"
      :before-close="beforeInstruct"
      :visible.sync="dialogInstruct"
    >
      <el-container class="dialog-table6 wh100">
        <paging-table
          interface="/system/device/devicelock/upload/5/getuploaddeviceorderdetails"
          :list="instructList"
          :param="detailedParam"
          :refresh="instructRefresh"
        ></paging-table>
      </el-container>
    </el-dialog>
  </el-dialog>
</template>

<script>
export default {
  props: {
    dialogVisible: Boolean,
    paramObj:Object,
  },
  data() {
    let $this = this;
    return {
      dialogInstruct: false,
      detailedList: [
        // 导入历史房间明细查询 列表
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "网关编号",
          prop: "gatewaycode"
        },
        {
          name: "网关唯一ID",
          prop: "gatewaycode2"
        },
        {
          name: "房间编号",
          prop: "roomcode"
        },
        {
          name: "门锁唯一ID",
          prop: "roomcode2"
        },
        {
          name: "房间位置",
          prop: "roomlocation",
          width: "200px"
        },
        {
          name: "房间型号",
          prop: "roommodel"
        }
      ],
      instructList: [
        // 导入历史房间指令明细查询 列表
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "网关通讯ID",
          prop: "gatewaycode"
        },
        {
          name: "网关唯一ID",
          prop: "gatewaycode2"
        },
        {
          name: "指令类型",
          prop: "ordertype"
        },
        {
          name: "房间通讯ID",
          prop: "roomcode"
        },
        {
          name: "门锁唯一ID",
          prop: "roomcode2"
        },
        {
          name: "房间位置",
          prop: "roomlocation",
          width: "200px"
        },
        {
          name: "发送状态",
          template: {
            props: ["scope"],
            template: `<span :class='scope.row.issend=="下发成功"?"puc-ps":"puc-px"'>{{scope.row.issend}}</span>`
          }
        },
        {
          name: "备注",
          prop: "failtype"
        }
      ],
      instructRefresh: 0,
      param: {
        search: "",
        buildid:"",
      },
      detailedParam: {
        ulid: ""
      },
      detailedRefresh: 0,
      dialogDetailed: false,

      refresh: 0,
      list: [
        {
          name: "序号",
          type: "$index",
          width: "60px"
        },
        {
          name: "导入房间数",
          prop: "ulcount",
          template: {
            props: ["scope"],
            methods: {
              isNumber(num) {
                if (num) {
                  return /^[0-9]*$/.test(num) && num != 0;
                }
                return false;
              },
              onClick() {
                if (this.scope.row.ulid) {
                  $this.detailedParam.ulid = this.scope.row.ulid;
                  $this.onDetailedRefresh();
                  $this.dialogDetailed = true;
                }
              }
            },
            template: `<div>
              <span v-if="isNumber(scope.row.ulcount)"><a class="a-click" @click.stop="onClick">{{scope.row.ulcount}}</a></span>
              <span v-else>{{scope.row.ulcount}}</span>
            </div>`
          }
        },
        {
          name: "指令数",
          prop: "ulcount2",
          template: {
            props: ["scope"],
            methods: {
              isNumber(num) {
                if (num) {
                  return /^[0-9]*$/.test(num) && num != 0;
                }
                return false;
              },
              onClick() {
                if (this.scope.row.ulid) {
                  $this.detailedParam.ulid = this.scope.row.ulid;
                  $this.onInstructRefresh();
                  $this.dialogInstruct = true;
                }
              }
            },
            template: `<div>
              <span v-if="isNumber(scope.row.ulcount2)"><a class="a-click" @click.stop="onClick">{{scope.row.ulcount2}}</a></span>
              <span v-else>{{scope.row.ulcount2}}</span>
            </div>`
          }
        },
        {
          name: "创建时间",
          prop: "uldate"
        },
        {
          name: "创建人",
          prop: "userlogin"
        }
      ]
    };
  },
  watch: {
    dialogVisible(val) {
      if (val) {
        this.onRefresh();
      }
    },
    paramObj(val){
      this.param.buildid=val.buildid;
    }
  },
  methods: {
    onDetailedRefresh() {
      this.detailedRefresh = new Date().getTime();
    },
    onInstructRefresh() {
      this.instructRefresh = new Date().getTime();
    },
    beforeDetailed() {
      this.dialogDetailed = false;
    },
    onRefresh() {
      this.refresh = new Date().getTime();
    },
    beforeInstruct() {
      this.dialogInstruct = false;
    },
    beforeClose() {
      this.$emit("beforeClose");
    }
  }
};
</script>

<style>
</style>
